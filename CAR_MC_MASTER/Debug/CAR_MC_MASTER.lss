
CAR_MC_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003cc0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000254  00800060  00003cc0  00003d54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  008002b4  008002b4  00003fa8  2**0
                  ALLOC
  3 .stab         00004974  00000000  00000000  00003fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002483  00000000  00000000  0000891c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  0000ad9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000005e  00000000  00000000  0000addf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000f80  00000000  00000000  0000ae3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003a8  00000000  00000000  0000bdbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000524  00000000  00000000  0000c165  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000040  00000000  00000000  0000c68c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000145  00000000  00000000  0000c6cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000019f2  00000000  00000000  0000c811  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  0000e203  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ec       	ldi	r30, 0xC0	; 192
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3b       	cpi	r26, 0xB4	; 180
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 eb       	ldi	r26, 0xB4	; 180
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3c       	cpi	r26, 0xC2	; 194
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <main>
      8a:	0c 94 5e 1e 	jmp	0x3cbc	; 0x3cbc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__divdi3>:
      92:	a2 e7       	ldi	r26, 0x72	; 114
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	ef e4       	ldi	r30, 0x4F	; 79
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	0c 94 27 1e 	jmp	0x3c4e	; 0x3c4e <__prologue_saves__>
      9e:	98 2e       	mov	r9, r24
      a0:	89 2e       	mov	r8, r25
      a2:	71 2e       	mov	r7, r17
      a4:	88 e0       	ldi	r24, 0x08	; 8
      a6:	fe 01       	movw	r30, r28
      a8:	31 96       	adiw	r30, 0x01	; 1
      aa:	df 01       	movw	r26, r30
      ac:	68 2e       	mov	r6, r24
      ae:	1d 92       	st	X+, r1
      b0:	6a 94       	dec	r6
      b2:	e9 f7       	brne	.-6      	; 0xae <__divdi3+0x1c>
      b4:	29 83       	std	Y+1, r18	; 0x01
      b6:	3a 83       	std	Y+2, r19	; 0x02
      b8:	4b 83       	std	Y+3, r20	; 0x03
      ba:	5c 83       	std	Y+4, r21	; 0x04
      bc:	6d 83       	std	Y+5, r22	; 0x05
      be:	7e 83       	std	Y+6, r23	; 0x06
      c0:	9f 82       	std	Y+7, r9	; 0x07
      c2:	98 87       	std	Y+8, r25	; 0x08
      c4:	fe 01       	movw	r30, r28
      c6:	39 96       	adiw	r30, 0x09	; 9
      c8:	df 01       	movw	r26, r30
      ca:	1d 92       	st	X+, r1
      cc:	8a 95       	dec	r24
      ce:	e9 f7       	brne	.-6      	; 0xca <__divdi3+0x38>
      d0:	a9 86       	std	Y+9, r10	; 0x09
      d2:	ba 86       	std	Y+10, r11	; 0x0a
      d4:	cb 86       	std	Y+11, r12	; 0x0b
      d6:	dc 86       	std	Y+12, r13	; 0x0c
      d8:	ed 86       	std	Y+13, r14	; 0x0d
      da:	fe 86       	std	Y+14, r15	; 0x0e
      dc:	0f 87       	std	Y+15, r16	; 0x0f
      de:	18 8b       	std	Y+16, r17	; 0x10
      e0:	8d 81       	ldd	r24, Y+5	; 0x05
      e2:	9e 81       	ldd	r25, Y+6	; 0x06
      e4:	af 81       	ldd	r26, Y+7	; 0x07
      e6:	b8 85       	ldd	r27, Y+8	; 0x08
      e8:	b7 fd       	sbrc	r27, 7
      ea:	07 c0       	rjmp	.+14     	; 0xfa <__divdi3+0x68>
      ec:	e1 96       	adiw	r28, 0x31	; 49
      ee:	1c ae       	std	Y+60, r1	; 0x3c
      f0:	1d ae       	std	Y+61, r1	; 0x3d
      f2:	1e ae       	std	Y+62, r1	; 0x3e
      f4:	1f ae       	std	Y+63, r1	; 0x3f
      f6:	e1 97       	sbiw	r28, 0x31	; 49
      f8:	64 c0       	rjmp	.+200    	; 0x1c2 <__divdi3+0x130>
      fa:	21 95       	neg	r18
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	12 16       	cp	r1, r18
     100:	08 f0       	brcs	.+2      	; 0x104 <__divdi3+0x72>
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	31 95       	neg	r19
     106:	91 e0       	ldi	r25, 0x01	; 1
     108:	13 16       	cp	r1, r19
     10a:	08 f0       	brcs	.+2      	; 0x10e <__divdi3+0x7c>
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	b3 2f       	mov	r27, r19
     110:	b8 1b       	sub	r27, r24
     112:	81 e0       	ldi	r24, 0x01	; 1
     114:	3b 17       	cp	r19, r27
     116:	08 f0       	brcs	.+2      	; 0x11a <__divdi3+0x88>
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	98 2b       	or	r25, r24
     11c:	41 95       	neg	r20
     11e:	31 e0       	ldi	r19, 0x01	; 1
     120:	14 16       	cp	r1, r20
     122:	08 f0       	brcs	.+2      	; 0x126 <__divdi3+0x94>
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	a4 2f       	mov	r26, r20
     128:	a9 1b       	sub	r26, r25
     12a:	81 e0       	ldi	r24, 0x01	; 1
     12c:	4a 17       	cp	r20, r26
     12e:	08 f0       	brcs	.+2      	; 0x132 <__divdi3+0xa0>
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	38 2b       	or	r19, r24
     134:	51 95       	neg	r21
     136:	91 e0       	ldi	r25, 0x01	; 1
     138:	15 16       	cp	r1, r21
     13a:	08 f0       	brcs	.+2      	; 0x13e <__divdi3+0xac>
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	f5 2f       	mov	r31, r21
     140:	f3 1b       	sub	r31, r19
     142:	81 e0       	ldi	r24, 0x01	; 1
     144:	5f 17       	cp	r21, r31
     146:	08 f0       	brcs	.+2      	; 0x14a <__divdi3+0xb8>
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	98 2b       	or	r25, r24
     14c:	61 95       	neg	r22
     14e:	31 e0       	ldi	r19, 0x01	; 1
     150:	16 16       	cp	r1, r22
     152:	08 f0       	brcs	.+2      	; 0x156 <__divdi3+0xc4>
     154:	30 e0       	ldi	r19, 0x00	; 0
     156:	e6 2f       	mov	r30, r22
     158:	e9 1b       	sub	r30, r25
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	6e 17       	cp	r22, r30
     15e:	08 f0       	brcs	.+2      	; 0x162 <__divdi3+0xd0>
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	38 2b       	or	r19, r24
     164:	71 95       	neg	r23
     166:	41 e0       	ldi	r20, 0x01	; 1
     168:	17 16       	cp	r1, r23
     16a:	08 f0       	brcs	.+2      	; 0x16e <__divdi3+0xdc>
     16c:	40 e0       	ldi	r20, 0x00	; 0
     16e:	57 2f       	mov	r21, r23
     170:	53 1b       	sub	r21, r19
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	75 17       	cp	r23, r21
     176:	08 f0       	brcs	.+2      	; 0x17a <__divdi3+0xe8>
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	48 2b       	or	r20, r24
     17c:	89 2d       	mov	r24, r9
     17e:	81 95       	neg	r24
     180:	91 e0       	ldi	r25, 0x01	; 1
     182:	18 16       	cp	r1, r24
     184:	08 f0       	brcs	.+2      	; 0x188 <__divdi3+0xf6>
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	68 2e       	mov	r6, r24
     18a:	64 1a       	sub	r6, r20
     18c:	46 2d       	mov	r20, r6
     18e:	31 e0       	ldi	r19, 0x01	; 1
     190:	86 15       	cp	r24, r6
     192:	08 f0       	brcs	.+2      	; 0x196 <__divdi3+0x104>
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	93 2b       	or	r25, r19
     198:	88 2d       	mov	r24, r8
     19a:	81 95       	neg	r24
     19c:	89 1b       	sub	r24, r25
     19e:	29 83       	std	Y+1, r18	; 0x01
     1a0:	ba 83       	std	Y+2, r27	; 0x02
     1a2:	ab 83       	std	Y+3, r26	; 0x03
     1a4:	fc 83       	std	Y+4, r31	; 0x04
     1a6:	ed 83       	std	Y+5, r30	; 0x05
     1a8:	5e 83       	std	Y+6, r21	; 0x06
     1aa:	4f 83       	std	Y+7, r20	; 0x07
     1ac:	88 87       	std	Y+8, r24	; 0x08
     1ae:	2f ef       	ldi	r18, 0xFF	; 255
     1b0:	3f ef       	ldi	r19, 0xFF	; 255
     1b2:	4f ef       	ldi	r20, 0xFF	; 255
     1b4:	5f ef       	ldi	r21, 0xFF	; 255
     1b6:	e1 96       	adiw	r28, 0x31	; 49
     1b8:	2c af       	std	Y+60, r18	; 0x3c
     1ba:	3d af       	std	Y+61, r19	; 0x3d
     1bc:	4e af       	std	Y+62, r20	; 0x3e
     1be:	5f af       	std	Y+63, r21	; 0x3f
     1c0:	e1 97       	sbiw	r28, 0x31	; 49
     1c2:	8d 85       	ldd	r24, Y+13	; 0x0d
     1c4:	9e 85       	ldd	r25, Y+14	; 0x0e
     1c6:	af 85       	ldd	r26, Y+15	; 0x0f
     1c8:	b8 89       	ldd	r27, Y+16	; 0x10
     1ca:	b7 ff       	sbrs	r27, 7
     1cc:	6a c0       	rjmp	.+212    	; 0x2a2 <__divdi3+0x210>
     1ce:	e1 96       	adiw	r28, 0x31	; 49
     1d0:	4c ad       	ldd	r20, Y+60	; 0x3c
     1d2:	5d ad       	ldd	r21, Y+61	; 0x3d
     1d4:	6e ad       	ldd	r22, Y+62	; 0x3e
     1d6:	7f ad       	ldd	r23, Y+63	; 0x3f
     1d8:	e1 97       	sbiw	r28, 0x31	; 49
     1da:	40 95       	com	r20
     1dc:	50 95       	com	r21
     1de:	60 95       	com	r22
     1e0:	70 95       	com	r23
     1e2:	e1 96       	adiw	r28, 0x31	; 49
     1e4:	4c af       	std	Y+60, r20	; 0x3c
     1e6:	5d af       	std	Y+61, r21	; 0x3d
     1e8:	6e af       	std	Y+62, r22	; 0x3e
     1ea:	7f af       	std	Y+63, r23	; 0x3f
     1ec:	e1 97       	sbiw	r28, 0x31	; 49
     1ee:	a1 94       	neg	r10
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	1a 14       	cp	r1, r10
     1f4:	08 f0       	brcs	.+2      	; 0x1f8 <__divdi3+0x166>
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	b1 94       	neg	r11
     1fa:	91 e0       	ldi	r25, 0x01	; 1
     1fc:	1b 14       	cp	r1, r11
     1fe:	08 f0       	brcs	.+2      	; 0x202 <__divdi3+0x170>
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	6b 2d       	mov	r22, r11
     204:	68 1b       	sub	r22, r24
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	b6 16       	cp	r11, r22
     20a:	08 f0       	brcs	.+2      	; 0x20e <__divdi3+0x17c>
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	98 2b       	or	r25, r24
     210:	c1 94       	neg	r12
     212:	21 e0       	ldi	r18, 0x01	; 1
     214:	1c 14       	cp	r1, r12
     216:	08 f0       	brcs	.+2      	; 0x21a <__divdi3+0x188>
     218:	20 e0       	ldi	r18, 0x00	; 0
     21a:	5c 2d       	mov	r21, r12
     21c:	59 1b       	sub	r21, r25
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	c5 16       	cp	r12, r21
     222:	08 f0       	brcs	.+2      	; 0x226 <__divdi3+0x194>
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	28 2b       	or	r18, r24
     228:	d1 94       	neg	r13
     22a:	91 e0       	ldi	r25, 0x01	; 1
     22c:	1d 14       	cp	r1, r13
     22e:	08 f0       	brcs	.+2      	; 0x232 <__divdi3+0x1a0>
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	4d 2d       	mov	r20, r13
     234:	42 1b       	sub	r20, r18
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	d4 16       	cp	r13, r20
     23a:	08 f0       	brcs	.+2      	; 0x23e <__divdi3+0x1ac>
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	98 2b       	or	r25, r24
     240:	e1 94       	neg	r14
     242:	21 e0       	ldi	r18, 0x01	; 1
     244:	1e 14       	cp	r1, r14
     246:	08 f0       	brcs	.+2      	; 0x24a <__divdi3+0x1b8>
     248:	20 e0       	ldi	r18, 0x00	; 0
     24a:	3e 2d       	mov	r19, r14
     24c:	39 1b       	sub	r19, r25
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	e3 16       	cp	r14, r19
     252:	08 f0       	brcs	.+2      	; 0x256 <__divdi3+0x1c4>
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	28 2b       	or	r18, r24
     258:	f1 94       	neg	r15
     25a:	91 e0       	ldi	r25, 0x01	; 1
     25c:	1f 14       	cp	r1, r15
     25e:	08 f0       	brcs	.+2      	; 0x262 <__divdi3+0x1d0>
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	7f 2d       	mov	r23, r15
     264:	72 1b       	sub	r23, r18
     266:	27 2f       	mov	r18, r23
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	f7 16       	cp	r15, r23
     26c:	08 f0       	brcs	.+2      	; 0x270 <__divdi3+0x1de>
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	98 2b       	or	r25, r24
     272:	01 95       	neg	r16
     274:	11 e0       	ldi	r17, 0x01	; 1
     276:	10 16       	cp	r1, r16
     278:	08 f0       	brcs	.+2      	; 0x27c <__divdi3+0x1ea>
     27a:	10 e0       	ldi	r17, 0x00	; 0
     27c:	80 2f       	mov	r24, r16
     27e:	89 1b       	sub	r24, r25
     280:	98 2f       	mov	r25, r24
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	09 17       	cp	r16, r25
     286:	08 f0       	brcs	.+2      	; 0x28a <__divdi3+0x1f8>
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	18 2b       	or	r17, r24
     28c:	87 2d       	mov	r24, r7
     28e:	81 95       	neg	r24
     290:	81 1b       	sub	r24, r17
     292:	a9 86       	std	Y+9, r10	; 0x09
     294:	6a 87       	std	Y+10, r22	; 0x0a
     296:	5b 87       	std	Y+11, r21	; 0x0b
     298:	4c 87       	std	Y+12, r20	; 0x0c
     29a:	3d 87       	std	Y+13, r19	; 0x0d
     29c:	2e 87       	std	Y+14, r18	; 0x0e
     29e:	9f 87       	std	Y+15, r25	; 0x0f
     2a0:	88 8b       	std	Y+16, r24	; 0x10
     2a2:	99 81       	ldd	r25, Y+1	; 0x01
     2a4:	2a 81       	ldd	r18, Y+2	; 0x02
     2a6:	3b 81       	ldd	r19, Y+3	; 0x03
     2a8:	4c 81       	ldd	r20, Y+4	; 0x04
     2aa:	5d 81       	ldd	r21, Y+5	; 0x05
     2ac:	6e 81       	ldd	r22, Y+6	; 0x06
     2ae:	7f 81       	ldd	r23, Y+7	; 0x07
     2b0:	a8 85       	ldd	r26, Y+8	; 0x08
     2b2:	b9 85       	ldd	r27, Y+9	; 0x09
     2b4:	1a 85       	ldd	r17, Y+10	; 0x0a
     2b6:	0b 85       	ldd	r16, Y+11	; 0x0b
     2b8:	fc 84       	ldd	r15, Y+12	; 0x0c
     2ba:	ed 84       	ldd	r14, Y+13	; 0x0d
     2bc:	de 84       	ldd	r13, Y+14	; 0x0e
     2be:	cf 84       	ldd	r12, Y+15	; 0x0f
     2c0:	b8 88       	ldd	r11, Y+16	; 0x10
     2c2:	88 e0       	ldi	r24, 0x08	; 8
     2c4:	e1 e1       	ldi	r30, 0x11	; 17
     2c6:	8e 2e       	mov	r8, r30
     2c8:	91 2c       	mov	r9, r1
     2ca:	8c 0e       	add	r8, r28
     2cc:	9d 1e       	adc	r9, r29
     2ce:	f4 01       	movw	r30, r8
     2d0:	68 2e       	mov	r6, r24
     2d2:	11 92       	st	Z+, r1
     2d4:	6a 94       	dec	r6
     2d6:	e9 f7       	brne	.-6      	; 0x2d2 <__divdi3+0x240>
     2d8:	99 8b       	std	Y+17, r25	; 0x11
     2da:	2a 8b       	std	Y+18, r18	; 0x12
     2dc:	3b 8b       	std	Y+19, r19	; 0x13
     2de:	4c 8b       	std	Y+20, r20	; 0x14
     2e0:	5d 8b       	std	Y+21, r21	; 0x15
     2e2:	6e 8b       	std	Y+22, r22	; 0x16
     2e4:	7f 8b       	std	Y+23, r23	; 0x17
     2e6:	a8 8f       	std	Y+24, r26	; 0x18
     2e8:	9e 01       	movw	r18, r28
     2ea:	27 5e       	subi	r18, 0xE7	; 231
     2ec:	3f 4f       	sbci	r19, 0xFF	; 255
     2ee:	f9 01       	movw	r30, r18
     2f0:	11 92       	st	Z+, r1
     2f2:	8a 95       	dec	r24
     2f4:	e9 f7       	brne	.-6      	; 0x2f0 <__divdi3+0x25e>
     2f6:	b9 8f       	std	Y+25, r27	; 0x19
     2f8:	1a 8f       	std	Y+26, r17	; 0x1a
     2fa:	0b 8f       	std	Y+27, r16	; 0x1b
     2fc:	fc 8e       	std	Y+28, r15	; 0x1c
     2fe:	ed 8e       	std	Y+29, r14	; 0x1d
     300:	de 8e       	std	Y+30, r13	; 0x1e
     302:	cf 8e       	std	Y+31, r12	; 0x1f
     304:	b8 a2       	std	Y+32, r11	; 0x20
     306:	29 8c       	ldd	r2, Y+25	; 0x19
     308:	3a 8c       	ldd	r3, Y+26	; 0x1a
     30a:	4b 8c       	ldd	r4, Y+27	; 0x1b
     30c:	5c 8c       	ldd	r5, Y+28	; 0x1c
     30e:	ed 8c       	ldd	r14, Y+29	; 0x1d
     310:	fe 8c       	ldd	r15, Y+30	; 0x1e
     312:	0f 8d       	ldd	r16, Y+31	; 0x1f
     314:	18 a1       	ldd	r17, Y+32	; 0x20
     316:	69 88       	ldd	r6, Y+17	; 0x11
     318:	7a 88       	ldd	r7, Y+18	; 0x12
     31a:	8b 88       	ldd	r8, Y+19	; 0x13
     31c:	9c 88       	ldd	r9, Y+20	; 0x14
     31e:	21 96       	adiw	r28, 0x01	; 1
     320:	6c ae       	std	Y+60, r6	; 0x3c
     322:	7d ae       	std	Y+61, r7	; 0x3d
     324:	8e ae       	std	Y+62, r8	; 0x3e
     326:	9f ae       	std	Y+63, r9	; 0x3f
     328:	21 97       	sbiw	r28, 0x01	; 1
     32a:	6d 88       	ldd	r6, Y+21	; 0x15
     32c:	7e 88       	ldd	r7, Y+22	; 0x16
     32e:	8f 88       	ldd	r8, Y+23	; 0x17
     330:	98 8c       	ldd	r9, Y+24	; 0x18
     332:	e1 14       	cp	r14, r1
     334:	f1 04       	cpc	r15, r1
     336:	01 05       	cpc	r16, r1
     338:	11 05       	cpc	r17, r1
     33a:	09 f0       	breq	.+2      	; 0x33e <__divdi3+0x2ac>
     33c:	d9 c3       	rjmp	.+1970   	; 0xaf0 <__stack+0x291>
     33e:	62 14       	cp	r6, r2
     340:	73 04       	cpc	r7, r3
     342:	84 04       	cpc	r8, r4
     344:	95 04       	cpc	r9, r5
     346:	08 f0       	brcs	.+2      	; 0x34a <__divdi3+0x2b8>
     348:	57 c1       	rjmp	.+686    	; 0x5f8 <__divdi3+0x566>
     34a:	00 e0       	ldi	r16, 0x00	; 0
     34c:	20 16       	cp	r2, r16
     34e:	00 e0       	ldi	r16, 0x00	; 0
     350:	30 06       	cpc	r3, r16
     352:	01 e0       	ldi	r16, 0x01	; 1
     354:	40 06       	cpc	r4, r16
     356:	00 e0       	ldi	r16, 0x00	; 0
     358:	50 06       	cpc	r5, r16
     35a:	88 f4       	brcc	.+34     	; 0x37e <__divdi3+0x2ec>
     35c:	1f ef       	ldi	r17, 0xFF	; 255
     35e:	21 16       	cp	r2, r17
     360:	31 04       	cpc	r3, r1
     362:	41 04       	cpc	r4, r1
     364:	51 04       	cpc	r5, r1
     366:	39 f0       	breq	.+14     	; 0x376 <__divdi3+0x2e4>
     368:	30 f0       	brcs	.+12     	; 0x376 <__divdi3+0x2e4>
     36a:	48 e0       	ldi	r20, 0x08	; 8
     36c:	e4 2e       	mov	r14, r20
     36e:	f1 2c       	mov	r15, r1
     370:	01 2d       	mov	r16, r1
     372:	11 2d       	mov	r17, r1
     374:	18 c0       	rjmp	.+48     	; 0x3a6 <__divdi3+0x314>
     376:	ee 24       	eor	r14, r14
     378:	ff 24       	eor	r15, r15
     37a:	87 01       	movw	r16, r14
     37c:	14 c0       	rjmp	.+40     	; 0x3a6 <__divdi3+0x314>
     37e:	20 e0       	ldi	r18, 0x00	; 0
     380:	22 16       	cp	r2, r18
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	32 06       	cpc	r3, r18
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	42 06       	cpc	r4, r18
     38a:	21 e0       	ldi	r18, 0x01	; 1
     38c:	52 06       	cpc	r5, r18
     38e:	30 f0       	brcs	.+12     	; 0x39c <__divdi3+0x30a>
     390:	38 e1       	ldi	r19, 0x18	; 24
     392:	e3 2e       	mov	r14, r19
     394:	f1 2c       	mov	r15, r1
     396:	01 2d       	mov	r16, r1
     398:	11 2d       	mov	r17, r1
     39a:	05 c0       	rjmp	.+10     	; 0x3a6 <__divdi3+0x314>
     39c:	20 e1       	ldi	r18, 0x10	; 16
     39e:	e2 2e       	mov	r14, r18
     3a0:	f1 2c       	mov	r15, r1
     3a2:	01 2d       	mov	r16, r1
     3a4:	11 2d       	mov	r17, r1
     3a6:	d2 01       	movw	r26, r4
     3a8:	c1 01       	movw	r24, r2
     3aa:	0e 2c       	mov	r0, r14
     3ac:	04 c0       	rjmp	.+8      	; 0x3b6 <__divdi3+0x324>
     3ae:	b6 95       	lsr	r27
     3b0:	a7 95       	ror	r26
     3b2:	97 95       	ror	r25
     3b4:	87 95       	ror	r24
     3b6:	0a 94       	dec	r0
     3b8:	d2 f7       	brpl	.-12     	; 0x3ae <__divdi3+0x31c>
     3ba:	88 59       	subi	r24, 0x98	; 152
     3bc:	9e 4f       	sbci	r25, 0xFE	; 254
     3be:	dc 01       	movw	r26, r24
     3c0:	2c 91       	ld	r18, X
     3c2:	80 e2       	ldi	r24, 0x20	; 32
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	a0 e0       	ldi	r26, 0x00	; 0
     3c8:	b0 e0       	ldi	r27, 0x00	; 0
     3ca:	8e 19       	sub	r24, r14
     3cc:	9f 09       	sbc	r25, r15
     3ce:	a0 0b       	sbc	r26, r16
     3d0:	b1 0b       	sbc	r27, r17
     3d2:	7c 01       	movw	r14, r24
     3d4:	8d 01       	movw	r16, r26
     3d6:	e2 1a       	sub	r14, r18
     3d8:	f1 08       	sbc	r15, r1
     3da:	01 09       	sbc	r16, r1
     3dc:	11 09       	sbc	r17, r1
     3de:	e1 14       	cp	r14, r1
     3e0:	f1 04       	cpc	r15, r1
     3e2:	01 05       	cpc	r16, r1
     3e4:	11 05       	cpc	r17, r1
     3e6:	d1 f1       	breq	.+116    	; 0x45c <__divdi3+0x3ca>
     3e8:	0e 2c       	mov	r0, r14
     3ea:	04 c0       	rjmp	.+8      	; 0x3f4 <__divdi3+0x362>
     3ec:	22 0c       	add	r2, r2
     3ee:	33 1c       	adc	r3, r3
     3f0:	44 1c       	adc	r4, r4
     3f2:	55 1c       	adc	r5, r5
     3f4:	0a 94       	dec	r0
     3f6:	d2 f7       	brpl	.-12     	; 0x3ec <__divdi3+0x35a>
     3f8:	a4 01       	movw	r20, r8
     3fa:	93 01       	movw	r18, r6
     3fc:	0e 2c       	mov	r0, r14
     3fe:	04 c0       	rjmp	.+8      	; 0x408 <__divdi3+0x376>
     400:	22 0f       	add	r18, r18
     402:	33 1f       	adc	r19, r19
     404:	44 1f       	adc	r20, r20
     406:	55 1f       	adc	r21, r21
     408:	0a 94       	dec	r0
     40a:	d2 f7       	brpl	.-12     	; 0x400 <__divdi3+0x36e>
     40c:	80 e2       	ldi	r24, 0x20	; 32
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	8e 19       	sub	r24, r14
     412:	9f 09       	sbc	r25, r15
     414:	21 96       	adiw	r28, 0x01	; 1
     416:	6c ac       	ldd	r6, Y+60	; 0x3c
     418:	7d ac       	ldd	r7, Y+61	; 0x3d
     41a:	8e ac       	ldd	r8, Y+62	; 0x3e
     41c:	9f ac       	ldd	r9, Y+63	; 0x3f
     41e:	21 97       	sbiw	r28, 0x01	; 1
     420:	04 c0       	rjmp	.+8      	; 0x42a <__divdi3+0x398>
     422:	96 94       	lsr	r9
     424:	87 94       	ror	r8
     426:	77 94       	ror	r7
     428:	67 94       	ror	r6
     42a:	8a 95       	dec	r24
     42c:	d2 f7       	brpl	.-12     	; 0x422 <__divdi3+0x390>
     42e:	62 2a       	or	r6, r18
     430:	73 2a       	or	r7, r19
     432:	84 2a       	or	r8, r20
     434:	95 2a       	or	r9, r21
     436:	21 96       	adiw	r28, 0x01	; 1
     438:	ac ac       	ldd	r10, Y+60	; 0x3c
     43a:	bd ac       	ldd	r11, Y+61	; 0x3d
     43c:	ce ac       	ldd	r12, Y+62	; 0x3e
     43e:	df ac       	ldd	r13, Y+63	; 0x3f
     440:	21 97       	sbiw	r28, 0x01	; 1
     442:	04 c0       	rjmp	.+8      	; 0x44c <__divdi3+0x3ba>
     444:	aa 0c       	add	r10, r10
     446:	bb 1c       	adc	r11, r11
     448:	cc 1c       	adc	r12, r12
     44a:	dd 1c       	adc	r13, r13
     44c:	ea 94       	dec	r14
     44e:	d2 f7       	brpl	.-12     	; 0x444 <__divdi3+0x3b2>
     450:	21 96       	adiw	r28, 0x01	; 1
     452:	ac ae       	std	Y+60, r10	; 0x3c
     454:	bd ae       	std	Y+61, r11	; 0x3d
     456:	ce ae       	std	Y+62, r12	; 0x3e
     458:	df ae       	std	Y+63, r13	; 0x3f
     45a:	21 97       	sbiw	r28, 0x01	; 1
     45c:	62 01       	movw	r12, r4
     45e:	ee 24       	eor	r14, r14
     460:	ff 24       	eor	r15, r15
     462:	29 96       	adiw	r28, 0x09	; 9
     464:	cc ae       	std	Y+60, r12	; 0x3c
     466:	dd ae       	std	Y+61, r13	; 0x3d
     468:	ee ae       	std	Y+62, r14	; 0x3e
     46a:	ff ae       	std	Y+63, r15	; 0x3f
     46c:	29 97       	sbiw	r28, 0x09	; 9
     46e:	92 01       	movw	r18, r4
     470:	81 01       	movw	r16, r2
     472:	20 70       	andi	r18, 0x00	; 0
     474:	30 70       	andi	r19, 0x00	; 0
     476:	2d 96       	adiw	r28, 0x0d	; 13
     478:	0c af       	std	Y+60, r16	; 0x3c
     47a:	1d af       	std	Y+61, r17	; 0x3d
     47c:	2e af       	std	Y+62, r18	; 0x3e
     47e:	3f af       	std	Y+63, r19	; 0x3f
     480:	2d 97       	sbiw	r28, 0x0d	; 13
     482:	c4 01       	movw	r24, r8
     484:	b3 01       	movw	r22, r6
     486:	a7 01       	movw	r20, r14
     488:	96 01       	movw	r18, r12
     48a:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
     48e:	7b 01       	movw	r14, r22
     490:	8c 01       	movw	r16, r24
     492:	c4 01       	movw	r24, r8
     494:	b3 01       	movw	r22, r6
     496:	29 96       	adiw	r28, 0x09	; 9
     498:	2c ad       	ldd	r18, Y+60	; 0x3c
     49a:	3d ad       	ldd	r19, Y+61	; 0x3d
     49c:	4e ad       	ldd	r20, Y+62	; 0x3e
     49e:	5f ad       	ldd	r21, Y+63	; 0x3f
     4a0:	29 97       	sbiw	r28, 0x09	; 9
     4a2:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
     4a6:	c9 01       	movw	r24, r18
     4a8:	da 01       	movw	r26, r20
     4aa:	3c 01       	movw	r6, r24
     4ac:	4d 01       	movw	r8, r26
     4ae:	c4 01       	movw	r24, r8
     4b0:	b3 01       	movw	r22, r6
     4b2:	2d 96       	adiw	r28, 0x0d	; 13
     4b4:	2c ad       	ldd	r18, Y+60	; 0x3c
     4b6:	3d ad       	ldd	r19, Y+61	; 0x3d
     4b8:	4e ad       	ldd	r20, Y+62	; 0x3e
     4ba:	5f ad       	ldd	r21, Y+63	; 0x3f
     4bc:	2d 97       	sbiw	r28, 0x0d	; 13
     4be:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsi3>
     4c2:	9b 01       	movw	r18, r22
     4c4:	ac 01       	movw	r20, r24
     4c6:	87 01       	movw	r16, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	ee 24       	eor	r14, r14
     4cc:	21 96       	adiw	r28, 0x01	; 1
     4ce:	ac ac       	ldd	r10, Y+60	; 0x3c
     4d0:	bd ac       	ldd	r11, Y+61	; 0x3d
     4d2:	ce ac       	ldd	r12, Y+62	; 0x3e
     4d4:	df ac       	ldd	r13, Y+63	; 0x3f
     4d6:	21 97       	sbiw	r28, 0x01	; 1
     4d8:	c6 01       	movw	r24, r12
     4da:	aa 27       	eor	r26, r26
     4dc:	bb 27       	eor	r27, r27
     4de:	57 01       	movw	r10, r14
     4e0:	68 01       	movw	r12, r16
     4e2:	a8 2a       	or	r10, r24
     4e4:	b9 2a       	or	r11, r25
     4e6:	ca 2a       	or	r12, r26
     4e8:	db 2a       	or	r13, r27
     4ea:	a2 16       	cp	r10, r18
     4ec:	b3 06       	cpc	r11, r19
     4ee:	c4 06       	cpc	r12, r20
     4f0:	d5 06       	cpc	r13, r21
     4f2:	e0 f4       	brcc	.+56     	; 0x52c <__divdi3+0x49a>
     4f4:	08 94       	sec
     4f6:	61 08       	sbc	r6, r1
     4f8:	71 08       	sbc	r7, r1
     4fa:	81 08       	sbc	r8, r1
     4fc:	91 08       	sbc	r9, r1
     4fe:	a2 0c       	add	r10, r2
     500:	b3 1c       	adc	r11, r3
     502:	c4 1c       	adc	r12, r4
     504:	d5 1c       	adc	r13, r5
     506:	a2 14       	cp	r10, r2
     508:	b3 04       	cpc	r11, r3
     50a:	c4 04       	cpc	r12, r4
     50c:	d5 04       	cpc	r13, r5
     50e:	70 f0       	brcs	.+28     	; 0x52c <__divdi3+0x49a>
     510:	a2 16       	cp	r10, r18
     512:	b3 06       	cpc	r11, r19
     514:	c4 06       	cpc	r12, r20
     516:	d5 06       	cpc	r13, r21
     518:	48 f4       	brcc	.+18     	; 0x52c <__divdi3+0x49a>
     51a:	08 94       	sec
     51c:	61 08       	sbc	r6, r1
     51e:	71 08       	sbc	r7, r1
     520:	81 08       	sbc	r8, r1
     522:	91 08       	sbc	r9, r1
     524:	a2 0c       	add	r10, r2
     526:	b3 1c       	adc	r11, r3
     528:	c4 1c       	adc	r12, r4
     52a:	d5 1c       	adc	r13, r5
     52c:	a2 1a       	sub	r10, r18
     52e:	b3 0a       	sbc	r11, r19
     530:	c4 0a       	sbc	r12, r20
     532:	d5 0a       	sbc	r13, r21
     534:	c6 01       	movw	r24, r12
     536:	b5 01       	movw	r22, r10
     538:	29 96       	adiw	r28, 0x09	; 9
     53a:	2c ad       	ldd	r18, Y+60	; 0x3c
     53c:	3d ad       	ldd	r19, Y+61	; 0x3d
     53e:	4e ad       	ldd	r20, Y+62	; 0x3e
     540:	5f ad       	ldd	r21, Y+63	; 0x3f
     542:	29 97       	sbiw	r28, 0x09	; 9
     544:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
     548:	7b 01       	movw	r14, r22
     54a:	8c 01       	movw	r16, r24
     54c:	c6 01       	movw	r24, r12
     54e:	b5 01       	movw	r22, r10
     550:	29 96       	adiw	r28, 0x09	; 9
     552:	2c ad       	ldd	r18, Y+60	; 0x3c
     554:	3d ad       	ldd	r19, Y+61	; 0x3d
     556:	4e ad       	ldd	r20, Y+62	; 0x3e
     558:	5f ad       	ldd	r21, Y+63	; 0x3f
     55a:	29 97       	sbiw	r28, 0x09	; 9
     55c:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
     560:	c9 01       	movw	r24, r18
     562:	da 01       	movw	r26, r20
     564:	5c 01       	movw	r10, r24
     566:	6d 01       	movw	r12, r26
     568:	c6 01       	movw	r24, r12
     56a:	b5 01       	movw	r22, r10
     56c:	2d 96       	adiw	r28, 0x0d	; 13
     56e:	2c ad       	ldd	r18, Y+60	; 0x3c
     570:	3d ad       	ldd	r19, Y+61	; 0x3d
     572:	4e ad       	ldd	r20, Y+62	; 0x3e
     574:	5f ad       	ldd	r21, Y+63	; 0x3f
     576:	2d 97       	sbiw	r28, 0x0d	; 13
     578:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsi3>
     57c:	9b 01       	movw	r18, r22
     57e:	ac 01       	movw	r20, r24
     580:	87 01       	movw	r16, r14
     582:	ff 24       	eor	r15, r15
     584:	ee 24       	eor	r14, r14
     586:	21 96       	adiw	r28, 0x01	; 1
     588:	8c ad       	ldd	r24, Y+60	; 0x3c
     58a:	9d ad       	ldd	r25, Y+61	; 0x3d
     58c:	ae ad       	ldd	r26, Y+62	; 0x3e
     58e:	bf ad       	ldd	r27, Y+63	; 0x3f
     590:	21 97       	sbiw	r28, 0x01	; 1
     592:	a0 70       	andi	r26, 0x00	; 0
     594:	b0 70       	andi	r27, 0x00	; 0
     596:	e8 2a       	or	r14, r24
     598:	f9 2a       	or	r15, r25
     59a:	0a 2b       	or	r16, r26
     59c:	1b 2b       	or	r17, r27
     59e:	e2 16       	cp	r14, r18
     5a0:	f3 06       	cpc	r15, r19
     5a2:	04 07       	cpc	r16, r20
     5a4:	15 07       	cpc	r17, r21
     5a6:	c0 f4       	brcc	.+48     	; 0x5d8 <__divdi3+0x546>
     5a8:	08 94       	sec
     5aa:	a1 08       	sbc	r10, r1
     5ac:	b1 08       	sbc	r11, r1
     5ae:	c1 08       	sbc	r12, r1
     5b0:	d1 08       	sbc	r13, r1
     5b2:	e2 0c       	add	r14, r2
     5b4:	f3 1c       	adc	r15, r3
     5b6:	04 1d       	adc	r16, r4
     5b8:	15 1d       	adc	r17, r5
     5ba:	e2 14       	cp	r14, r2
     5bc:	f3 04       	cpc	r15, r3
     5be:	04 05       	cpc	r16, r4
     5c0:	15 05       	cpc	r17, r5
     5c2:	50 f0       	brcs	.+20     	; 0x5d8 <__divdi3+0x546>
     5c4:	e2 16       	cp	r14, r18
     5c6:	f3 06       	cpc	r15, r19
     5c8:	04 07       	cpc	r16, r20
     5ca:	15 07       	cpc	r17, r21
     5cc:	28 f4       	brcc	.+10     	; 0x5d8 <__divdi3+0x546>
     5ce:	08 94       	sec
     5d0:	a1 08       	sbc	r10, r1
     5d2:	b1 08       	sbc	r11, r1
     5d4:	c1 08       	sbc	r12, r1
     5d6:	d1 08       	sbc	r13, r1
     5d8:	d3 01       	movw	r26, r6
     5da:	99 27       	eor	r25, r25
     5dc:	88 27       	eor	r24, r24
     5de:	86 01       	movw	r16, r12
     5e0:	75 01       	movw	r14, r10
     5e2:	e8 2a       	or	r14, r24
     5e4:	f9 2a       	or	r15, r25
     5e6:	0a 2b       	or	r16, r26
     5e8:	1b 2b       	or	r17, r27
     5ea:	25 96       	adiw	r28, 0x05	; 5
     5ec:	ec ae       	std	Y+60, r14	; 0x3c
     5ee:	fd ae       	std	Y+61, r15	; 0x3d
     5f0:	0e af       	std	Y+62, r16	; 0x3e
     5f2:	1f af       	std	Y+63, r17	; 0x3f
     5f4:	25 97       	sbiw	r28, 0x05	; 5
     5f6:	eb c4       	rjmp	.+2518   	; 0xfce <__stack+0x76f>
     5f8:	21 14       	cp	r2, r1
     5fa:	31 04       	cpc	r3, r1
     5fc:	41 04       	cpc	r4, r1
     5fe:	51 04       	cpc	r5, r1
     600:	71 f4       	brne	.+28     	; 0x61e <__divdi3+0x58c>
     602:	61 e0       	ldi	r22, 0x01	; 1
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	40 e0       	ldi	r20, 0x00	; 0
     610:	50 e0       	ldi	r21, 0x00	; 0
     612:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
     616:	c9 01       	movw	r24, r18
     618:	da 01       	movw	r26, r20
     61a:	1c 01       	movw	r2, r24
     61c:	2d 01       	movw	r4, r26
     61e:	00 e0       	ldi	r16, 0x00	; 0
     620:	20 16       	cp	r2, r16
     622:	00 e0       	ldi	r16, 0x00	; 0
     624:	30 06       	cpc	r3, r16
     626:	01 e0       	ldi	r16, 0x01	; 1
     628:	40 06       	cpc	r4, r16
     62a:	00 e0       	ldi	r16, 0x00	; 0
     62c:	50 06       	cpc	r5, r16
     62e:	88 f4       	brcc	.+34     	; 0x652 <__divdi3+0x5c0>
     630:	1f ef       	ldi	r17, 0xFF	; 255
     632:	21 16       	cp	r2, r17
     634:	31 04       	cpc	r3, r1
     636:	41 04       	cpc	r4, r1
     638:	51 04       	cpc	r5, r1
     63a:	31 f0       	breq	.+12     	; 0x648 <__divdi3+0x5b6>
     63c:	28 f0       	brcs	.+10     	; 0x648 <__divdi3+0x5b6>
     63e:	48 e0       	ldi	r20, 0x08	; 8
     640:	50 e0       	ldi	r21, 0x00	; 0
     642:	60 e0       	ldi	r22, 0x00	; 0
     644:	70 e0       	ldi	r23, 0x00	; 0
     646:	17 c0       	rjmp	.+46     	; 0x676 <__divdi3+0x5e4>
     648:	40 e0       	ldi	r20, 0x00	; 0
     64a:	50 e0       	ldi	r21, 0x00	; 0
     64c:	60 e0       	ldi	r22, 0x00	; 0
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	12 c0       	rjmp	.+36     	; 0x676 <__divdi3+0x5e4>
     652:	20 e0       	ldi	r18, 0x00	; 0
     654:	22 16       	cp	r2, r18
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	32 06       	cpc	r3, r18
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	42 06       	cpc	r4, r18
     65e:	21 e0       	ldi	r18, 0x01	; 1
     660:	52 06       	cpc	r5, r18
     662:	28 f0       	brcs	.+10     	; 0x66e <__divdi3+0x5dc>
     664:	48 e1       	ldi	r20, 0x18	; 24
     666:	50 e0       	ldi	r21, 0x00	; 0
     668:	60 e0       	ldi	r22, 0x00	; 0
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	04 c0       	rjmp	.+8      	; 0x676 <__divdi3+0x5e4>
     66e:	40 e1       	ldi	r20, 0x10	; 16
     670:	50 e0       	ldi	r21, 0x00	; 0
     672:	60 e0       	ldi	r22, 0x00	; 0
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	d2 01       	movw	r26, r4
     678:	c1 01       	movw	r24, r2
     67a:	04 2e       	mov	r0, r20
     67c:	04 c0       	rjmp	.+8      	; 0x686 <__divdi3+0x5f4>
     67e:	b6 95       	lsr	r27
     680:	a7 95       	ror	r26
     682:	97 95       	ror	r25
     684:	87 95       	ror	r24
     686:	0a 94       	dec	r0
     688:	d2 f7       	brpl	.-12     	; 0x67e <__divdi3+0x5ec>
     68a:	88 59       	subi	r24, 0x98	; 152
     68c:	9e 4f       	sbci	r25, 0xFE	; 254
     68e:	dc 01       	movw	r26, r24
     690:	2c 91       	ld	r18, X
     692:	e0 e2       	ldi	r30, 0x20	; 32
     694:	ee 2e       	mov	r14, r30
     696:	f1 2c       	mov	r15, r1
     698:	01 2d       	mov	r16, r1
     69a:	11 2d       	mov	r17, r1
     69c:	d8 01       	movw	r26, r16
     69e:	c7 01       	movw	r24, r14
     6a0:	84 1b       	sub	r24, r20
     6a2:	95 0b       	sbc	r25, r21
     6a4:	a6 0b       	sbc	r26, r22
     6a6:	b7 0b       	sbc	r27, r23
     6a8:	82 1b       	sub	r24, r18
     6aa:	91 09       	sbc	r25, r1
     6ac:	a1 09       	sbc	r26, r1
     6ae:	b1 09       	sbc	r27, r1
     6b0:	00 97       	sbiw	r24, 0x00	; 0
     6b2:	a1 05       	cpc	r26, r1
     6b4:	b1 05       	cpc	r27, r1
     6b6:	61 f4       	brne	.+24     	; 0x6d0 <__divdi3+0x63e>
     6b8:	64 01       	movw	r12, r8
     6ba:	53 01       	movw	r10, r6
     6bc:	a2 18       	sub	r10, r2
     6be:	b3 08       	sbc	r11, r3
     6c0:	c4 08       	sbc	r12, r4
     6c2:	d5 08       	sbc	r13, r5
     6c4:	31 e0       	ldi	r19, 0x01	; 1
     6c6:	63 2e       	mov	r6, r19
     6c8:	71 2c       	mov	r7, r1
     6ca:	81 2c       	mov	r8, r1
     6cc:	91 2c       	mov	r9, r1
     6ce:	24 c1       	rjmp	.+584    	; 0x918 <__stack+0xb9>
     6d0:	e3 96       	adiw	r28, 0x33	; 51
     6d2:	8f af       	std	Y+63, r24	; 0x3f
     6d4:	e3 97       	sbiw	r28, 0x33	; 51
     6d6:	08 2e       	mov	r0, r24
     6d8:	04 c0       	rjmp	.+8      	; 0x6e2 <__divdi3+0x650>
     6da:	22 0c       	add	r2, r2
     6dc:	33 1c       	adc	r3, r3
     6de:	44 1c       	adc	r4, r4
     6e0:	55 1c       	adc	r5, r5
     6e2:	0a 94       	dec	r0
     6e4:	d2 f7       	brpl	.-12     	; 0x6da <__divdi3+0x648>
     6e6:	ee 2d       	mov	r30, r14
     6e8:	e8 1b       	sub	r30, r24
     6ea:	64 01       	movw	r12, r8
     6ec:	53 01       	movw	r10, r6
     6ee:	0e 2e       	mov	r0, r30
     6f0:	04 c0       	rjmp	.+8      	; 0x6fa <__divdi3+0x668>
     6f2:	d6 94       	lsr	r13
     6f4:	c7 94       	ror	r12
     6f6:	b7 94       	ror	r11
     6f8:	a7 94       	ror	r10
     6fa:	0a 94       	dec	r0
     6fc:	d2 f7       	brpl	.-12     	; 0x6f2 <__divdi3+0x660>
     6fe:	a4 01       	movw	r20, r8
     700:	93 01       	movw	r18, r6
     702:	e3 96       	adiw	r28, 0x33	; 51
     704:	0f ac       	ldd	r0, Y+63	; 0x3f
     706:	e3 97       	sbiw	r28, 0x33	; 51
     708:	04 c0       	rjmp	.+8      	; 0x712 <__divdi3+0x680>
     70a:	22 0f       	add	r18, r18
     70c:	33 1f       	adc	r19, r19
     70e:	44 1f       	adc	r20, r20
     710:	55 1f       	adc	r21, r21
     712:	0a 94       	dec	r0
     714:	d2 f7       	brpl	.-12     	; 0x70a <__divdi3+0x678>
     716:	21 96       	adiw	r28, 0x01	; 1
     718:	6c ac       	ldd	r6, Y+60	; 0x3c
     71a:	7d ac       	ldd	r7, Y+61	; 0x3d
     71c:	8e ac       	ldd	r8, Y+62	; 0x3e
     71e:	9f ac       	ldd	r9, Y+63	; 0x3f
     720:	21 97       	sbiw	r28, 0x01	; 1
     722:	0e 2e       	mov	r0, r30
     724:	04 c0       	rjmp	.+8      	; 0x72e <__divdi3+0x69c>
     726:	96 94       	lsr	r9
     728:	87 94       	ror	r8
     72a:	77 94       	ror	r7
     72c:	67 94       	ror	r6
     72e:	0a 94       	dec	r0
     730:	d2 f7       	brpl	.-12     	; 0x726 <__divdi3+0x694>
     732:	84 01       	movw	r16, r8
     734:	73 01       	movw	r14, r6
     736:	e2 2a       	or	r14, r18
     738:	f3 2a       	or	r15, r19
     73a:	04 2b       	or	r16, r20
     73c:	15 2b       	or	r17, r21
     73e:	e9 ae       	std	Y+57, r14	; 0x39
     740:	fa ae       	std	Y+58, r15	; 0x3a
     742:	0b af       	std	Y+59, r16	; 0x3b
     744:	1c af       	std	Y+60, r17	; 0x3c
     746:	32 01       	movw	r6, r4
     748:	88 24       	eor	r8, r8
     74a:	99 24       	eor	r9, r9
     74c:	92 01       	movw	r18, r4
     74e:	81 01       	movw	r16, r2
     750:	20 70       	andi	r18, 0x00	; 0
     752:	30 70       	andi	r19, 0x00	; 0
     754:	61 96       	adiw	r28, 0x11	; 17
     756:	0c af       	std	Y+60, r16	; 0x3c
     758:	1d af       	std	Y+61, r17	; 0x3d
     75a:	2e af       	std	Y+62, r18	; 0x3e
     75c:	3f af       	std	Y+63, r19	; 0x3f
     75e:	61 97       	sbiw	r28, 0x11	; 17
     760:	c6 01       	movw	r24, r12
     762:	b5 01       	movw	r22, r10
     764:	a4 01       	movw	r20, r8
     766:	93 01       	movw	r18, r6
     768:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
     76c:	7b 01       	movw	r14, r22
     76e:	8c 01       	movw	r16, r24
     770:	c6 01       	movw	r24, r12
     772:	b5 01       	movw	r22, r10
     774:	a4 01       	movw	r20, r8
     776:	93 01       	movw	r18, r6
     778:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
     77c:	c9 01       	movw	r24, r18
     77e:	da 01       	movw	r26, r20
     780:	65 96       	adiw	r28, 0x15	; 21
     782:	8c af       	std	Y+60, r24	; 0x3c
     784:	9d af       	std	Y+61, r25	; 0x3d
     786:	ae af       	std	Y+62, r26	; 0x3e
     788:	bf af       	std	Y+63, r27	; 0x3f
     78a:	65 97       	sbiw	r28, 0x15	; 21
     78c:	bc 01       	movw	r22, r24
     78e:	cd 01       	movw	r24, r26
     790:	61 96       	adiw	r28, 0x11	; 17
     792:	2c ad       	ldd	r18, Y+60	; 0x3c
     794:	3d ad       	ldd	r19, Y+61	; 0x3d
     796:	4e ad       	ldd	r20, Y+62	; 0x3e
     798:	5f ad       	ldd	r21, Y+63	; 0x3f
     79a:	61 97       	sbiw	r28, 0x11	; 17
     79c:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsi3>
     7a0:	9b 01       	movw	r18, r22
     7a2:	ac 01       	movw	r20, r24
     7a4:	87 01       	movw	r16, r14
     7a6:	ff 24       	eor	r15, r15
     7a8:	ee 24       	eor	r14, r14
     7aa:	a9 ac       	ldd	r10, Y+57	; 0x39
     7ac:	ba ac       	ldd	r11, Y+58	; 0x3a
     7ae:	cb ac       	ldd	r12, Y+59	; 0x3b
     7b0:	dc ac       	ldd	r13, Y+60	; 0x3c
     7b2:	c6 01       	movw	r24, r12
     7b4:	aa 27       	eor	r26, r26
     7b6:	bb 27       	eor	r27, r27
     7b8:	5c 01       	movw	r10, r24
     7ba:	6d 01       	movw	r12, r26
     7bc:	ae 28       	or	r10, r14
     7be:	bf 28       	or	r11, r15
     7c0:	c0 2a       	or	r12, r16
     7c2:	d1 2a       	or	r13, r17
     7c4:	a2 16       	cp	r10, r18
     7c6:	b3 06       	cpc	r11, r19
     7c8:	c4 06       	cpc	r12, r20
     7ca:	d5 06       	cpc	r13, r21
     7cc:	60 f5       	brcc	.+88     	; 0x826 <__divdi3+0x794>
     7ce:	65 96       	adiw	r28, 0x15	; 21
     7d0:	6c ad       	ldd	r22, Y+60	; 0x3c
     7d2:	7d ad       	ldd	r23, Y+61	; 0x3d
     7d4:	8e ad       	ldd	r24, Y+62	; 0x3e
     7d6:	9f ad       	ldd	r25, Y+63	; 0x3f
     7d8:	65 97       	sbiw	r28, 0x15	; 21
     7da:	61 50       	subi	r22, 0x01	; 1
     7dc:	70 40       	sbci	r23, 0x00	; 0
     7de:	80 40       	sbci	r24, 0x00	; 0
     7e0:	90 40       	sbci	r25, 0x00	; 0
     7e2:	65 96       	adiw	r28, 0x15	; 21
     7e4:	6c af       	std	Y+60, r22	; 0x3c
     7e6:	7d af       	std	Y+61, r23	; 0x3d
     7e8:	8e af       	std	Y+62, r24	; 0x3e
     7ea:	9f af       	std	Y+63, r25	; 0x3f
     7ec:	65 97       	sbiw	r28, 0x15	; 21
     7ee:	a2 0c       	add	r10, r2
     7f0:	b3 1c       	adc	r11, r3
     7f2:	c4 1c       	adc	r12, r4
     7f4:	d5 1c       	adc	r13, r5
     7f6:	a2 14       	cp	r10, r2
     7f8:	b3 04       	cpc	r11, r3
     7fa:	c4 04       	cpc	r12, r4
     7fc:	d5 04       	cpc	r13, r5
     7fe:	98 f0       	brcs	.+38     	; 0x826 <__divdi3+0x794>
     800:	a2 16       	cp	r10, r18
     802:	b3 06       	cpc	r11, r19
     804:	c4 06       	cpc	r12, r20
     806:	d5 06       	cpc	r13, r21
     808:	70 f4       	brcc	.+28     	; 0x826 <__divdi3+0x794>
     80a:	61 50       	subi	r22, 0x01	; 1
     80c:	70 40       	sbci	r23, 0x00	; 0
     80e:	80 40       	sbci	r24, 0x00	; 0
     810:	90 40       	sbci	r25, 0x00	; 0
     812:	65 96       	adiw	r28, 0x15	; 21
     814:	6c af       	std	Y+60, r22	; 0x3c
     816:	7d af       	std	Y+61, r23	; 0x3d
     818:	8e af       	std	Y+62, r24	; 0x3e
     81a:	9f af       	std	Y+63, r25	; 0x3f
     81c:	65 97       	sbiw	r28, 0x15	; 21
     81e:	a2 0c       	add	r10, r2
     820:	b3 1c       	adc	r11, r3
     822:	c4 1c       	adc	r12, r4
     824:	d5 1c       	adc	r13, r5
     826:	a2 1a       	sub	r10, r18
     828:	b3 0a       	sbc	r11, r19
     82a:	c4 0a       	sbc	r12, r20
     82c:	d5 0a       	sbc	r13, r21
     82e:	c6 01       	movw	r24, r12
     830:	b5 01       	movw	r22, r10
     832:	a4 01       	movw	r20, r8
     834:	93 01       	movw	r18, r6
     836:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
     83a:	7b 01       	movw	r14, r22
     83c:	8c 01       	movw	r16, r24
     83e:	c6 01       	movw	r24, r12
     840:	b5 01       	movw	r22, r10
     842:	a4 01       	movw	r20, r8
     844:	93 01       	movw	r18, r6
     846:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
     84a:	c9 01       	movw	r24, r18
     84c:	da 01       	movw	r26, r20
     84e:	3c 01       	movw	r6, r24
     850:	4d 01       	movw	r8, r26
     852:	c4 01       	movw	r24, r8
     854:	b3 01       	movw	r22, r6
     856:	61 96       	adiw	r28, 0x11	; 17
     858:	2c ad       	ldd	r18, Y+60	; 0x3c
     85a:	3d ad       	ldd	r19, Y+61	; 0x3d
     85c:	4e ad       	ldd	r20, Y+62	; 0x3e
     85e:	5f ad       	ldd	r21, Y+63	; 0x3f
     860:	61 97       	sbiw	r28, 0x11	; 17
     862:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsi3>
     866:	9b 01       	movw	r18, r22
     868:	ac 01       	movw	r20, r24
     86a:	87 01       	movw	r16, r14
     86c:	ff 24       	eor	r15, r15
     86e:	ee 24       	eor	r14, r14
     870:	89 ad       	ldd	r24, Y+57	; 0x39
     872:	9a ad       	ldd	r25, Y+58	; 0x3a
     874:	ab ad       	ldd	r26, Y+59	; 0x3b
     876:	bc ad       	ldd	r27, Y+60	; 0x3c
     878:	a0 70       	andi	r26, 0x00	; 0
     87a:	b0 70       	andi	r27, 0x00	; 0
     87c:	57 01       	movw	r10, r14
     87e:	68 01       	movw	r12, r16
     880:	a8 2a       	or	r10, r24
     882:	b9 2a       	or	r11, r25
     884:	ca 2a       	or	r12, r26
     886:	db 2a       	or	r13, r27
     888:	a2 16       	cp	r10, r18
     88a:	b3 06       	cpc	r11, r19
     88c:	c4 06       	cpc	r12, r20
     88e:	d5 06       	cpc	r13, r21
     890:	e0 f4       	brcc	.+56     	; 0x8ca <__stack+0x6b>
     892:	08 94       	sec
     894:	61 08       	sbc	r6, r1
     896:	71 08       	sbc	r7, r1
     898:	81 08       	sbc	r8, r1
     89a:	91 08       	sbc	r9, r1
     89c:	a2 0c       	add	r10, r2
     89e:	b3 1c       	adc	r11, r3
     8a0:	c4 1c       	adc	r12, r4
     8a2:	d5 1c       	adc	r13, r5
     8a4:	a2 14       	cp	r10, r2
     8a6:	b3 04       	cpc	r11, r3
     8a8:	c4 04       	cpc	r12, r4
     8aa:	d5 04       	cpc	r13, r5
     8ac:	70 f0       	brcs	.+28     	; 0x8ca <__stack+0x6b>
     8ae:	a2 16       	cp	r10, r18
     8b0:	b3 06       	cpc	r11, r19
     8b2:	c4 06       	cpc	r12, r20
     8b4:	d5 06       	cpc	r13, r21
     8b6:	48 f4       	brcc	.+18     	; 0x8ca <__stack+0x6b>
     8b8:	08 94       	sec
     8ba:	61 08       	sbc	r6, r1
     8bc:	71 08       	sbc	r7, r1
     8be:	81 08       	sbc	r8, r1
     8c0:	91 08       	sbc	r9, r1
     8c2:	a2 0c       	add	r10, r2
     8c4:	b3 1c       	adc	r11, r3
     8c6:	c4 1c       	adc	r12, r4
     8c8:	d5 1c       	adc	r13, r5
     8ca:	21 96       	adiw	r28, 0x01	; 1
     8cc:	8c ad       	ldd	r24, Y+60	; 0x3c
     8ce:	9d ad       	ldd	r25, Y+61	; 0x3d
     8d0:	ae ad       	ldd	r26, Y+62	; 0x3e
     8d2:	bf ad       	ldd	r27, Y+63	; 0x3f
     8d4:	21 97       	sbiw	r28, 0x01	; 1
     8d6:	e3 96       	adiw	r28, 0x33	; 51
     8d8:	0f ac       	ldd	r0, Y+63	; 0x3f
     8da:	e3 97       	sbiw	r28, 0x33	; 51
     8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <__stack+0x87>
     8de:	88 0f       	add	r24, r24
     8e0:	99 1f       	adc	r25, r25
     8e2:	aa 1f       	adc	r26, r26
     8e4:	bb 1f       	adc	r27, r27
     8e6:	0a 94       	dec	r0
     8e8:	d2 f7       	brpl	.-12     	; 0x8de <__stack+0x7f>
     8ea:	21 96       	adiw	r28, 0x01	; 1
     8ec:	8c af       	std	Y+60, r24	; 0x3c
     8ee:	9d af       	std	Y+61, r25	; 0x3d
     8f0:	ae af       	std	Y+62, r26	; 0x3e
     8f2:	bf af       	std	Y+63, r27	; 0x3f
     8f4:	21 97       	sbiw	r28, 0x01	; 1
     8f6:	a2 1a       	sub	r10, r18
     8f8:	b3 0a       	sbc	r11, r19
     8fa:	c4 0a       	sbc	r12, r20
     8fc:	d5 0a       	sbc	r13, r21
     8fe:	65 96       	adiw	r28, 0x15	; 21
     900:	ec ac       	ldd	r14, Y+60	; 0x3c
     902:	fd ac       	ldd	r15, Y+61	; 0x3d
     904:	0e ad       	ldd	r16, Y+62	; 0x3e
     906:	1f ad       	ldd	r17, Y+63	; 0x3f
     908:	65 97       	sbiw	r28, 0x15	; 21
     90a:	d7 01       	movw	r26, r14
     90c:	99 27       	eor	r25, r25
     90e:	88 27       	eor	r24, r24
     910:	68 2a       	or	r6, r24
     912:	79 2a       	or	r7, r25
     914:	8a 2a       	or	r8, r26
     916:	9b 2a       	or	r9, r27
     918:	82 01       	movw	r16, r4
     91a:	22 27       	eor	r18, r18
     91c:	33 27       	eor	r19, r19
     91e:	69 96       	adiw	r28, 0x19	; 25
     920:	0c af       	std	Y+60, r16	; 0x3c
     922:	1d af       	std	Y+61, r17	; 0x3d
     924:	2e af       	std	Y+62, r18	; 0x3e
     926:	3f af       	std	Y+63, r19	; 0x3f
     928:	69 97       	sbiw	r28, 0x19	; 25
     92a:	a2 01       	movw	r20, r4
     92c:	91 01       	movw	r18, r2
     92e:	40 70       	andi	r20, 0x00	; 0
     930:	50 70       	andi	r21, 0x00	; 0
     932:	6d 96       	adiw	r28, 0x1d	; 29
     934:	2c af       	std	Y+60, r18	; 0x3c
     936:	3d af       	std	Y+61, r19	; 0x3d
     938:	4e af       	std	Y+62, r20	; 0x3e
     93a:	5f af       	std	Y+63, r21	; 0x3f
     93c:	6d 97       	sbiw	r28, 0x1d	; 29
     93e:	c6 01       	movw	r24, r12
     940:	b5 01       	movw	r22, r10
     942:	69 96       	adiw	r28, 0x19	; 25
     944:	2c ad       	ldd	r18, Y+60	; 0x3c
     946:	3d ad       	ldd	r19, Y+61	; 0x3d
     948:	4e ad       	ldd	r20, Y+62	; 0x3e
     94a:	5f ad       	ldd	r21, Y+63	; 0x3f
     94c:	69 97       	sbiw	r28, 0x19	; 25
     94e:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
     952:	7b 01       	movw	r14, r22
     954:	8c 01       	movw	r16, r24
     956:	c6 01       	movw	r24, r12
     958:	b5 01       	movw	r22, r10
     95a:	69 96       	adiw	r28, 0x19	; 25
     95c:	2c ad       	ldd	r18, Y+60	; 0x3c
     95e:	3d ad       	ldd	r19, Y+61	; 0x3d
     960:	4e ad       	ldd	r20, Y+62	; 0x3e
     962:	5f ad       	ldd	r21, Y+63	; 0x3f
     964:	69 97       	sbiw	r28, 0x19	; 25
     966:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
     96a:	c9 01       	movw	r24, r18
     96c:	da 01       	movw	r26, r20
     96e:	a1 96       	adiw	r28, 0x21	; 33
     970:	8c af       	std	Y+60, r24	; 0x3c
     972:	9d af       	std	Y+61, r25	; 0x3d
     974:	ae af       	std	Y+62, r26	; 0x3e
     976:	bf af       	std	Y+63, r27	; 0x3f
     978:	a1 97       	sbiw	r28, 0x21	; 33
     97a:	bc 01       	movw	r22, r24
     97c:	cd 01       	movw	r24, r26
     97e:	6d 96       	adiw	r28, 0x1d	; 29
     980:	2c ad       	ldd	r18, Y+60	; 0x3c
     982:	3d ad       	ldd	r19, Y+61	; 0x3d
     984:	4e ad       	ldd	r20, Y+62	; 0x3e
     986:	5f ad       	ldd	r21, Y+63	; 0x3f
     988:	6d 97       	sbiw	r28, 0x1d	; 29
     98a:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsi3>
     98e:	9b 01       	movw	r18, r22
     990:	ac 01       	movw	r20, r24
     992:	87 01       	movw	r16, r14
     994:	ff 24       	eor	r15, r15
     996:	ee 24       	eor	r14, r14
     998:	21 96       	adiw	r28, 0x01	; 1
     99a:	ac ac       	ldd	r10, Y+60	; 0x3c
     99c:	bd ac       	ldd	r11, Y+61	; 0x3d
     99e:	ce ac       	ldd	r12, Y+62	; 0x3e
     9a0:	df ac       	ldd	r13, Y+63	; 0x3f
     9a2:	21 97       	sbiw	r28, 0x01	; 1
     9a4:	c6 01       	movw	r24, r12
     9a6:	aa 27       	eor	r26, r26
     9a8:	bb 27       	eor	r27, r27
     9aa:	57 01       	movw	r10, r14
     9ac:	68 01       	movw	r12, r16
     9ae:	a8 2a       	or	r10, r24
     9b0:	b9 2a       	or	r11, r25
     9b2:	ca 2a       	or	r12, r26
     9b4:	db 2a       	or	r13, r27
     9b6:	a2 16       	cp	r10, r18
     9b8:	b3 06       	cpc	r11, r19
     9ba:	c4 06       	cpc	r12, r20
     9bc:	d5 06       	cpc	r13, r21
     9be:	60 f5       	brcc	.+88     	; 0xa18 <__stack+0x1b9>
     9c0:	a1 96       	adiw	r28, 0x21	; 33
     9c2:	6c ad       	ldd	r22, Y+60	; 0x3c
     9c4:	7d ad       	ldd	r23, Y+61	; 0x3d
     9c6:	8e ad       	ldd	r24, Y+62	; 0x3e
     9c8:	9f ad       	ldd	r25, Y+63	; 0x3f
     9ca:	a1 97       	sbiw	r28, 0x21	; 33
     9cc:	61 50       	subi	r22, 0x01	; 1
     9ce:	70 40       	sbci	r23, 0x00	; 0
     9d0:	80 40       	sbci	r24, 0x00	; 0
     9d2:	90 40       	sbci	r25, 0x00	; 0
     9d4:	a1 96       	adiw	r28, 0x21	; 33
     9d6:	6c af       	std	Y+60, r22	; 0x3c
     9d8:	7d af       	std	Y+61, r23	; 0x3d
     9da:	8e af       	std	Y+62, r24	; 0x3e
     9dc:	9f af       	std	Y+63, r25	; 0x3f
     9de:	a1 97       	sbiw	r28, 0x21	; 33
     9e0:	a2 0c       	add	r10, r2
     9e2:	b3 1c       	adc	r11, r3
     9e4:	c4 1c       	adc	r12, r4
     9e6:	d5 1c       	adc	r13, r5
     9e8:	a2 14       	cp	r10, r2
     9ea:	b3 04       	cpc	r11, r3
     9ec:	c4 04       	cpc	r12, r4
     9ee:	d5 04       	cpc	r13, r5
     9f0:	98 f0       	brcs	.+38     	; 0xa18 <__stack+0x1b9>
     9f2:	a2 16       	cp	r10, r18
     9f4:	b3 06       	cpc	r11, r19
     9f6:	c4 06       	cpc	r12, r20
     9f8:	d5 06       	cpc	r13, r21
     9fa:	70 f4       	brcc	.+28     	; 0xa18 <__stack+0x1b9>
     9fc:	61 50       	subi	r22, 0x01	; 1
     9fe:	70 40       	sbci	r23, 0x00	; 0
     a00:	80 40       	sbci	r24, 0x00	; 0
     a02:	90 40       	sbci	r25, 0x00	; 0
     a04:	a1 96       	adiw	r28, 0x21	; 33
     a06:	6c af       	std	Y+60, r22	; 0x3c
     a08:	7d af       	std	Y+61, r23	; 0x3d
     a0a:	8e af       	std	Y+62, r24	; 0x3e
     a0c:	9f af       	std	Y+63, r25	; 0x3f
     a0e:	a1 97       	sbiw	r28, 0x21	; 33
     a10:	a2 0c       	add	r10, r2
     a12:	b3 1c       	adc	r11, r3
     a14:	c4 1c       	adc	r12, r4
     a16:	d5 1c       	adc	r13, r5
     a18:	a2 1a       	sub	r10, r18
     a1a:	b3 0a       	sbc	r11, r19
     a1c:	c4 0a       	sbc	r12, r20
     a1e:	d5 0a       	sbc	r13, r21
     a20:	c6 01       	movw	r24, r12
     a22:	b5 01       	movw	r22, r10
     a24:	69 96       	adiw	r28, 0x19	; 25
     a26:	2c ad       	ldd	r18, Y+60	; 0x3c
     a28:	3d ad       	ldd	r19, Y+61	; 0x3d
     a2a:	4e ad       	ldd	r20, Y+62	; 0x3e
     a2c:	5f ad       	ldd	r21, Y+63	; 0x3f
     a2e:	69 97       	sbiw	r28, 0x19	; 25
     a30:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
     a34:	7b 01       	movw	r14, r22
     a36:	8c 01       	movw	r16, r24
     a38:	c6 01       	movw	r24, r12
     a3a:	b5 01       	movw	r22, r10
     a3c:	69 96       	adiw	r28, 0x19	; 25
     a3e:	2c ad       	ldd	r18, Y+60	; 0x3c
     a40:	3d ad       	ldd	r19, Y+61	; 0x3d
     a42:	4e ad       	ldd	r20, Y+62	; 0x3e
     a44:	5f ad       	ldd	r21, Y+63	; 0x3f
     a46:	69 97       	sbiw	r28, 0x19	; 25
     a48:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
     a4c:	c9 01       	movw	r24, r18
     a4e:	da 01       	movw	r26, r20
     a50:	5c 01       	movw	r10, r24
     a52:	6d 01       	movw	r12, r26
     a54:	c6 01       	movw	r24, r12
     a56:	b5 01       	movw	r22, r10
     a58:	6d 96       	adiw	r28, 0x1d	; 29
     a5a:	2c ad       	ldd	r18, Y+60	; 0x3c
     a5c:	3d ad       	ldd	r19, Y+61	; 0x3d
     a5e:	4e ad       	ldd	r20, Y+62	; 0x3e
     a60:	5f ad       	ldd	r21, Y+63	; 0x3f
     a62:	6d 97       	sbiw	r28, 0x1d	; 29
     a64:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsi3>
     a68:	9b 01       	movw	r18, r22
     a6a:	ac 01       	movw	r20, r24
     a6c:	87 01       	movw	r16, r14
     a6e:	ff 24       	eor	r15, r15
     a70:	ee 24       	eor	r14, r14
     a72:	21 96       	adiw	r28, 0x01	; 1
     a74:	8c ad       	ldd	r24, Y+60	; 0x3c
     a76:	9d ad       	ldd	r25, Y+61	; 0x3d
     a78:	ae ad       	ldd	r26, Y+62	; 0x3e
     a7a:	bf ad       	ldd	r27, Y+63	; 0x3f
     a7c:	21 97       	sbiw	r28, 0x01	; 1
     a7e:	a0 70       	andi	r26, 0x00	; 0
     a80:	b0 70       	andi	r27, 0x00	; 0
     a82:	e8 2a       	or	r14, r24
     a84:	f9 2a       	or	r15, r25
     a86:	0a 2b       	or	r16, r26
     a88:	1b 2b       	or	r17, r27
     a8a:	e2 16       	cp	r14, r18
     a8c:	f3 06       	cpc	r15, r19
     a8e:	04 07       	cpc	r16, r20
     a90:	15 07       	cpc	r17, r21
     a92:	c0 f4       	brcc	.+48     	; 0xac4 <__stack+0x265>
     a94:	08 94       	sec
     a96:	a1 08       	sbc	r10, r1
     a98:	b1 08       	sbc	r11, r1
     a9a:	c1 08       	sbc	r12, r1
     a9c:	d1 08       	sbc	r13, r1
     a9e:	e2 0c       	add	r14, r2
     aa0:	f3 1c       	adc	r15, r3
     aa2:	04 1d       	adc	r16, r4
     aa4:	15 1d       	adc	r17, r5
     aa6:	e2 14       	cp	r14, r2
     aa8:	f3 04       	cpc	r15, r3
     aaa:	04 05       	cpc	r16, r4
     aac:	15 05       	cpc	r17, r5
     aae:	50 f0       	brcs	.+20     	; 0xac4 <__stack+0x265>
     ab0:	e2 16       	cp	r14, r18
     ab2:	f3 06       	cpc	r15, r19
     ab4:	04 07       	cpc	r16, r20
     ab6:	15 07       	cpc	r17, r21
     ab8:	28 f4       	brcc	.+10     	; 0xac4 <__stack+0x265>
     aba:	08 94       	sec
     abc:	a1 08       	sbc	r10, r1
     abe:	b1 08       	sbc	r11, r1
     ac0:	c1 08       	sbc	r12, r1
     ac2:	d1 08       	sbc	r13, r1
     ac4:	a1 96       	adiw	r28, 0x21	; 33
     ac6:	ec ac       	ldd	r14, Y+60	; 0x3c
     ac8:	fd ac       	ldd	r15, Y+61	; 0x3d
     aca:	0e ad       	ldd	r16, Y+62	; 0x3e
     acc:	1f ad       	ldd	r17, Y+63	; 0x3f
     ace:	a1 97       	sbiw	r28, 0x21	; 33
     ad0:	d7 01       	movw	r26, r14
     ad2:	99 27       	eor	r25, r25
     ad4:	88 27       	eor	r24, r24
     ad6:	96 01       	movw	r18, r12
     ad8:	85 01       	movw	r16, r10
     ada:	08 2b       	or	r16, r24
     adc:	19 2b       	or	r17, r25
     ade:	2a 2b       	or	r18, r26
     ae0:	3b 2b       	or	r19, r27
     ae2:	25 96       	adiw	r28, 0x05	; 5
     ae4:	0c af       	std	Y+60, r16	; 0x3c
     ae6:	1d af       	std	Y+61, r17	; 0x3d
     ae8:	2e af       	std	Y+62, r18	; 0x3e
     aea:	3f af       	std	Y+63, r19	; 0x3f
     aec:	25 97       	sbiw	r28, 0x05	; 5
     aee:	72 c2       	rjmp	.+1252   	; 0xfd4 <__stack+0x775>
     af0:	6e 14       	cp	r6, r14
     af2:	7f 04       	cpc	r7, r15
     af4:	80 06       	cpc	r8, r16
     af6:	91 06       	cpc	r9, r17
     af8:	08 f4       	brcc	.+2      	; 0xafc <__stack+0x29d>
     afa:	5f c2       	rjmp	.+1214   	; 0xfba <__stack+0x75b>
     afc:	20 e0       	ldi	r18, 0x00	; 0
     afe:	e2 16       	cp	r14, r18
     b00:	20 e0       	ldi	r18, 0x00	; 0
     b02:	f2 06       	cpc	r15, r18
     b04:	21 e0       	ldi	r18, 0x01	; 1
     b06:	02 07       	cpc	r16, r18
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	12 07       	cpc	r17, r18
     b0c:	88 f4       	brcc	.+34     	; 0xb30 <__stack+0x2d1>
     b0e:	3f ef       	ldi	r19, 0xFF	; 255
     b10:	e3 16       	cp	r14, r19
     b12:	f1 04       	cpc	r15, r1
     b14:	01 05       	cpc	r16, r1
     b16:	11 05       	cpc	r17, r1
     b18:	31 f0       	breq	.+12     	; 0xb26 <__stack+0x2c7>
     b1a:	28 f0       	brcs	.+10     	; 0xb26 <__stack+0x2c7>
     b1c:	48 e0       	ldi	r20, 0x08	; 8
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	17 c0       	rjmp	.+46     	; 0xb54 <__stack+0x2f5>
     b26:	40 e0       	ldi	r20, 0x00	; 0
     b28:	50 e0       	ldi	r21, 0x00	; 0
     b2a:	60 e0       	ldi	r22, 0x00	; 0
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	12 c0       	rjmp	.+36     	; 0xb54 <__stack+0x2f5>
     b30:	40 e0       	ldi	r20, 0x00	; 0
     b32:	e4 16       	cp	r14, r20
     b34:	40 e0       	ldi	r20, 0x00	; 0
     b36:	f4 06       	cpc	r15, r20
     b38:	40 e0       	ldi	r20, 0x00	; 0
     b3a:	04 07       	cpc	r16, r20
     b3c:	41 e0       	ldi	r20, 0x01	; 1
     b3e:	14 07       	cpc	r17, r20
     b40:	28 f0       	brcs	.+10     	; 0xb4c <__stack+0x2ed>
     b42:	48 e1       	ldi	r20, 0x18	; 24
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	60 e0       	ldi	r22, 0x00	; 0
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	04 c0       	rjmp	.+8      	; 0xb54 <__stack+0x2f5>
     b4c:	40 e1       	ldi	r20, 0x10	; 16
     b4e:	50 e0       	ldi	r21, 0x00	; 0
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	d8 01       	movw	r26, r16
     b56:	c7 01       	movw	r24, r14
     b58:	04 2e       	mov	r0, r20
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__stack+0x305>
     b5c:	b6 95       	lsr	r27
     b5e:	a7 95       	ror	r26
     b60:	97 95       	ror	r25
     b62:	87 95       	ror	r24
     b64:	0a 94       	dec	r0
     b66:	d2 f7       	brpl	.-12     	; 0xb5c <__stack+0x2fd>
     b68:	88 59       	subi	r24, 0x98	; 152
     b6a:	9e 4f       	sbci	r25, 0xFE	; 254
     b6c:	dc 01       	movw	r26, r24
     b6e:	2c 91       	ld	r18, X
     b70:	30 e2       	ldi	r19, 0x20	; 32
     b72:	a3 2e       	mov	r10, r19
     b74:	b1 2c       	mov	r11, r1
     b76:	c1 2c       	mov	r12, r1
     b78:	d1 2c       	mov	r13, r1
     b7a:	d6 01       	movw	r26, r12
     b7c:	c5 01       	movw	r24, r10
     b7e:	84 1b       	sub	r24, r20
     b80:	95 0b       	sbc	r25, r21
     b82:	a6 0b       	sbc	r26, r22
     b84:	b7 0b       	sbc	r27, r23
     b86:	82 1b       	sub	r24, r18
     b88:	91 09       	sbc	r25, r1
     b8a:	a1 09       	sbc	r26, r1
     b8c:	b1 09       	sbc	r27, r1
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	a1 05       	cpc	r26, r1
     b92:	b1 05       	cpc	r27, r1
     b94:	99 f4       	brne	.+38     	; 0xbbc <__stack+0x35d>
     b96:	e6 14       	cp	r14, r6
     b98:	f7 04       	cpc	r15, r7
     b9a:	08 05       	cpc	r16, r8
     b9c:	19 05       	cpc	r17, r9
     b9e:	08 f4       	brcc	.+2      	; 0xba2 <__stack+0x343>
     ba0:	fe c1       	rjmp	.+1020   	; 0xf9e <__stack+0x73f>
     ba2:	21 96       	adiw	r28, 0x01	; 1
     ba4:	6c ac       	ldd	r6, Y+60	; 0x3c
     ba6:	7d ac       	ldd	r7, Y+61	; 0x3d
     ba8:	8e ac       	ldd	r8, Y+62	; 0x3e
     baa:	9f ac       	ldd	r9, Y+63	; 0x3f
     bac:	21 97       	sbiw	r28, 0x01	; 1
     bae:	62 14       	cp	r6, r2
     bb0:	73 04       	cpc	r7, r3
     bb2:	84 04       	cpc	r8, r4
     bb4:	95 04       	cpc	r9, r5
     bb6:	08 f0       	brcs	.+2      	; 0xbba <__stack+0x35b>
     bb8:	f2 c1       	rjmp	.+996    	; 0xf9e <__stack+0x73f>
     bba:	ff c1       	rjmp	.+1022   	; 0xfba <__stack+0x75b>
     bbc:	e2 96       	adiw	r28, 0x32	; 50
     bbe:	8f af       	std	Y+63, r24	; 0x3f
     bc0:	e2 97       	sbiw	r28, 0x32	; 50
     bc2:	08 2e       	mov	r0, r24
     bc4:	04 c0       	rjmp	.+8      	; 0xbce <__stack+0x36f>
     bc6:	ee 0c       	add	r14, r14
     bc8:	ff 1c       	adc	r15, r15
     bca:	00 1f       	adc	r16, r16
     bcc:	11 1f       	adc	r17, r17
     bce:	0a 94       	dec	r0
     bd0:	d2 f7       	brpl	.-12     	; 0xbc6 <__stack+0x367>
     bd2:	6a 2d       	mov	r22, r10
     bd4:	68 1b       	sub	r22, r24
     bd6:	d2 01       	movw	r26, r4
     bd8:	c1 01       	movw	r24, r2
     bda:	06 2e       	mov	r0, r22
     bdc:	04 c0       	rjmp	.+8      	; 0xbe6 <__stack+0x387>
     bde:	b6 95       	lsr	r27
     be0:	a7 95       	ror	r26
     be2:	97 95       	ror	r25
     be4:	87 95       	ror	r24
     be6:	0a 94       	dec	r0
     be8:	d2 f7       	brpl	.-12     	; 0xbde <__stack+0x37f>
     bea:	5c 01       	movw	r10, r24
     bec:	6d 01       	movw	r12, r26
     bee:	ae 28       	or	r10, r14
     bf0:	bf 28       	or	r11, r15
     bf2:	c0 2a       	or	r12, r16
     bf4:	d1 2a       	or	r13, r17
     bf6:	ad aa       	std	Y+53, r10	; 0x35
     bf8:	be aa       	std	Y+54, r11	; 0x36
     bfa:	cf aa       	std	Y+55, r12	; 0x37
     bfc:	d8 ae       	std	Y+56, r13	; 0x38
     bfe:	72 01       	movw	r14, r4
     c00:	61 01       	movw	r12, r2
     c02:	e2 96       	adiw	r28, 0x32	; 50
     c04:	0f ac       	ldd	r0, Y+63	; 0x3f
     c06:	e2 97       	sbiw	r28, 0x32	; 50
     c08:	04 c0       	rjmp	.+8      	; 0xc12 <__stack+0x3b3>
     c0a:	cc 0c       	add	r12, r12
     c0c:	dd 1c       	adc	r13, r13
     c0e:	ee 1c       	adc	r14, r14
     c10:	ff 1c       	adc	r15, r15
     c12:	0a 94       	dec	r0
     c14:	d2 f7       	brpl	.-12     	; 0xc0a <__stack+0x3ab>
     c16:	c9 aa       	std	Y+49, r12	; 0x31
     c18:	da aa       	std	Y+50, r13	; 0x32
     c1a:	eb aa       	std	Y+51, r14	; 0x33
     c1c:	fc aa       	std	Y+52, r15	; 0x34
     c1e:	64 01       	movw	r12, r8
     c20:	53 01       	movw	r10, r6
     c22:	06 2e       	mov	r0, r22
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__stack+0x3cf>
     c26:	d6 94       	lsr	r13
     c28:	c7 94       	ror	r12
     c2a:	b7 94       	ror	r11
     c2c:	a7 94       	ror	r10
     c2e:	0a 94       	dec	r0
     c30:	d2 f7       	brpl	.-12     	; 0xc26 <__stack+0x3c7>
     c32:	d4 01       	movw	r26, r8
     c34:	c3 01       	movw	r24, r6
     c36:	e2 96       	adiw	r28, 0x32	; 50
     c38:	0f ac       	ldd	r0, Y+63	; 0x3f
     c3a:	e2 97       	sbiw	r28, 0x32	; 50
     c3c:	04 c0       	rjmp	.+8      	; 0xc46 <__stack+0x3e7>
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	aa 1f       	adc	r26, r26
     c44:	bb 1f       	adc	r27, r27
     c46:	0a 94       	dec	r0
     c48:	d2 f7       	brpl	.-12     	; 0xc3e <__stack+0x3df>
     c4a:	21 96       	adiw	r28, 0x01	; 1
     c4c:	ec ac       	ldd	r14, Y+60	; 0x3c
     c4e:	fd ac       	ldd	r15, Y+61	; 0x3d
     c50:	0e ad       	ldd	r16, Y+62	; 0x3e
     c52:	1f ad       	ldd	r17, Y+63	; 0x3f
     c54:	21 97       	sbiw	r28, 0x01	; 1
     c56:	04 c0       	rjmp	.+8      	; 0xc60 <__stack+0x401>
     c58:	16 95       	lsr	r17
     c5a:	07 95       	ror	r16
     c5c:	f7 94       	ror	r15
     c5e:	e7 94       	ror	r14
     c60:	6a 95       	dec	r22
     c62:	d2 f7       	brpl	.-12     	; 0xc58 <__stack+0x3f9>
     c64:	37 01       	movw	r6, r14
     c66:	48 01       	movw	r8, r16
     c68:	68 2a       	or	r6, r24
     c6a:	79 2a       	or	r7, r25
     c6c:	8a 2a       	or	r8, r26
     c6e:	9b 2a       	or	r9, r27
     c70:	6d a6       	std	Y+45, r6	; 0x2d
     c72:	7e a6       	std	Y+46, r7	; 0x2e
     c74:	8f a6       	std	Y+47, r8	; 0x2f
     c76:	98 aa       	std	Y+48, r9	; 0x30
     c78:	ed a8       	ldd	r14, Y+53	; 0x35
     c7a:	fe a8       	ldd	r15, Y+54	; 0x36
     c7c:	0f a9       	ldd	r16, Y+55	; 0x37
     c7e:	18 ad       	ldd	r17, Y+56	; 0x38
     c80:	38 01       	movw	r6, r16
     c82:	88 24       	eor	r8, r8
     c84:	99 24       	eor	r9, r9
     c86:	98 01       	movw	r18, r16
     c88:	87 01       	movw	r16, r14
     c8a:	20 70       	andi	r18, 0x00	; 0
     c8c:	30 70       	andi	r19, 0x00	; 0
     c8e:	a5 96       	adiw	r28, 0x25	; 37
     c90:	0c af       	std	Y+60, r16	; 0x3c
     c92:	1d af       	std	Y+61, r17	; 0x3d
     c94:	2e af       	std	Y+62, r18	; 0x3e
     c96:	3f af       	std	Y+63, r19	; 0x3f
     c98:	a5 97       	sbiw	r28, 0x25	; 37
     c9a:	c6 01       	movw	r24, r12
     c9c:	b5 01       	movw	r22, r10
     c9e:	a4 01       	movw	r20, r8
     ca0:	93 01       	movw	r18, r6
     ca2:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
     ca6:	7b 01       	movw	r14, r22
     ca8:	8c 01       	movw	r16, r24
     caa:	c6 01       	movw	r24, r12
     cac:	b5 01       	movw	r22, r10
     cae:	a4 01       	movw	r20, r8
     cb0:	93 01       	movw	r18, r6
     cb2:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
     cb6:	c9 01       	movw	r24, r18
     cb8:	da 01       	movw	r26, r20
     cba:	1c 01       	movw	r2, r24
     cbc:	2d 01       	movw	r4, r26
     cbe:	c2 01       	movw	r24, r4
     cc0:	b1 01       	movw	r22, r2
     cc2:	a5 96       	adiw	r28, 0x25	; 37
     cc4:	2c ad       	ldd	r18, Y+60	; 0x3c
     cc6:	3d ad       	ldd	r19, Y+61	; 0x3d
     cc8:	4e ad       	ldd	r20, Y+62	; 0x3e
     cca:	5f ad       	ldd	r21, Y+63	; 0x3f
     ccc:	a5 97       	sbiw	r28, 0x25	; 37
     cce:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsi3>
     cd2:	9b 01       	movw	r18, r22
     cd4:	ac 01       	movw	r20, r24
     cd6:	87 01       	movw	r16, r14
     cd8:	ff 24       	eor	r15, r15
     cda:	ee 24       	eor	r14, r14
     cdc:	ad a4       	ldd	r10, Y+45	; 0x2d
     cde:	be a4       	ldd	r11, Y+46	; 0x2e
     ce0:	cf a4       	ldd	r12, Y+47	; 0x2f
     ce2:	d8 a8       	ldd	r13, Y+48	; 0x30
     ce4:	c6 01       	movw	r24, r12
     ce6:	aa 27       	eor	r26, r26
     ce8:	bb 27       	eor	r27, r27
     cea:	57 01       	movw	r10, r14
     cec:	68 01       	movw	r12, r16
     cee:	a8 2a       	or	r10, r24
     cf0:	b9 2a       	or	r11, r25
     cf2:	ca 2a       	or	r12, r26
     cf4:	db 2a       	or	r13, r27
     cf6:	a2 16       	cp	r10, r18
     cf8:	b3 06       	cpc	r11, r19
     cfa:	c4 06       	cpc	r12, r20
     cfc:	d5 06       	cpc	r13, r21
     cfe:	00 f5       	brcc	.+64     	; 0xd40 <__stack+0x4e1>
     d00:	08 94       	sec
     d02:	21 08       	sbc	r2, r1
     d04:	31 08       	sbc	r3, r1
     d06:	41 08       	sbc	r4, r1
     d08:	51 08       	sbc	r5, r1
     d0a:	ed a8       	ldd	r14, Y+53	; 0x35
     d0c:	fe a8       	ldd	r15, Y+54	; 0x36
     d0e:	0f a9       	ldd	r16, Y+55	; 0x37
     d10:	18 ad       	ldd	r17, Y+56	; 0x38
     d12:	ae 0c       	add	r10, r14
     d14:	bf 1c       	adc	r11, r15
     d16:	c0 1e       	adc	r12, r16
     d18:	d1 1e       	adc	r13, r17
     d1a:	ae 14       	cp	r10, r14
     d1c:	bf 04       	cpc	r11, r15
     d1e:	c0 06       	cpc	r12, r16
     d20:	d1 06       	cpc	r13, r17
     d22:	70 f0       	brcs	.+28     	; 0xd40 <__stack+0x4e1>
     d24:	a2 16       	cp	r10, r18
     d26:	b3 06       	cpc	r11, r19
     d28:	c4 06       	cpc	r12, r20
     d2a:	d5 06       	cpc	r13, r21
     d2c:	48 f4       	brcc	.+18     	; 0xd40 <__stack+0x4e1>
     d2e:	08 94       	sec
     d30:	21 08       	sbc	r2, r1
     d32:	31 08       	sbc	r3, r1
     d34:	41 08       	sbc	r4, r1
     d36:	51 08       	sbc	r5, r1
     d38:	ae 0c       	add	r10, r14
     d3a:	bf 1c       	adc	r11, r15
     d3c:	c0 1e       	adc	r12, r16
     d3e:	d1 1e       	adc	r13, r17
     d40:	a2 1a       	sub	r10, r18
     d42:	b3 0a       	sbc	r11, r19
     d44:	c4 0a       	sbc	r12, r20
     d46:	d5 0a       	sbc	r13, r21
     d48:	c6 01       	movw	r24, r12
     d4a:	b5 01       	movw	r22, r10
     d4c:	a4 01       	movw	r20, r8
     d4e:	93 01       	movw	r18, r6
     d50:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
     d54:	7b 01       	movw	r14, r22
     d56:	8c 01       	movw	r16, r24
     d58:	c6 01       	movw	r24, r12
     d5a:	b5 01       	movw	r22, r10
     d5c:	a4 01       	movw	r20, r8
     d5e:	93 01       	movw	r18, r6
     d60:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
     d64:	c9 01       	movw	r24, r18
     d66:	da 01       	movw	r26, r20
     d68:	3c 01       	movw	r6, r24
     d6a:	4d 01       	movw	r8, r26
     d6c:	c4 01       	movw	r24, r8
     d6e:	b3 01       	movw	r22, r6
     d70:	a5 96       	adiw	r28, 0x25	; 37
     d72:	2c ad       	ldd	r18, Y+60	; 0x3c
     d74:	3d ad       	ldd	r19, Y+61	; 0x3d
     d76:	4e ad       	ldd	r20, Y+62	; 0x3e
     d78:	5f ad       	ldd	r21, Y+63	; 0x3f
     d7a:	a5 97       	sbiw	r28, 0x25	; 37
     d7c:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsi3>
     d80:	9b 01       	movw	r18, r22
     d82:	ac 01       	movw	r20, r24
     d84:	87 01       	movw	r16, r14
     d86:	ff 24       	eor	r15, r15
     d88:	ee 24       	eor	r14, r14
     d8a:	8d a5       	ldd	r24, Y+45	; 0x2d
     d8c:	9e a5       	ldd	r25, Y+46	; 0x2e
     d8e:	af a5       	ldd	r26, Y+47	; 0x2f
     d90:	b8 a9       	ldd	r27, Y+48	; 0x30
     d92:	a0 70       	andi	r26, 0x00	; 0
     d94:	b0 70       	andi	r27, 0x00	; 0
     d96:	57 01       	movw	r10, r14
     d98:	68 01       	movw	r12, r16
     d9a:	a8 2a       	or	r10, r24
     d9c:	b9 2a       	or	r11, r25
     d9e:	ca 2a       	or	r12, r26
     da0:	db 2a       	or	r13, r27
     da2:	a2 16       	cp	r10, r18
     da4:	b3 06       	cpc	r11, r19
     da6:	c4 06       	cpc	r12, r20
     da8:	d5 06       	cpc	r13, r21
     daa:	00 f5       	brcc	.+64     	; 0xdec <__stack+0x58d>
     dac:	08 94       	sec
     dae:	61 08       	sbc	r6, r1
     db0:	71 08       	sbc	r7, r1
     db2:	81 08       	sbc	r8, r1
     db4:	91 08       	sbc	r9, r1
     db6:	6d a9       	ldd	r22, Y+53	; 0x35
     db8:	7e a9       	ldd	r23, Y+54	; 0x36
     dba:	8f a9       	ldd	r24, Y+55	; 0x37
     dbc:	98 ad       	ldd	r25, Y+56	; 0x38
     dbe:	a6 0e       	add	r10, r22
     dc0:	b7 1e       	adc	r11, r23
     dc2:	c8 1e       	adc	r12, r24
     dc4:	d9 1e       	adc	r13, r25
     dc6:	a6 16       	cp	r10, r22
     dc8:	b7 06       	cpc	r11, r23
     dca:	c8 06       	cpc	r12, r24
     dcc:	d9 06       	cpc	r13, r25
     dce:	70 f0       	brcs	.+28     	; 0xdec <__stack+0x58d>
     dd0:	a2 16       	cp	r10, r18
     dd2:	b3 06       	cpc	r11, r19
     dd4:	c4 06       	cpc	r12, r20
     dd6:	d5 06       	cpc	r13, r21
     dd8:	48 f4       	brcc	.+18     	; 0xdec <__stack+0x58d>
     dda:	08 94       	sec
     ddc:	61 08       	sbc	r6, r1
     dde:	71 08       	sbc	r7, r1
     de0:	81 08       	sbc	r8, r1
     de2:	91 08       	sbc	r9, r1
     de4:	a6 0e       	add	r10, r22
     de6:	b7 1e       	adc	r11, r23
     de8:	c8 1e       	adc	r12, r24
     dea:	d9 1e       	adc	r13, r25
     dec:	d6 01       	movw	r26, r12
     dee:	c5 01       	movw	r24, r10
     df0:	82 1b       	sub	r24, r18
     df2:	93 0b       	sbc	r25, r19
     df4:	a4 0b       	sbc	r26, r20
     df6:	b5 0b       	sbc	r27, r21
     df8:	89 a7       	std	Y+41, r24	; 0x29
     dfa:	9a a7       	std	Y+42, r25	; 0x2a
     dfc:	ab a7       	std	Y+43, r26	; 0x2b
     dfe:	bc a7       	std	Y+44, r27	; 0x2c
     e00:	d1 01       	movw	r26, r2
     e02:	99 27       	eor	r25, r25
     e04:	88 27       	eor	r24, r24
     e06:	64 01       	movw	r12, r8
     e08:	53 01       	movw	r10, r6
     e0a:	a8 2a       	or	r10, r24
     e0c:	b9 2a       	or	r11, r25
     e0e:	ca 2a       	or	r12, r26
     e10:	db 2a       	or	r13, r27
     e12:	25 96       	adiw	r28, 0x05	; 5
     e14:	ac ae       	std	Y+60, r10	; 0x3c
     e16:	bd ae       	std	Y+61, r11	; 0x3d
     e18:	ce ae       	std	Y+62, r12	; 0x3e
     e1a:	df ae       	std	Y+63, r13	; 0x3f
     e1c:	25 97       	sbiw	r28, 0x05	; 5
     e1e:	86 01       	movw	r16, r12
     e20:	75 01       	movw	r14, r10
     e22:	2f ef       	ldi	r18, 0xFF	; 255
     e24:	3f ef       	ldi	r19, 0xFF	; 255
     e26:	40 e0       	ldi	r20, 0x00	; 0
     e28:	50 e0       	ldi	r21, 0x00	; 0
     e2a:	e2 22       	and	r14, r18
     e2c:	f3 22       	and	r15, r19
     e2e:	04 23       	and	r16, r20
     e30:	15 23       	and	r17, r21
     e32:	a6 01       	movw	r20, r12
     e34:	66 27       	eor	r22, r22
     e36:	77 27       	eor	r23, r23
     e38:	ad 96       	adiw	r28, 0x2d	; 45
     e3a:	4c af       	std	Y+60, r20	; 0x3c
     e3c:	5d af       	std	Y+61, r21	; 0x3d
     e3e:	6e af       	std	Y+62, r22	; 0x3e
     e40:	7f af       	std	Y+63, r23	; 0x3f
     e42:	ad 97       	sbiw	r28, 0x2d	; 45
     e44:	a9 a8       	ldd	r10, Y+49	; 0x31
     e46:	ba a8       	ldd	r11, Y+50	; 0x32
     e48:	cb a8       	ldd	r12, Y+51	; 0x33
     e4a:	dc a8       	ldd	r13, Y+52	; 0x34
     e4c:	6f ef       	ldi	r22, 0xFF	; 255
     e4e:	7f ef       	ldi	r23, 0xFF	; 255
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	a6 22       	and	r10, r22
     e56:	b7 22       	and	r11, r23
     e58:	c8 22       	and	r12, r24
     e5a:	d9 22       	and	r13, r25
     e5c:	89 a9       	ldd	r24, Y+49	; 0x31
     e5e:	9a a9       	ldd	r25, Y+50	; 0x32
     e60:	ab a9       	ldd	r26, Y+51	; 0x33
     e62:	bc a9       	ldd	r27, Y+52	; 0x34
     e64:	1d 01       	movw	r2, r26
     e66:	44 24       	eor	r4, r4
     e68:	55 24       	eor	r5, r5
     e6a:	c8 01       	movw	r24, r16
     e6c:	b7 01       	movw	r22, r14
     e6e:	a6 01       	movw	r20, r12
     e70:	95 01       	movw	r18, r10
     e72:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsi3>
     e76:	a9 96       	adiw	r28, 0x29	; 41
     e78:	6c af       	std	Y+60, r22	; 0x3c
     e7a:	7d af       	std	Y+61, r23	; 0x3d
     e7c:	8e af       	std	Y+62, r24	; 0x3e
     e7e:	9f af       	std	Y+63, r25	; 0x3f
     e80:	a9 97       	sbiw	r28, 0x29	; 41
     e82:	c8 01       	movw	r24, r16
     e84:	b7 01       	movw	r22, r14
     e86:	a2 01       	movw	r20, r4
     e88:	91 01       	movw	r18, r2
     e8a:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsi3>
     e8e:	3b 01       	movw	r6, r22
     e90:	4c 01       	movw	r8, r24
     e92:	ad 96       	adiw	r28, 0x2d	; 45
     e94:	6c ad       	ldd	r22, Y+60	; 0x3c
     e96:	7d ad       	ldd	r23, Y+61	; 0x3d
     e98:	8e ad       	ldd	r24, Y+62	; 0x3e
     e9a:	9f ad       	ldd	r25, Y+63	; 0x3f
     e9c:	ad 97       	sbiw	r28, 0x2d	; 45
     e9e:	a6 01       	movw	r20, r12
     ea0:	95 01       	movw	r18, r10
     ea2:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsi3>
     ea6:	7b 01       	movw	r14, r22
     ea8:	8c 01       	movw	r16, r24
     eaa:	ad 96       	adiw	r28, 0x2d	; 45
     eac:	6c ad       	ldd	r22, Y+60	; 0x3c
     eae:	7d ad       	ldd	r23, Y+61	; 0x3d
     eb0:	8e ad       	ldd	r24, Y+62	; 0x3e
     eb2:	9f ad       	ldd	r25, Y+63	; 0x3f
     eb4:	ad 97       	sbiw	r28, 0x2d	; 45
     eb6:	a2 01       	movw	r20, r4
     eb8:	91 01       	movw	r18, r2
     eba:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsi3>
     ebe:	5b 01       	movw	r10, r22
     ec0:	6c 01       	movw	r12, r24
     ec2:	a8 01       	movw	r20, r16
     ec4:	97 01       	movw	r18, r14
     ec6:	26 0d       	add	r18, r6
     ec8:	37 1d       	adc	r19, r7
     eca:	48 1d       	adc	r20, r8
     ecc:	59 1d       	adc	r21, r9
     ece:	a9 96       	adiw	r28, 0x29	; 41
     ed0:	6c ac       	ldd	r6, Y+60	; 0x3c
     ed2:	7d ac       	ldd	r7, Y+61	; 0x3d
     ed4:	8e ac       	ldd	r8, Y+62	; 0x3e
     ed6:	9f ac       	ldd	r9, Y+63	; 0x3f
     ed8:	a9 97       	sbiw	r28, 0x29	; 41
     eda:	c4 01       	movw	r24, r8
     edc:	aa 27       	eor	r26, r26
     ede:	bb 27       	eor	r27, r27
     ee0:	28 0f       	add	r18, r24
     ee2:	39 1f       	adc	r19, r25
     ee4:	4a 1f       	adc	r20, r26
     ee6:	5b 1f       	adc	r21, r27
     ee8:	2e 15       	cp	r18, r14
     eea:	3f 05       	cpc	r19, r15
     eec:	40 07       	cpc	r20, r16
     eee:	51 07       	cpc	r21, r17
     ef0:	48 f4       	brcc	.+18     	; 0xf04 <__stack+0x6a5>
     ef2:	e1 2c       	mov	r14, r1
     ef4:	f1 2c       	mov	r15, r1
     ef6:	61 e0       	ldi	r22, 0x01	; 1
     ef8:	06 2f       	mov	r16, r22
     efa:	11 2d       	mov	r17, r1
     efc:	ae 0c       	add	r10, r14
     efe:	bf 1c       	adc	r11, r15
     f00:	c0 1e       	adc	r12, r16
     f02:	d1 1e       	adc	r13, r17
     f04:	ca 01       	movw	r24, r20
     f06:	aa 27       	eor	r26, r26
     f08:	bb 27       	eor	r27, r27
     f0a:	bc 01       	movw	r22, r24
     f0c:	cd 01       	movw	r24, r26
     f0e:	6a 0d       	add	r22, r10
     f10:	7b 1d       	adc	r23, r11
     f12:	8c 1d       	adc	r24, r12
     f14:	9d 1d       	adc	r25, r13
     f16:	69 a4       	ldd	r6, Y+41	; 0x29
     f18:	7a a4       	ldd	r7, Y+42	; 0x2a
     f1a:	8b a4       	ldd	r8, Y+43	; 0x2b
     f1c:	9c a4       	ldd	r9, Y+44	; 0x2c
     f1e:	66 16       	cp	r6, r22
     f20:	77 06       	cpc	r7, r23
     f22:	88 06       	cpc	r8, r24
     f24:	99 06       	cpc	r9, r25
     f26:	50 f1       	brcs	.+84     	; 0xf7c <__stack+0x71d>
     f28:	66 15       	cp	r22, r6
     f2a:	77 05       	cpc	r23, r7
     f2c:	88 05       	cpc	r24, r8
     f2e:	99 05       	cpc	r25, r9
     f30:	09 f0       	breq	.+2      	; 0xf34 <__stack+0x6d5>
     f32:	4d c0       	rjmp	.+154    	; 0xfce <__stack+0x76f>
     f34:	d9 01       	movw	r26, r18
     f36:	99 27       	eor	r25, r25
     f38:	88 27       	eor	r24, r24
     f3a:	a9 96       	adiw	r28, 0x29	; 41
     f3c:	2c ad       	ldd	r18, Y+60	; 0x3c
     f3e:	3d ad       	ldd	r19, Y+61	; 0x3d
     f40:	4e ad       	ldd	r20, Y+62	; 0x3e
     f42:	5f ad       	ldd	r21, Y+63	; 0x3f
     f44:	a9 97       	sbiw	r28, 0x29	; 41
     f46:	40 70       	andi	r20, 0x00	; 0
     f48:	50 70       	andi	r21, 0x00	; 0
     f4a:	82 0f       	add	r24, r18
     f4c:	93 1f       	adc	r25, r19
     f4e:	a4 1f       	adc	r26, r20
     f50:	b5 1f       	adc	r27, r21
     f52:	21 96       	adiw	r28, 0x01	; 1
     f54:	2c ad       	ldd	r18, Y+60	; 0x3c
     f56:	3d ad       	ldd	r19, Y+61	; 0x3d
     f58:	4e ad       	ldd	r20, Y+62	; 0x3e
     f5a:	5f ad       	ldd	r21, Y+63	; 0x3f
     f5c:	21 97       	sbiw	r28, 0x01	; 1
     f5e:	e2 96       	adiw	r28, 0x32	; 50
     f60:	0f ac       	ldd	r0, Y+63	; 0x3f
     f62:	e2 97       	sbiw	r28, 0x32	; 50
     f64:	04 c0       	rjmp	.+8      	; 0xf6e <__stack+0x70f>
     f66:	22 0f       	add	r18, r18
     f68:	33 1f       	adc	r19, r19
     f6a:	44 1f       	adc	r20, r20
     f6c:	55 1f       	adc	r21, r21
     f6e:	0a 94       	dec	r0
     f70:	d2 f7       	brpl	.-12     	; 0xf66 <__stack+0x707>
     f72:	28 17       	cp	r18, r24
     f74:	39 07       	cpc	r19, r25
     f76:	4a 07       	cpc	r20, r26
     f78:	5b 07       	cpc	r21, r27
     f7a:	48 f5       	brcc	.+82     	; 0xfce <__stack+0x76f>
     f7c:	25 96       	adiw	r28, 0x05	; 5
     f7e:	0c ad       	ldd	r16, Y+60	; 0x3c
     f80:	1d ad       	ldd	r17, Y+61	; 0x3d
     f82:	2e ad       	ldd	r18, Y+62	; 0x3e
     f84:	3f ad       	ldd	r19, Y+63	; 0x3f
     f86:	25 97       	sbiw	r28, 0x05	; 5
     f88:	01 50       	subi	r16, 0x01	; 1
     f8a:	10 40       	sbci	r17, 0x00	; 0
     f8c:	20 40       	sbci	r18, 0x00	; 0
     f8e:	30 40       	sbci	r19, 0x00	; 0
     f90:	25 96       	adiw	r28, 0x05	; 5
     f92:	0c af       	std	Y+60, r16	; 0x3c
     f94:	1d af       	std	Y+61, r17	; 0x3d
     f96:	2e af       	std	Y+62, r18	; 0x3e
     f98:	3f af       	std	Y+63, r19	; 0x3f
     f9a:	25 97       	sbiw	r28, 0x05	; 5
     f9c:	18 c0       	rjmp	.+48     	; 0xfce <__stack+0x76f>
     f9e:	66 24       	eor	r6, r6
     fa0:	77 24       	eor	r7, r7
     fa2:	43 01       	movw	r8, r6
     fa4:	21 e0       	ldi	r18, 0x01	; 1
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e0       	ldi	r20, 0x00	; 0
     faa:	50 e0       	ldi	r21, 0x00	; 0
     fac:	25 96       	adiw	r28, 0x05	; 5
     fae:	2c af       	std	Y+60, r18	; 0x3c
     fb0:	3d af       	std	Y+61, r19	; 0x3d
     fb2:	4e af       	std	Y+62, r20	; 0x3e
     fb4:	5f af       	std	Y+63, r21	; 0x3f
     fb6:	25 97       	sbiw	r28, 0x05	; 5
     fb8:	0d c0       	rjmp	.+26     	; 0xfd4 <__stack+0x775>
     fba:	66 24       	eor	r6, r6
     fbc:	77 24       	eor	r7, r7
     fbe:	43 01       	movw	r8, r6
     fc0:	25 96       	adiw	r28, 0x05	; 5
     fc2:	1c ae       	std	Y+60, r1	; 0x3c
     fc4:	1d ae       	std	Y+61, r1	; 0x3d
     fc6:	1e ae       	std	Y+62, r1	; 0x3e
     fc8:	1f ae       	std	Y+63, r1	; 0x3f
     fca:	25 97       	sbiw	r28, 0x05	; 5
     fcc:	03 c0       	rjmp	.+6      	; 0xfd4 <__stack+0x775>
     fce:	66 24       	eor	r6, r6
     fd0:	77 24       	eor	r7, r7
     fd2:	43 01       	movw	r8, r6
     fd4:	fe 01       	movw	r30, r28
     fd6:	b1 96       	adiw	r30, 0x21	; 33
     fd8:	88 e0       	ldi	r24, 0x08	; 8
     fda:	df 01       	movw	r26, r30
     fdc:	1d 92       	st	X+, r1
     fde:	8a 95       	dec	r24
     fe0:	e9 f7       	brne	.-6      	; 0xfdc <__stack+0x77d>
     fe2:	25 96       	adiw	r28, 0x05	; 5
     fe4:	ac ac       	ldd	r10, Y+60	; 0x3c
     fe6:	bd ac       	ldd	r11, Y+61	; 0x3d
     fe8:	ce ac       	ldd	r12, Y+62	; 0x3e
     fea:	df ac       	ldd	r13, Y+63	; 0x3f
     fec:	25 97       	sbiw	r28, 0x05	; 5
     fee:	a9 a2       	std	Y+33, r10	; 0x21
     ff0:	ba a2       	std	Y+34, r11	; 0x22
     ff2:	cb a2       	std	Y+35, r12	; 0x23
     ff4:	dc a2       	std	Y+36, r13	; 0x24
     ff6:	6d a2       	std	Y+37, r6	; 0x25
     ff8:	7e a2       	std	Y+38, r7	; 0x26
     ffa:	8f a2       	std	Y+39, r8	; 0x27
     ffc:	98 a6       	std	Y+40, r9	; 0x28
     ffe:	22 96       	adiw	r28, 0x02	; 2
    1000:	2f ad       	ldd	r18, Y+63	; 0x3f
    1002:	22 97       	sbiw	r28, 0x02	; 2
    1004:	3a a1       	ldd	r19, Y+34	; 0x22
    1006:	4b a1       	ldd	r20, Y+35	; 0x23
    1008:	5c a1       	ldd	r21, Y+36	; 0x24
    100a:	66 2d       	mov	r22, r6
    100c:	7e a1       	ldd	r23, Y+38	; 0x26
    100e:	df a0       	ldd	r13, Y+39	; 0x27
    1010:	98 a5       	ldd	r25, Y+40	; 0x28
    1012:	e1 96       	adiw	r28, 0x31	; 49
    1014:	ec ac       	ldd	r14, Y+60	; 0x3c
    1016:	fd ac       	ldd	r15, Y+61	; 0x3d
    1018:	0e ad       	ldd	r16, Y+62	; 0x3e
    101a:	1f ad       	ldd	r17, Y+63	; 0x3f
    101c:	e1 97       	sbiw	r28, 0x31	; 49
    101e:	e1 14       	cp	r14, r1
    1020:	f1 04       	cpc	r15, r1
    1022:	01 05       	cpc	r16, r1
    1024:	11 05       	cpc	r17, r1
    1026:	09 f4       	brne	.+2      	; 0x102a <__stack+0x7cb>
    1028:	56 c0       	rjmp	.+172    	; 0x10d6 <__stack+0x877>
    102a:	21 95       	neg	r18
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	12 16       	cp	r1, r18
    1030:	08 f0       	brcs	.+2      	; 0x1034 <__stack+0x7d5>
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	31 95       	neg	r19
    1036:	e1 e0       	ldi	r30, 0x01	; 1
    1038:	13 16       	cp	r1, r19
    103a:	08 f0       	brcs	.+2      	; 0x103e <__stack+0x7df>
    103c:	e0 e0       	ldi	r30, 0x00	; 0
    103e:	93 2e       	mov	r9, r19
    1040:	98 1a       	sub	r9, r24
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	39 15       	cp	r19, r9
    1046:	08 f0       	brcs	.+2      	; 0x104a <__stack+0x7eb>
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	e8 2b       	or	r30, r24
    104c:	41 95       	neg	r20
    104e:	f1 e0       	ldi	r31, 0x01	; 1
    1050:	14 16       	cp	r1, r20
    1052:	08 f0       	brcs	.+2      	; 0x1056 <__stack+0x7f7>
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	a4 2e       	mov	r10, r20
    1058:	ae 1a       	sub	r10, r30
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	4a 15       	cp	r20, r10
    105e:	08 f0       	brcs	.+2      	; 0x1062 <__stack+0x803>
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	f8 2b       	or	r31, r24
    1064:	51 95       	neg	r21
    1066:	e1 e0       	ldi	r30, 0x01	; 1
    1068:	15 16       	cp	r1, r21
    106a:	08 f0       	brcs	.+2      	; 0x106e <__stack+0x80f>
    106c:	e0 e0       	ldi	r30, 0x00	; 0
    106e:	b5 2e       	mov	r11, r21
    1070:	bf 1a       	sub	r11, r31
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	5b 15       	cp	r21, r11
    1076:	08 f0       	brcs	.+2      	; 0x107a <__stack+0x81b>
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	e8 2b       	or	r30, r24
    107c:	61 95       	neg	r22
    107e:	f1 e0       	ldi	r31, 0x01	; 1
    1080:	16 16       	cp	r1, r22
    1082:	08 f0       	brcs	.+2      	; 0x1086 <__stack+0x827>
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	a6 2f       	mov	r26, r22
    1088:	ae 1b       	sub	r26, r30
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	6a 17       	cp	r22, r26
    108e:	08 f0       	brcs	.+2      	; 0x1092 <__stack+0x833>
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	f8 2b       	or	r31, r24
    1094:	71 95       	neg	r23
    1096:	e1 e0       	ldi	r30, 0x01	; 1
    1098:	17 16       	cp	r1, r23
    109a:	08 f0       	brcs	.+2      	; 0x109e <__stack+0x83f>
    109c:	e0 e0       	ldi	r30, 0x00	; 0
    109e:	c7 2e       	mov	r12, r23
    10a0:	cf 1a       	sub	r12, r31
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	7c 15       	cp	r23, r12
    10a6:	08 f0       	brcs	.+2      	; 0x10aa <__stack+0x84b>
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	e8 2b       	or	r30, r24
    10ac:	8d 2d       	mov	r24, r13
    10ae:	81 95       	neg	r24
    10b0:	f1 e0       	ldi	r31, 0x01	; 1
    10b2:	18 16       	cp	r1, r24
    10b4:	08 f0       	brcs	.+2      	; 0x10b8 <__stack+0x859>
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	d8 2e       	mov	r13, r24
    10ba:	de 1a       	sub	r13, r30
    10bc:	e1 e0       	ldi	r30, 0x01	; 1
    10be:	8d 15       	cp	r24, r13
    10c0:	08 f0       	brcs	.+2      	; 0x10c4 <__stack+0x865>
    10c2:	e0 e0       	ldi	r30, 0x00	; 0
    10c4:	fe 2b       	or	r31, r30
    10c6:	89 2f       	mov	r24, r25
    10c8:	81 95       	neg	r24
    10ca:	39 2d       	mov	r19, r9
    10cc:	a5 01       	movw	r20, r10
    10ce:	6a 2f       	mov	r22, r26
    10d0:	7c 2d       	mov	r23, r12
    10d2:	98 2f       	mov	r25, r24
    10d4:	9f 1b       	sub	r25, r31
    10d6:	8d 2d       	mov	r24, r13
    10d8:	ce 58       	subi	r28, 0x8E	; 142
    10da:	df 4f       	sbci	r29, 0xFF	; 255
    10dc:	e2 e1       	ldi	r30, 0x12	; 18
    10de:	0c 94 43 1e 	jmp	0x3c86	; 0x3c86 <__epilogue_restores__>

000010e2 <__moddi3>:
    10e2:	a7 e7       	ldi	r26, 0x77	; 119
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e7 e7       	ldi	r30, 0x77	; 119
    10e8:	f8 e0       	ldi	r31, 0x08	; 8
    10ea:	0c 94 27 1e 	jmp	0x3c4e	; 0x3c4e <__prologue_saves__>
    10ee:	98 2e       	mov	r9, r24
    10f0:	89 2e       	mov	r8, r25
    10f2:	71 2e       	mov	r7, r17
    10f4:	88 e0       	ldi	r24, 0x08	; 8
    10f6:	fe 01       	movw	r30, r28
    10f8:	31 96       	adiw	r30, 0x01	; 1
    10fa:	df 01       	movw	r26, r30
    10fc:	68 2e       	mov	r6, r24
    10fe:	1d 92       	st	X+, r1
    1100:	6a 94       	dec	r6
    1102:	e9 f7       	brne	.-6      	; 0x10fe <__moddi3+0x1c>
    1104:	29 83       	std	Y+1, r18	; 0x01
    1106:	3a 83       	std	Y+2, r19	; 0x02
    1108:	4b 83       	std	Y+3, r20	; 0x03
    110a:	5c 83       	std	Y+4, r21	; 0x04
    110c:	6d 83       	std	Y+5, r22	; 0x05
    110e:	7e 83       	std	Y+6, r23	; 0x06
    1110:	9f 82       	std	Y+7, r9	; 0x07
    1112:	98 87       	std	Y+8, r25	; 0x08
    1114:	fe 01       	movw	r30, r28
    1116:	39 96       	adiw	r30, 0x09	; 9
    1118:	df 01       	movw	r26, r30
    111a:	1d 92       	st	X+, r1
    111c:	8a 95       	dec	r24
    111e:	e9 f7       	brne	.-6      	; 0x111a <__moddi3+0x38>
    1120:	a9 86       	std	Y+9, r10	; 0x09
    1122:	ba 86       	std	Y+10, r11	; 0x0a
    1124:	cb 86       	std	Y+11, r12	; 0x0b
    1126:	dc 86       	std	Y+12, r13	; 0x0c
    1128:	ed 86       	std	Y+13, r14	; 0x0d
    112a:	fe 86       	std	Y+14, r15	; 0x0e
    112c:	0f 87       	std	Y+15, r16	; 0x0f
    112e:	18 8b       	std	Y+16, r17	; 0x10
    1130:	8d 81       	ldd	r24, Y+5	; 0x05
    1132:	9e 81       	ldd	r25, Y+6	; 0x06
    1134:	af 81       	ldd	r26, Y+7	; 0x07
    1136:	b8 85       	ldd	r27, Y+8	; 0x08
    1138:	b7 fd       	sbrc	r27, 7
    113a:	07 c0       	rjmp	.+14     	; 0x114a <__moddi3+0x68>
    113c:	e1 96       	adiw	r28, 0x31	; 49
    113e:	1c ae       	std	Y+60, r1	; 0x3c
    1140:	1d ae       	std	Y+61, r1	; 0x3d
    1142:	1e ae       	std	Y+62, r1	; 0x3e
    1144:	1f ae       	std	Y+63, r1	; 0x3f
    1146:	e1 97       	sbiw	r28, 0x31	; 49
    1148:	64 c0       	rjmp	.+200    	; 0x1212 <__moddi3+0x130>
    114a:	21 95       	neg	r18
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	12 16       	cp	r1, r18
    1150:	08 f0       	brcs	.+2      	; 0x1154 <__moddi3+0x72>
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	31 95       	neg	r19
    1156:	91 e0       	ldi	r25, 0x01	; 1
    1158:	13 16       	cp	r1, r19
    115a:	08 f0       	brcs	.+2      	; 0x115e <__moddi3+0x7c>
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	b3 2f       	mov	r27, r19
    1160:	b8 1b       	sub	r27, r24
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	3b 17       	cp	r19, r27
    1166:	08 f0       	brcs	.+2      	; 0x116a <__moddi3+0x88>
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	98 2b       	or	r25, r24
    116c:	41 95       	neg	r20
    116e:	31 e0       	ldi	r19, 0x01	; 1
    1170:	14 16       	cp	r1, r20
    1172:	08 f0       	brcs	.+2      	; 0x1176 <__moddi3+0x94>
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	a4 2f       	mov	r26, r20
    1178:	a9 1b       	sub	r26, r25
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	4a 17       	cp	r20, r26
    117e:	08 f0       	brcs	.+2      	; 0x1182 <__moddi3+0xa0>
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	38 2b       	or	r19, r24
    1184:	51 95       	neg	r21
    1186:	91 e0       	ldi	r25, 0x01	; 1
    1188:	15 16       	cp	r1, r21
    118a:	08 f0       	brcs	.+2      	; 0x118e <__moddi3+0xac>
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	f5 2f       	mov	r31, r21
    1190:	f3 1b       	sub	r31, r19
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	5f 17       	cp	r21, r31
    1196:	08 f0       	brcs	.+2      	; 0x119a <__moddi3+0xb8>
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	98 2b       	or	r25, r24
    119c:	61 95       	neg	r22
    119e:	31 e0       	ldi	r19, 0x01	; 1
    11a0:	16 16       	cp	r1, r22
    11a2:	08 f0       	brcs	.+2      	; 0x11a6 <__moddi3+0xc4>
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	e6 2f       	mov	r30, r22
    11a8:	e9 1b       	sub	r30, r25
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	6e 17       	cp	r22, r30
    11ae:	08 f0       	brcs	.+2      	; 0x11b2 <__moddi3+0xd0>
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	38 2b       	or	r19, r24
    11b4:	71 95       	neg	r23
    11b6:	41 e0       	ldi	r20, 0x01	; 1
    11b8:	17 16       	cp	r1, r23
    11ba:	08 f0       	brcs	.+2      	; 0x11be <__moddi3+0xdc>
    11bc:	40 e0       	ldi	r20, 0x00	; 0
    11be:	57 2f       	mov	r21, r23
    11c0:	53 1b       	sub	r21, r19
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	75 17       	cp	r23, r21
    11c6:	08 f0       	brcs	.+2      	; 0x11ca <__moddi3+0xe8>
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	48 2b       	or	r20, r24
    11cc:	89 2d       	mov	r24, r9
    11ce:	81 95       	neg	r24
    11d0:	91 e0       	ldi	r25, 0x01	; 1
    11d2:	18 16       	cp	r1, r24
    11d4:	08 f0       	brcs	.+2      	; 0x11d8 <__moddi3+0xf6>
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	68 2e       	mov	r6, r24
    11da:	64 1a       	sub	r6, r20
    11dc:	46 2d       	mov	r20, r6
    11de:	31 e0       	ldi	r19, 0x01	; 1
    11e0:	86 15       	cp	r24, r6
    11e2:	08 f0       	brcs	.+2      	; 0x11e6 <__moddi3+0x104>
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	93 2b       	or	r25, r19
    11e8:	88 2d       	mov	r24, r8
    11ea:	81 95       	neg	r24
    11ec:	89 1b       	sub	r24, r25
    11ee:	29 83       	std	Y+1, r18	; 0x01
    11f0:	ba 83       	std	Y+2, r27	; 0x02
    11f2:	ab 83       	std	Y+3, r26	; 0x03
    11f4:	fc 83       	std	Y+4, r31	; 0x04
    11f6:	ed 83       	std	Y+5, r30	; 0x05
    11f8:	5e 83       	std	Y+6, r21	; 0x06
    11fa:	4f 83       	std	Y+7, r20	; 0x07
    11fc:	88 87       	std	Y+8, r24	; 0x08
    11fe:	2f ef       	ldi	r18, 0xFF	; 255
    1200:	3f ef       	ldi	r19, 0xFF	; 255
    1202:	4f ef       	ldi	r20, 0xFF	; 255
    1204:	5f ef       	ldi	r21, 0xFF	; 255
    1206:	e1 96       	adiw	r28, 0x31	; 49
    1208:	2c af       	std	Y+60, r18	; 0x3c
    120a:	3d af       	std	Y+61, r19	; 0x3d
    120c:	4e af       	std	Y+62, r20	; 0x3e
    120e:	5f af       	std	Y+63, r21	; 0x3f
    1210:	e1 97       	sbiw	r28, 0x31	; 49
    1212:	8d 85       	ldd	r24, Y+13	; 0x0d
    1214:	9e 85       	ldd	r25, Y+14	; 0x0e
    1216:	af 85       	ldd	r26, Y+15	; 0x0f
    1218:	b8 89       	ldd	r27, Y+16	; 0x10
    121a:	b7 ff       	sbrs	r27, 7
    121c:	5a c0       	rjmp	.+180    	; 0x12d2 <__moddi3+0x1f0>
    121e:	a1 94       	neg	r10
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	1a 14       	cp	r1, r10
    1224:	08 f0       	brcs	.+2      	; 0x1228 <__moddi3+0x146>
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	b1 94       	neg	r11
    122a:	91 e0       	ldi	r25, 0x01	; 1
    122c:	1b 14       	cp	r1, r11
    122e:	08 f0       	brcs	.+2      	; 0x1232 <__moddi3+0x150>
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	6b 2d       	mov	r22, r11
    1234:	68 1b       	sub	r22, r24
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	b6 16       	cp	r11, r22
    123a:	08 f0       	brcs	.+2      	; 0x123e <__moddi3+0x15c>
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	98 2b       	or	r25, r24
    1240:	c1 94       	neg	r12
    1242:	21 e0       	ldi	r18, 0x01	; 1
    1244:	1c 14       	cp	r1, r12
    1246:	08 f0       	brcs	.+2      	; 0x124a <__moddi3+0x168>
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	5c 2d       	mov	r21, r12
    124c:	59 1b       	sub	r21, r25
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	c5 16       	cp	r12, r21
    1252:	08 f0       	brcs	.+2      	; 0x1256 <__moddi3+0x174>
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	28 2b       	or	r18, r24
    1258:	d1 94       	neg	r13
    125a:	91 e0       	ldi	r25, 0x01	; 1
    125c:	1d 14       	cp	r1, r13
    125e:	08 f0       	brcs	.+2      	; 0x1262 <__moddi3+0x180>
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	4d 2d       	mov	r20, r13
    1264:	42 1b       	sub	r20, r18
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	d4 16       	cp	r13, r20
    126a:	08 f0       	brcs	.+2      	; 0x126e <__moddi3+0x18c>
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	98 2b       	or	r25, r24
    1270:	e1 94       	neg	r14
    1272:	21 e0       	ldi	r18, 0x01	; 1
    1274:	1e 14       	cp	r1, r14
    1276:	08 f0       	brcs	.+2      	; 0x127a <__moddi3+0x198>
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	3e 2d       	mov	r19, r14
    127c:	39 1b       	sub	r19, r25
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	e3 16       	cp	r14, r19
    1282:	08 f0       	brcs	.+2      	; 0x1286 <__moddi3+0x1a4>
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	28 2b       	or	r18, r24
    1288:	f1 94       	neg	r15
    128a:	91 e0       	ldi	r25, 0x01	; 1
    128c:	1f 14       	cp	r1, r15
    128e:	08 f0       	brcs	.+2      	; 0x1292 <__moddi3+0x1b0>
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	7f 2d       	mov	r23, r15
    1294:	72 1b       	sub	r23, r18
    1296:	27 2f       	mov	r18, r23
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	f7 16       	cp	r15, r23
    129c:	08 f0       	brcs	.+2      	; 0x12a0 <__moddi3+0x1be>
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	98 2b       	or	r25, r24
    12a2:	01 95       	neg	r16
    12a4:	11 e0       	ldi	r17, 0x01	; 1
    12a6:	10 16       	cp	r1, r16
    12a8:	08 f0       	brcs	.+2      	; 0x12ac <__moddi3+0x1ca>
    12aa:	10 e0       	ldi	r17, 0x00	; 0
    12ac:	80 2f       	mov	r24, r16
    12ae:	89 1b       	sub	r24, r25
    12b0:	98 2f       	mov	r25, r24
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	09 17       	cp	r16, r25
    12b6:	08 f0       	brcs	.+2      	; 0x12ba <__moddi3+0x1d8>
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	18 2b       	or	r17, r24
    12bc:	87 2d       	mov	r24, r7
    12be:	81 95       	neg	r24
    12c0:	81 1b       	sub	r24, r17
    12c2:	a9 86       	std	Y+9, r10	; 0x09
    12c4:	6a 87       	std	Y+10, r22	; 0x0a
    12c6:	5b 87       	std	Y+11, r21	; 0x0b
    12c8:	4c 87       	std	Y+12, r20	; 0x0c
    12ca:	3d 87       	std	Y+13, r19	; 0x0d
    12cc:	2e 87       	std	Y+14, r18	; 0x0e
    12ce:	9f 87       	std	Y+15, r25	; 0x0f
    12d0:	88 8b       	std	Y+16, r24	; 0x10
    12d2:	99 81       	ldd	r25, Y+1	; 0x01
    12d4:	2a 81       	ldd	r18, Y+2	; 0x02
    12d6:	3b 81       	ldd	r19, Y+3	; 0x03
    12d8:	4c 81       	ldd	r20, Y+4	; 0x04
    12da:	5d 81       	ldd	r21, Y+5	; 0x05
    12dc:	6e 81       	ldd	r22, Y+6	; 0x06
    12de:	7f 81       	ldd	r23, Y+7	; 0x07
    12e0:	a8 85       	ldd	r26, Y+8	; 0x08
    12e2:	b9 85       	ldd	r27, Y+9	; 0x09
    12e4:	1a 85       	ldd	r17, Y+10	; 0x0a
    12e6:	0b 85       	ldd	r16, Y+11	; 0x0b
    12e8:	fc 84       	ldd	r15, Y+12	; 0x0c
    12ea:	ed 84       	ldd	r14, Y+13	; 0x0d
    12ec:	de 84       	ldd	r13, Y+14	; 0x0e
    12ee:	cf 84       	ldd	r12, Y+15	; 0x0f
    12f0:	b8 88       	ldd	r11, Y+16	; 0x10
    12f2:	88 e0       	ldi	r24, 0x08	; 8
    12f4:	e9 e1       	ldi	r30, 0x19	; 25
    12f6:	8e 2e       	mov	r8, r30
    12f8:	91 2c       	mov	r9, r1
    12fa:	8c 0e       	add	r8, r28
    12fc:	9d 1e       	adc	r9, r29
    12fe:	f4 01       	movw	r30, r8
    1300:	68 2e       	mov	r6, r24
    1302:	11 92       	st	Z+, r1
    1304:	6a 94       	dec	r6
    1306:	e9 f7       	brne	.-6      	; 0x1302 <__moddi3+0x220>
    1308:	99 8f       	std	Y+25, r25	; 0x19
    130a:	2a 8f       	std	Y+26, r18	; 0x1a
    130c:	3b 8f       	std	Y+27, r19	; 0x1b
    130e:	4c 8f       	std	Y+28, r20	; 0x1c
    1310:	5d 8f       	std	Y+29, r21	; 0x1d
    1312:	6e 8f       	std	Y+30, r22	; 0x1e
    1314:	7f 8f       	std	Y+31, r23	; 0x1f
    1316:	a8 a3       	std	Y+32, r26	; 0x20
    1318:	9e 01       	movw	r18, r28
    131a:	2f 5d       	subi	r18, 0xDF	; 223
    131c:	3f 4f       	sbci	r19, 0xFF	; 255
    131e:	f9 01       	movw	r30, r18
    1320:	11 92       	st	Z+, r1
    1322:	8a 95       	dec	r24
    1324:	e9 f7       	brne	.-6      	; 0x1320 <__moddi3+0x23e>
    1326:	b9 a3       	std	Y+33, r27	; 0x21
    1328:	1a a3       	std	Y+34, r17	; 0x22
    132a:	0b a3       	std	Y+35, r16	; 0x23
    132c:	fc a2       	std	Y+36, r15	; 0x24
    132e:	ed a2       	std	Y+37, r14	; 0x25
    1330:	de a2       	std	Y+38, r13	; 0x26
    1332:	cf a2       	std	Y+39, r12	; 0x27
    1334:	b8 a6       	std	Y+40, r11	; 0x28
    1336:	29 a0       	ldd	r2, Y+33	; 0x21
    1338:	3a a0       	ldd	r3, Y+34	; 0x22
    133a:	4b a0       	ldd	r4, Y+35	; 0x23
    133c:	5c a0       	ldd	r5, Y+36	; 0x24
    133e:	ad a0       	ldd	r10, Y+37	; 0x25
    1340:	be a0       	ldd	r11, Y+38	; 0x26
    1342:	cf a0       	ldd	r12, Y+39	; 0x27
    1344:	d8 a4       	ldd	r13, Y+40	; 0x28
    1346:	49 8d       	ldd	r20, Y+25	; 0x19
    1348:	5a 8d       	ldd	r21, Y+26	; 0x1a
    134a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    134c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    134e:	e5 96       	adiw	r28, 0x35	; 53
    1350:	4f af       	std	Y+63, r20	; 0x3f
    1352:	e5 97       	sbiw	r28, 0x35	; 53
    1354:	e6 96       	adiw	r28, 0x36	; 54
    1356:	5f af       	std	Y+63, r21	; 0x3f
    1358:	e6 97       	sbiw	r28, 0x36	; 54
    135a:	e7 96       	adiw	r28, 0x37	; 55
    135c:	6f af       	std	Y+63, r22	; 0x3f
    135e:	e7 97       	sbiw	r28, 0x37	; 55
    1360:	e8 96       	adiw	r28, 0x38	; 56
    1362:	7f af       	std	Y+63, r23	; 0x3f
    1364:	e8 97       	sbiw	r28, 0x38	; 56
    1366:	e8 96       	adiw	r28, 0x38	; 56
    1368:	6c ac       	ldd	r6, Y+60	; 0x3c
    136a:	7d ac       	ldd	r7, Y+61	; 0x3d
    136c:	8e ac       	ldd	r8, Y+62	; 0x3e
    136e:	9f ac       	ldd	r9, Y+63	; 0x3f
    1370:	e8 97       	sbiw	r28, 0x38	; 56
    1372:	2d 96       	adiw	r28, 0x0d	; 13
    1374:	6c ae       	std	Y+60, r6	; 0x3c
    1376:	7d ae       	std	Y+61, r7	; 0x3d
    1378:	8e ae       	std	Y+62, r8	; 0x3e
    137a:	9f ae       	std	Y+63, r9	; 0x3f
    137c:	2d 97       	sbiw	r28, 0x0d	; 13
    137e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1380:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1382:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1384:	38 a1       	ldd	r19, Y+32	; 0x20
    1386:	3c 01       	movw	r6, r24
    1388:	49 01       	movw	r8, r18
    138a:	61 96       	adiw	r28, 0x11	; 17
    138c:	6c ae       	std	Y+60, r6	; 0x3c
    138e:	7d ae       	std	Y+61, r7	; 0x3d
    1390:	8e ae       	std	Y+62, r8	; 0x3e
    1392:	9f ae       	std	Y+63, r9	; 0x3f
    1394:	61 97       	sbiw	r28, 0x11	; 17
    1396:	a1 14       	cp	r10, r1
    1398:	b1 04       	cpc	r11, r1
    139a:	c1 04       	cpc	r12, r1
    139c:	d1 04       	cpc	r13, r1
    139e:	09 f0       	breq	.+2      	; 0x13a2 <__moddi3+0x2c0>
    13a0:	28 c3       	rjmp	.+1616   	; 0x19f2 <__moddi3+0x910>
    13a2:	62 14       	cp	r6, r2
    13a4:	73 04       	cpc	r7, r3
    13a6:	84 04       	cpc	r8, r4
    13a8:	95 04       	cpc	r9, r5
    13aa:	08 f0       	brcs	.+2      	; 0x13ae <__moddi3+0x2cc>
    13ac:	0e c1       	rjmp	.+540    	; 0x15ca <__moddi3+0x4e8>
    13ae:	00 e0       	ldi	r16, 0x00	; 0
    13b0:	20 16       	cp	r2, r16
    13b2:	00 e0       	ldi	r16, 0x00	; 0
    13b4:	30 06       	cpc	r3, r16
    13b6:	01 e0       	ldi	r16, 0x01	; 1
    13b8:	40 06       	cpc	r4, r16
    13ba:	00 e0       	ldi	r16, 0x00	; 0
    13bc:	50 06       	cpc	r5, r16
    13be:	88 f4       	brcc	.+34     	; 0x13e2 <__moddi3+0x300>
    13c0:	1f ef       	ldi	r17, 0xFF	; 255
    13c2:	21 16       	cp	r2, r17
    13c4:	31 04       	cpc	r3, r1
    13c6:	41 04       	cpc	r4, r1
    13c8:	51 04       	cpc	r5, r1
    13ca:	39 f0       	breq	.+14     	; 0x13da <__moddi3+0x2f8>
    13cc:	30 f0       	brcs	.+12     	; 0x13da <__moddi3+0x2f8>
    13ce:	88 e0       	ldi	r24, 0x08	; 8
    13d0:	e8 2e       	mov	r14, r24
    13d2:	f1 2c       	mov	r15, r1
    13d4:	01 2d       	mov	r16, r1
    13d6:	11 2d       	mov	r17, r1
    13d8:	18 c0       	rjmp	.+48     	; 0x140a <__moddi3+0x328>
    13da:	ee 24       	eor	r14, r14
    13dc:	ff 24       	eor	r15, r15
    13de:	87 01       	movw	r16, r14
    13e0:	14 c0       	rjmp	.+40     	; 0x140a <__moddi3+0x328>
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	22 16       	cp	r2, r18
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	32 06       	cpc	r3, r18
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	42 06       	cpc	r4, r18
    13ee:	21 e0       	ldi	r18, 0x01	; 1
    13f0:	52 06       	cpc	r5, r18
    13f2:	30 f0       	brcs	.+12     	; 0x1400 <__moddi3+0x31e>
    13f4:	b8 e1       	ldi	r27, 0x18	; 24
    13f6:	eb 2e       	mov	r14, r27
    13f8:	f1 2c       	mov	r15, r1
    13fa:	01 2d       	mov	r16, r1
    13fc:	11 2d       	mov	r17, r1
    13fe:	05 c0       	rjmp	.+10     	; 0x140a <__moddi3+0x328>
    1400:	a0 e1       	ldi	r26, 0x10	; 16
    1402:	ea 2e       	mov	r14, r26
    1404:	f1 2c       	mov	r15, r1
    1406:	01 2d       	mov	r16, r1
    1408:	11 2d       	mov	r17, r1
    140a:	d2 01       	movw	r26, r4
    140c:	c1 01       	movw	r24, r2
    140e:	0e 2c       	mov	r0, r14
    1410:	04 c0       	rjmp	.+8      	; 0x141a <__moddi3+0x338>
    1412:	b6 95       	lsr	r27
    1414:	a7 95       	ror	r26
    1416:	97 95       	ror	r25
    1418:	87 95       	ror	r24
    141a:	0a 94       	dec	r0
    141c:	d2 f7       	brpl	.-12     	; 0x1412 <__moddi3+0x330>
    141e:	88 59       	subi	r24, 0x98	; 152
    1420:	9e 4f       	sbci	r25, 0xFE	; 254
    1422:	dc 01       	movw	r26, r24
    1424:	2c 91       	ld	r18, X
    1426:	80 e2       	ldi	r24, 0x20	; 32
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	a0 e0       	ldi	r26, 0x00	; 0
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	8e 19       	sub	r24, r14
    1430:	9f 09       	sbc	r25, r15
    1432:	a0 0b       	sbc	r26, r16
    1434:	b1 0b       	sbc	r27, r17
    1436:	5c 01       	movw	r10, r24
    1438:	6d 01       	movw	r12, r26
    143a:	a2 1a       	sub	r10, r18
    143c:	b1 08       	sbc	r11, r1
    143e:	c1 08       	sbc	r12, r1
    1440:	d1 08       	sbc	r13, r1
    1442:	65 96       	adiw	r28, 0x15	; 21
    1444:	ac ae       	std	Y+60, r10	; 0x3c
    1446:	bd ae       	std	Y+61, r11	; 0x3d
    1448:	ce ae       	std	Y+62, r12	; 0x3e
    144a:	df ae       	std	Y+63, r13	; 0x3f
    144c:	65 97       	sbiw	r28, 0x15	; 21
    144e:	a1 14       	cp	r10, r1
    1450:	b1 04       	cpc	r11, r1
    1452:	c1 04       	cpc	r12, r1
    1454:	d1 04       	cpc	r13, r1
    1456:	09 f4       	brne	.+2      	; 0x145a <__moddi3+0x378>
    1458:	45 c0       	rjmp	.+138    	; 0x14e4 <__moddi3+0x402>
    145a:	62 96       	adiw	r28, 0x12	; 18
    145c:	6f ad       	ldd	r22, Y+63	; 0x3f
    145e:	62 97       	sbiw	r28, 0x12	; 18
    1460:	06 2e       	mov	r0, r22
    1462:	04 c0       	rjmp	.+8      	; 0x146c <__moddi3+0x38a>
    1464:	22 0c       	add	r2, r2
    1466:	33 1c       	adc	r3, r3
    1468:	44 1c       	adc	r4, r4
    146a:	55 1c       	adc	r5, r5
    146c:	0a 94       	dec	r0
    146e:	d2 f7       	brpl	.-12     	; 0x1464 <__moddi3+0x382>
    1470:	a4 01       	movw	r20, r8
    1472:	93 01       	movw	r18, r6
    1474:	06 2e       	mov	r0, r22
    1476:	04 c0       	rjmp	.+8      	; 0x1480 <__moddi3+0x39e>
    1478:	22 0f       	add	r18, r18
    147a:	33 1f       	adc	r19, r19
    147c:	44 1f       	adc	r20, r20
    147e:	55 1f       	adc	r21, r21
    1480:	0a 94       	dec	r0
    1482:	d2 f7       	brpl	.-12     	; 0x1478 <__moddi3+0x396>
    1484:	80 e2       	ldi	r24, 0x20	; 32
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	8a 19       	sub	r24, r10
    148a:	9b 09       	sbc	r25, r11
    148c:	e8 96       	adiw	r28, 0x38	; 56
    148e:	cc ac       	ldd	r12, Y+60	; 0x3c
    1490:	dd ac       	ldd	r13, Y+61	; 0x3d
    1492:	ee ac       	ldd	r14, Y+62	; 0x3e
    1494:	ff ac       	ldd	r15, Y+63	; 0x3f
    1496:	e8 97       	sbiw	r28, 0x38	; 56
    1498:	04 c0       	rjmp	.+8      	; 0x14a2 <__moddi3+0x3c0>
    149a:	f6 94       	lsr	r15
    149c:	e7 94       	ror	r14
    149e:	d7 94       	ror	r13
    14a0:	c7 94       	ror	r12
    14a2:	8a 95       	dec	r24
    14a4:	d2 f7       	brpl	.-12     	; 0x149a <__moddi3+0x3b8>
    14a6:	87 01       	movw	r16, r14
    14a8:	76 01       	movw	r14, r12
    14aa:	e2 2a       	or	r14, r18
    14ac:	f3 2a       	or	r15, r19
    14ae:	04 2b       	or	r16, r20
    14b0:	15 2b       	or	r17, r21
    14b2:	61 96       	adiw	r28, 0x11	; 17
    14b4:	ec ae       	std	Y+60, r14	; 0x3c
    14b6:	fd ae       	std	Y+61, r15	; 0x3d
    14b8:	0e af       	std	Y+62, r16	; 0x3e
    14ba:	1f af       	std	Y+63, r17	; 0x3f
    14bc:	61 97       	sbiw	r28, 0x11	; 17
    14be:	e8 96       	adiw	r28, 0x38	; 56
    14c0:	0c ad       	ldd	r16, Y+60	; 0x3c
    14c2:	1d ad       	ldd	r17, Y+61	; 0x3d
    14c4:	2e ad       	ldd	r18, Y+62	; 0x3e
    14c6:	3f ad       	ldd	r19, Y+63	; 0x3f
    14c8:	e8 97       	sbiw	r28, 0x38	; 56
    14ca:	04 c0       	rjmp	.+8      	; 0x14d4 <__moddi3+0x3f2>
    14cc:	00 0f       	add	r16, r16
    14ce:	11 1f       	adc	r17, r17
    14d0:	22 1f       	adc	r18, r18
    14d2:	33 1f       	adc	r19, r19
    14d4:	6a 95       	dec	r22
    14d6:	d2 f7       	brpl	.-12     	; 0x14cc <__moddi3+0x3ea>
    14d8:	2d 96       	adiw	r28, 0x0d	; 13
    14da:	0c af       	std	Y+60, r16	; 0x3c
    14dc:	1d af       	std	Y+61, r17	; 0x3d
    14de:	2e af       	std	Y+62, r18	; 0x3e
    14e0:	3f af       	std	Y+63, r19	; 0x3f
    14e2:	2d 97       	sbiw	r28, 0x0d	; 13
    14e4:	32 01       	movw	r6, r4
    14e6:	88 24       	eor	r8, r8
    14e8:	99 24       	eor	r9, r9
    14ea:	a2 01       	movw	r20, r4
    14ec:	91 01       	movw	r18, r2
    14ee:	40 70       	andi	r20, 0x00	; 0
    14f0:	50 70       	andi	r21, 0x00	; 0
    14f2:	69 96       	adiw	r28, 0x19	; 25
    14f4:	2c af       	std	Y+60, r18	; 0x3c
    14f6:	3d af       	std	Y+61, r19	; 0x3d
    14f8:	4e af       	std	Y+62, r20	; 0x3e
    14fa:	5f af       	std	Y+63, r21	; 0x3f
    14fc:	69 97       	sbiw	r28, 0x19	; 25
    14fe:	61 96       	adiw	r28, 0x11	; 17
    1500:	6c ad       	ldd	r22, Y+60	; 0x3c
    1502:	7d ad       	ldd	r23, Y+61	; 0x3d
    1504:	8e ad       	ldd	r24, Y+62	; 0x3e
    1506:	9f ad       	ldd	r25, Y+63	; 0x3f
    1508:	61 97       	sbiw	r28, 0x11	; 17
    150a:	a4 01       	movw	r20, r8
    150c:	93 01       	movw	r18, r6
    150e:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
    1512:	7b 01       	movw	r14, r22
    1514:	8c 01       	movw	r16, r24
    1516:	61 96       	adiw	r28, 0x11	; 17
    1518:	6c ad       	ldd	r22, Y+60	; 0x3c
    151a:	7d ad       	ldd	r23, Y+61	; 0x3d
    151c:	8e ad       	ldd	r24, Y+62	; 0x3e
    151e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1520:	61 97       	sbiw	r28, 0x11	; 17
    1522:	a4 01       	movw	r20, r8
    1524:	93 01       	movw	r18, r6
    1526:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
    152a:	ca 01       	movw	r24, r20
    152c:	b9 01       	movw	r22, r18
    152e:	69 96       	adiw	r28, 0x19	; 25
    1530:	2c ad       	ldd	r18, Y+60	; 0x3c
    1532:	3d ad       	ldd	r19, Y+61	; 0x3d
    1534:	4e ad       	ldd	r20, Y+62	; 0x3e
    1536:	5f ad       	ldd	r21, Y+63	; 0x3f
    1538:	69 97       	sbiw	r28, 0x19	; 25
    153a:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsi3>
    153e:	9b 01       	movw	r18, r22
    1540:	ac 01       	movw	r20, r24
    1542:	87 01       	movw	r16, r14
    1544:	ff 24       	eor	r15, r15
    1546:	ee 24       	eor	r14, r14
    1548:	2d 96       	adiw	r28, 0x0d	; 13
    154a:	ac ac       	ldd	r10, Y+60	; 0x3c
    154c:	bd ac       	ldd	r11, Y+61	; 0x3d
    154e:	ce ac       	ldd	r12, Y+62	; 0x3e
    1550:	df ac       	ldd	r13, Y+63	; 0x3f
    1552:	2d 97       	sbiw	r28, 0x0d	; 13
    1554:	c6 01       	movw	r24, r12
    1556:	aa 27       	eor	r26, r26
    1558:	bb 27       	eor	r27, r27
    155a:	57 01       	movw	r10, r14
    155c:	68 01       	movw	r12, r16
    155e:	a8 2a       	or	r10, r24
    1560:	b9 2a       	or	r11, r25
    1562:	ca 2a       	or	r12, r26
    1564:	db 2a       	or	r13, r27
    1566:	a2 16       	cp	r10, r18
    1568:	b3 06       	cpc	r11, r19
    156a:	c4 06       	cpc	r12, r20
    156c:	d5 06       	cpc	r13, r21
    156e:	90 f4       	brcc	.+36     	; 0x1594 <__moddi3+0x4b2>
    1570:	a2 0c       	add	r10, r2
    1572:	b3 1c       	adc	r11, r3
    1574:	c4 1c       	adc	r12, r4
    1576:	d5 1c       	adc	r13, r5
    1578:	a2 14       	cp	r10, r2
    157a:	b3 04       	cpc	r11, r3
    157c:	c4 04       	cpc	r12, r4
    157e:	d5 04       	cpc	r13, r5
    1580:	48 f0       	brcs	.+18     	; 0x1594 <__moddi3+0x4b2>
    1582:	a2 16       	cp	r10, r18
    1584:	b3 06       	cpc	r11, r19
    1586:	c4 06       	cpc	r12, r20
    1588:	d5 06       	cpc	r13, r21
    158a:	20 f4       	brcc	.+8      	; 0x1594 <__moddi3+0x4b2>
    158c:	a2 0c       	add	r10, r2
    158e:	b3 1c       	adc	r11, r3
    1590:	c4 1c       	adc	r12, r4
    1592:	d5 1c       	adc	r13, r5
    1594:	a2 1a       	sub	r10, r18
    1596:	b3 0a       	sbc	r11, r19
    1598:	c4 0a       	sbc	r12, r20
    159a:	d5 0a       	sbc	r13, r21
    159c:	c6 01       	movw	r24, r12
    159e:	b5 01       	movw	r22, r10
    15a0:	a4 01       	movw	r20, r8
    15a2:	93 01       	movw	r18, r6
    15a4:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
    15a8:	7b 01       	movw	r14, r22
    15aa:	8c 01       	movw	r16, r24
    15ac:	c6 01       	movw	r24, r12
    15ae:	b5 01       	movw	r22, r10
    15b0:	a4 01       	movw	r20, r8
    15b2:	93 01       	movw	r18, r6
    15b4:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
    15b8:	ca 01       	movw	r24, r20
    15ba:	b9 01       	movw	r22, r18
    15bc:	69 96       	adiw	r28, 0x19	; 25
    15be:	2c ad       	ldd	r18, Y+60	; 0x3c
    15c0:	3d ad       	ldd	r19, Y+61	; 0x3d
    15c2:	4e ad       	ldd	r20, Y+62	; 0x3e
    15c4:	5f ad       	ldd	r21, Y+63	; 0x3f
    15c6:	69 97       	sbiw	r28, 0x19	; 25
    15c8:	c8 c1       	rjmp	.+912    	; 0x195a <__moddi3+0x878>
    15ca:	21 14       	cp	r2, r1
    15cc:	31 04       	cpc	r3, r1
    15ce:	41 04       	cpc	r4, r1
    15d0:	51 04       	cpc	r5, r1
    15d2:	71 f4       	brne	.+28     	; 0x15f0 <__moddi3+0x50e>
    15d4:	61 e0       	ldi	r22, 0x01	; 1
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	40 e0       	ldi	r20, 0x00	; 0
    15e2:	50 e0       	ldi	r21, 0x00	; 0
    15e4:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
    15e8:	c9 01       	movw	r24, r18
    15ea:	da 01       	movw	r26, r20
    15ec:	1c 01       	movw	r2, r24
    15ee:	2d 01       	movw	r4, r26
    15f0:	00 e0       	ldi	r16, 0x00	; 0
    15f2:	20 16       	cp	r2, r16
    15f4:	00 e0       	ldi	r16, 0x00	; 0
    15f6:	30 06       	cpc	r3, r16
    15f8:	01 e0       	ldi	r16, 0x01	; 1
    15fa:	40 06       	cpc	r4, r16
    15fc:	00 e0       	ldi	r16, 0x00	; 0
    15fe:	50 06       	cpc	r5, r16
    1600:	88 f4       	brcc	.+34     	; 0x1624 <__moddi3+0x542>
    1602:	1f ef       	ldi	r17, 0xFF	; 255
    1604:	21 16       	cp	r2, r17
    1606:	31 04       	cpc	r3, r1
    1608:	41 04       	cpc	r4, r1
    160a:	51 04       	cpc	r5, r1
    160c:	39 f0       	breq	.+14     	; 0x161c <__moddi3+0x53a>
    160e:	30 f0       	brcs	.+12     	; 0x161c <__moddi3+0x53a>
    1610:	68 e0       	ldi	r22, 0x08	; 8
    1612:	e6 2e       	mov	r14, r22
    1614:	f1 2c       	mov	r15, r1
    1616:	01 2d       	mov	r16, r1
    1618:	11 2d       	mov	r17, r1
    161a:	18 c0       	rjmp	.+48     	; 0x164c <__moddi3+0x56a>
    161c:	ee 24       	eor	r14, r14
    161e:	ff 24       	eor	r15, r15
    1620:	87 01       	movw	r16, r14
    1622:	14 c0       	rjmp	.+40     	; 0x164c <__moddi3+0x56a>
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	22 16       	cp	r2, r18
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	32 06       	cpc	r3, r18
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	42 06       	cpc	r4, r18
    1630:	21 e0       	ldi	r18, 0x01	; 1
    1632:	52 06       	cpc	r5, r18
    1634:	30 f0       	brcs	.+12     	; 0x1642 <__moddi3+0x560>
    1636:	58 e1       	ldi	r21, 0x18	; 24
    1638:	e5 2e       	mov	r14, r21
    163a:	f1 2c       	mov	r15, r1
    163c:	01 2d       	mov	r16, r1
    163e:	11 2d       	mov	r17, r1
    1640:	05 c0       	rjmp	.+10     	; 0x164c <__moddi3+0x56a>
    1642:	40 e1       	ldi	r20, 0x10	; 16
    1644:	e4 2e       	mov	r14, r20
    1646:	f1 2c       	mov	r15, r1
    1648:	01 2d       	mov	r16, r1
    164a:	11 2d       	mov	r17, r1
    164c:	d2 01       	movw	r26, r4
    164e:	c1 01       	movw	r24, r2
    1650:	0e 2c       	mov	r0, r14
    1652:	04 c0       	rjmp	.+8      	; 0x165c <__moddi3+0x57a>
    1654:	b6 95       	lsr	r27
    1656:	a7 95       	ror	r26
    1658:	97 95       	ror	r25
    165a:	87 95       	ror	r24
    165c:	0a 94       	dec	r0
    165e:	d2 f7       	brpl	.-12     	; 0x1654 <__moddi3+0x572>
    1660:	88 59       	subi	r24, 0x98	; 152
    1662:	9e 4f       	sbci	r25, 0xFE	; 254
    1664:	dc 01       	movw	r26, r24
    1666:	2c 91       	ld	r18, X
    1668:	30 e2       	ldi	r19, 0x20	; 32
    166a:	a3 2e       	mov	r10, r19
    166c:	b1 2c       	mov	r11, r1
    166e:	c1 2c       	mov	r12, r1
    1670:	d1 2c       	mov	r13, r1
    1672:	d6 01       	movw	r26, r12
    1674:	c5 01       	movw	r24, r10
    1676:	8e 19       	sub	r24, r14
    1678:	9f 09       	sbc	r25, r15
    167a:	a0 0b       	sbc	r26, r16
    167c:	b1 0b       	sbc	r27, r17
    167e:	7c 01       	movw	r14, r24
    1680:	8d 01       	movw	r16, r26
    1682:	e2 1a       	sub	r14, r18
    1684:	f1 08       	sbc	r15, r1
    1686:	01 09       	sbc	r16, r1
    1688:	11 09       	sbc	r17, r1
    168a:	65 96       	adiw	r28, 0x15	; 21
    168c:	ec ae       	std	Y+60, r14	; 0x3c
    168e:	fd ae       	std	Y+61, r15	; 0x3d
    1690:	0e af       	std	Y+62, r16	; 0x3e
    1692:	1f af       	std	Y+63, r17	; 0x3f
    1694:	65 97       	sbiw	r28, 0x15	; 21
    1696:	e1 14       	cp	r14, r1
    1698:	f1 04       	cpc	r15, r1
    169a:	01 05       	cpc	r16, r1
    169c:	11 05       	cpc	r17, r1
    169e:	39 f4       	brne	.+14     	; 0x16ae <__moddi3+0x5cc>
    16a0:	64 01       	movw	r12, r8
    16a2:	53 01       	movw	r10, r6
    16a4:	a2 18       	sub	r10, r2
    16a6:	b3 08       	sbc	r11, r3
    16a8:	c4 08       	sbc	r12, r4
    16aa:	d5 08       	sbc	r13, r5
    16ac:	ec c0       	rjmp	.+472    	; 0x1886 <__moddi3+0x7a4>
    16ae:	62 96       	adiw	r28, 0x12	; 18
    16b0:	ff ac       	ldd	r15, Y+63	; 0x3f
    16b2:	62 97       	sbiw	r28, 0x12	; 18
    16b4:	e4 96       	adiw	r28, 0x34	; 52
    16b6:	ff ae       	std	Y+63, r15	; 0x3f
    16b8:	e4 97       	sbiw	r28, 0x34	; 52
    16ba:	0f 2c       	mov	r0, r15
    16bc:	04 c0       	rjmp	.+8      	; 0x16c6 <__moddi3+0x5e4>
    16be:	22 0c       	add	r2, r2
    16c0:	33 1c       	adc	r3, r3
    16c2:	44 1c       	adc	r4, r4
    16c4:	55 1c       	adc	r5, r5
    16c6:	0a 94       	dec	r0
    16c8:	d2 f7       	brpl	.-12     	; 0x16be <__moddi3+0x5dc>
    16ca:	8a 2d       	mov	r24, r10
    16cc:	8f 19       	sub	r24, r15
    16ce:	64 01       	movw	r12, r8
    16d0:	53 01       	movw	r10, r6
    16d2:	08 2e       	mov	r0, r24
    16d4:	04 c0       	rjmp	.+8      	; 0x16de <__moddi3+0x5fc>
    16d6:	d6 94       	lsr	r13
    16d8:	c7 94       	ror	r12
    16da:	b7 94       	ror	r11
    16dc:	a7 94       	ror	r10
    16de:	0a 94       	dec	r0
    16e0:	d2 f7       	brpl	.-12     	; 0x16d6 <__moddi3+0x5f4>
    16e2:	a4 01       	movw	r20, r8
    16e4:	93 01       	movw	r18, r6
    16e6:	04 c0       	rjmp	.+8      	; 0x16f0 <__moddi3+0x60e>
    16e8:	22 0f       	add	r18, r18
    16ea:	33 1f       	adc	r19, r19
    16ec:	44 1f       	adc	r20, r20
    16ee:	55 1f       	adc	r21, r21
    16f0:	fa 94       	dec	r15
    16f2:	d2 f7       	brpl	.-12     	; 0x16e8 <__moddi3+0x606>
    16f4:	e8 96       	adiw	r28, 0x38	; 56
    16f6:	6c ac       	ldd	r6, Y+60	; 0x3c
    16f8:	7d ac       	ldd	r7, Y+61	; 0x3d
    16fa:	8e ac       	ldd	r8, Y+62	; 0x3e
    16fc:	9f ac       	ldd	r9, Y+63	; 0x3f
    16fe:	e8 97       	sbiw	r28, 0x38	; 56
    1700:	04 c0       	rjmp	.+8      	; 0x170a <__moddi3+0x628>
    1702:	96 94       	lsr	r9
    1704:	87 94       	ror	r8
    1706:	77 94       	ror	r7
    1708:	67 94       	ror	r6
    170a:	8a 95       	dec	r24
    170c:	d2 f7       	brpl	.-12     	; 0x1702 <__moddi3+0x620>
    170e:	84 01       	movw	r16, r8
    1710:	73 01       	movw	r14, r6
    1712:	e2 2a       	or	r14, r18
    1714:	f3 2a       	or	r15, r19
    1716:	04 2b       	or	r16, r20
    1718:	15 2b       	or	r17, r21
    171a:	29 96       	adiw	r28, 0x09	; 9
    171c:	ec ae       	std	Y+60, r14	; 0x3c
    171e:	fd ae       	std	Y+61, r15	; 0x3d
    1720:	0e af       	std	Y+62, r16	; 0x3e
    1722:	1f af       	std	Y+63, r17	; 0x3f
    1724:	29 97       	sbiw	r28, 0x09	; 9
    1726:	32 01       	movw	r6, r4
    1728:	88 24       	eor	r8, r8
    172a:	99 24       	eor	r9, r9
    172c:	92 01       	movw	r18, r4
    172e:	81 01       	movw	r16, r2
    1730:	20 70       	andi	r18, 0x00	; 0
    1732:	30 70       	andi	r19, 0x00	; 0
    1734:	6d 96       	adiw	r28, 0x1d	; 29
    1736:	0c af       	std	Y+60, r16	; 0x3c
    1738:	1d af       	std	Y+61, r17	; 0x3d
    173a:	2e af       	std	Y+62, r18	; 0x3e
    173c:	3f af       	std	Y+63, r19	; 0x3f
    173e:	6d 97       	sbiw	r28, 0x1d	; 29
    1740:	c6 01       	movw	r24, r12
    1742:	b5 01       	movw	r22, r10
    1744:	a4 01       	movw	r20, r8
    1746:	93 01       	movw	r18, r6
    1748:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
    174c:	7b 01       	movw	r14, r22
    174e:	8c 01       	movw	r16, r24
    1750:	c6 01       	movw	r24, r12
    1752:	b5 01       	movw	r22, r10
    1754:	a4 01       	movw	r20, r8
    1756:	93 01       	movw	r18, r6
    1758:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
    175c:	ca 01       	movw	r24, r20
    175e:	b9 01       	movw	r22, r18
    1760:	6d 96       	adiw	r28, 0x1d	; 29
    1762:	2c ad       	ldd	r18, Y+60	; 0x3c
    1764:	3d ad       	ldd	r19, Y+61	; 0x3d
    1766:	4e ad       	ldd	r20, Y+62	; 0x3e
    1768:	5f ad       	ldd	r21, Y+63	; 0x3f
    176a:	6d 97       	sbiw	r28, 0x1d	; 29
    176c:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsi3>
    1770:	9b 01       	movw	r18, r22
    1772:	ac 01       	movw	r20, r24
    1774:	87 01       	movw	r16, r14
    1776:	ff 24       	eor	r15, r15
    1778:	ee 24       	eor	r14, r14
    177a:	29 96       	adiw	r28, 0x09	; 9
    177c:	ac ac       	ldd	r10, Y+60	; 0x3c
    177e:	bd ac       	ldd	r11, Y+61	; 0x3d
    1780:	ce ac       	ldd	r12, Y+62	; 0x3e
    1782:	df ac       	ldd	r13, Y+63	; 0x3f
    1784:	29 97       	sbiw	r28, 0x09	; 9
    1786:	c6 01       	movw	r24, r12
    1788:	aa 27       	eor	r26, r26
    178a:	bb 27       	eor	r27, r27
    178c:	5c 01       	movw	r10, r24
    178e:	6d 01       	movw	r12, r26
    1790:	ae 28       	or	r10, r14
    1792:	bf 28       	or	r11, r15
    1794:	c0 2a       	or	r12, r16
    1796:	d1 2a       	or	r13, r17
    1798:	a2 16       	cp	r10, r18
    179a:	b3 06       	cpc	r11, r19
    179c:	c4 06       	cpc	r12, r20
    179e:	d5 06       	cpc	r13, r21
    17a0:	90 f4       	brcc	.+36     	; 0x17c6 <__moddi3+0x6e4>
    17a2:	a2 0c       	add	r10, r2
    17a4:	b3 1c       	adc	r11, r3
    17a6:	c4 1c       	adc	r12, r4
    17a8:	d5 1c       	adc	r13, r5
    17aa:	a2 14       	cp	r10, r2
    17ac:	b3 04       	cpc	r11, r3
    17ae:	c4 04       	cpc	r12, r4
    17b0:	d5 04       	cpc	r13, r5
    17b2:	48 f0       	brcs	.+18     	; 0x17c6 <__moddi3+0x6e4>
    17b4:	a2 16       	cp	r10, r18
    17b6:	b3 06       	cpc	r11, r19
    17b8:	c4 06       	cpc	r12, r20
    17ba:	d5 06       	cpc	r13, r21
    17bc:	20 f4       	brcc	.+8      	; 0x17c6 <__moddi3+0x6e4>
    17be:	a2 0c       	add	r10, r2
    17c0:	b3 1c       	adc	r11, r3
    17c2:	c4 1c       	adc	r12, r4
    17c4:	d5 1c       	adc	r13, r5
    17c6:	a2 1a       	sub	r10, r18
    17c8:	b3 0a       	sbc	r11, r19
    17ca:	c4 0a       	sbc	r12, r20
    17cc:	d5 0a       	sbc	r13, r21
    17ce:	c6 01       	movw	r24, r12
    17d0:	b5 01       	movw	r22, r10
    17d2:	a4 01       	movw	r20, r8
    17d4:	93 01       	movw	r18, r6
    17d6:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
    17da:	7b 01       	movw	r14, r22
    17dc:	8c 01       	movw	r16, r24
    17de:	c6 01       	movw	r24, r12
    17e0:	b5 01       	movw	r22, r10
    17e2:	a4 01       	movw	r20, r8
    17e4:	93 01       	movw	r18, r6
    17e6:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
    17ea:	ca 01       	movw	r24, r20
    17ec:	b9 01       	movw	r22, r18
    17ee:	6d 96       	adiw	r28, 0x1d	; 29
    17f0:	2c ad       	ldd	r18, Y+60	; 0x3c
    17f2:	3d ad       	ldd	r19, Y+61	; 0x3d
    17f4:	4e ad       	ldd	r20, Y+62	; 0x3e
    17f6:	5f ad       	ldd	r21, Y+63	; 0x3f
    17f8:	6d 97       	sbiw	r28, 0x1d	; 29
    17fa:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsi3>
    17fe:	9b 01       	movw	r18, r22
    1800:	ac 01       	movw	r20, r24
    1802:	87 01       	movw	r16, r14
    1804:	ff 24       	eor	r15, r15
    1806:	ee 24       	eor	r14, r14
    1808:	29 96       	adiw	r28, 0x09	; 9
    180a:	8c ad       	ldd	r24, Y+60	; 0x3c
    180c:	9d ad       	ldd	r25, Y+61	; 0x3d
    180e:	ae ad       	ldd	r26, Y+62	; 0x3e
    1810:	bf ad       	ldd	r27, Y+63	; 0x3f
    1812:	29 97       	sbiw	r28, 0x09	; 9
    1814:	a0 70       	andi	r26, 0x00	; 0
    1816:	b0 70       	andi	r27, 0x00	; 0
    1818:	57 01       	movw	r10, r14
    181a:	68 01       	movw	r12, r16
    181c:	a8 2a       	or	r10, r24
    181e:	b9 2a       	or	r11, r25
    1820:	ca 2a       	or	r12, r26
    1822:	db 2a       	or	r13, r27
    1824:	a2 16       	cp	r10, r18
    1826:	b3 06       	cpc	r11, r19
    1828:	c4 06       	cpc	r12, r20
    182a:	d5 06       	cpc	r13, r21
    182c:	90 f4       	brcc	.+36     	; 0x1852 <__moddi3+0x770>
    182e:	a2 0c       	add	r10, r2
    1830:	b3 1c       	adc	r11, r3
    1832:	c4 1c       	adc	r12, r4
    1834:	d5 1c       	adc	r13, r5
    1836:	a2 14       	cp	r10, r2
    1838:	b3 04       	cpc	r11, r3
    183a:	c4 04       	cpc	r12, r4
    183c:	d5 04       	cpc	r13, r5
    183e:	48 f0       	brcs	.+18     	; 0x1852 <__moddi3+0x770>
    1840:	a2 16       	cp	r10, r18
    1842:	b3 06       	cpc	r11, r19
    1844:	c4 06       	cpc	r12, r20
    1846:	d5 06       	cpc	r13, r21
    1848:	20 f4       	brcc	.+8      	; 0x1852 <__moddi3+0x770>
    184a:	a2 0c       	add	r10, r2
    184c:	b3 1c       	adc	r11, r3
    184e:	c4 1c       	adc	r12, r4
    1850:	d5 1c       	adc	r13, r5
    1852:	e8 96       	adiw	r28, 0x38	; 56
    1854:	ec ac       	ldd	r14, Y+60	; 0x3c
    1856:	fd ac       	ldd	r15, Y+61	; 0x3d
    1858:	0e ad       	ldd	r16, Y+62	; 0x3e
    185a:	1f ad       	ldd	r17, Y+63	; 0x3f
    185c:	e8 97       	sbiw	r28, 0x38	; 56
    185e:	e4 96       	adiw	r28, 0x34	; 52
    1860:	0f ac       	ldd	r0, Y+63	; 0x3f
    1862:	e4 97       	sbiw	r28, 0x34	; 52
    1864:	04 c0       	rjmp	.+8      	; 0x186e <__moddi3+0x78c>
    1866:	ee 0c       	add	r14, r14
    1868:	ff 1c       	adc	r15, r15
    186a:	00 1f       	adc	r16, r16
    186c:	11 1f       	adc	r17, r17
    186e:	0a 94       	dec	r0
    1870:	d2 f7       	brpl	.-12     	; 0x1866 <__moddi3+0x784>
    1872:	2d 96       	adiw	r28, 0x0d	; 13
    1874:	ec ae       	std	Y+60, r14	; 0x3c
    1876:	fd ae       	std	Y+61, r15	; 0x3d
    1878:	0e af       	std	Y+62, r16	; 0x3e
    187a:	1f af       	std	Y+63, r17	; 0x3f
    187c:	2d 97       	sbiw	r28, 0x0d	; 13
    187e:	a2 1a       	sub	r10, r18
    1880:	b3 0a       	sbc	r11, r19
    1882:	c4 0a       	sbc	r12, r20
    1884:	d5 0a       	sbc	r13, r21
    1886:	32 01       	movw	r6, r4
    1888:	88 24       	eor	r8, r8
    188a:	99 24       	eor	r9, r9
    188c:	92 01       	movw	r18, r4
    188e:	81 01       	movw	r16, r2
    1890:	20 70       	andi	r18, 0x00	; 0
    1892:	30 70       	andi	r19, 0x00	; 0
    1894:	a1 96       	adiw	r28, 0x21	; 33
    1896:	0c af       	std	Y+60, r16	; 0x3c
    1898:	1d af       	std	Y+61, r17	; 0x3d
    189a:	2e af       	std	Y+62, r18	; 0x3e
    189c:	3f af       	std	Y+63, r19	; 0x3f
    189e:	a1 97       	sbiw	r28, 0x21	; 33
    18a0:	c6 01       	movw	r24, r12
    18a2:	b5 01       	movw	r22, r10
    18a4:	a4 01       	movw	r20, r8
    18a6:	93 01       	movw	r18, r6
    18a8:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
    18ac:	7b 01       	movw	r14, r22
    18ae:	8c 01       	movw	r16, r24
    18b0:	c6 01       	movw	r24, r12
    18b2:	b5 01       	movw	r22, r10
    18b4:	a4 01       	movw	r20, r8
    18b6:	93 01       	movw	r18, r6
    18b8:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
    18bc:	ca 01       	movw	r24, r20
    18be:	b9 01       	movw	r22, r18
    18c0:	a1 96       	adiw	r28, 0x21	; 33
    18c2:	2c ad       	ldd	r18, Y+60	; 0x3c
    18c4:	3d ad       	ldd	r19, Y+61	; 0x3d
    18c6:	4e ad       	ldd	r20, Y+62	; 0x3e
    18c8:	5f ad       	ldd	r21, Y+63	; 0x3f
    18ca:	a1 97       	sbiw	r28, 0x21	; 33
    18cc:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsi3>
    18d0:	9b 01       	movw	r18, r22
    18d2:	ac 01       	movw	r20, r24
    18d4:	87 01       	movw	r16, r14
    18d6:	ff 24       	eor	r15, r15
    18d8:	ee 24       	eor	r14, r14
    18da:	2d 96       	adiw	r28, 0x0d	; 13
    18dc:	ac ac       	ldd	r10, Y+60	; 0x3c
    18de:	bd ac       	ldd	r11, Y+61	; 0x3d
    18e0:	ce ac       	ldd	r12, Y+62	; 0x3e
    18e2:	df ac       	ldd	r13, Y+63	; 0x3f
    18e4:	2d 97       	sbiw	r28, 0x0d	; 13
    18e6:	c6 01       	movw	r24, r12
    18e8:	aa 27       	eor	r26, r26
    18ea:	bb 27       	eor	r27, r27
    18ec:	57 01       	movw	r10, r14
    18ee:	68 01       	movw	r12, r16
    18f0:	a8 2a       	or	r10, r24
    18f2:	b9 2a       	or	r11, r25
    18f4:	ca 2a       	or	r12, r26
    18f6:	db 2a       	or	r13, r27
    18f8:	a2 16       	cp	r10, r18
    18fa:	b3 06       	cpc	r11, r19
    18fc:	c4 06       	cpc	r12, r20
    18fe:	d5 06       	cpc	r13, r21
    1900:	90 f4       	brcc	.+36     	; 0x1926 <__moddi3+0x844>
    1902:	a2 0c       	add	r10, r2
    1904:	b3 1c       	adc	r11, r3
    1906:	c4 1c       	adc	r12, r4
    1908:	d5 1c       	adc	r13, r5
    190a:	a2 14       	cp	r10, r2
    190c:	b3 04       	cpc	r11, r3
    190e:	c4 04       	cpc	r12, r4
    1910:	d5 04       	cpc	r13, r5
    1912:	48 f0       	brcs	.+18     	; 0x1926 <__moddi3+0x844>
    1914:	a2 16       	cp	r10, r18
    1916:	b3 06       	cpc	r11, r19
    1918:	c4 06       	cpc	r12, r20
    191a:	d5 06       	cpc	r13, r21
    191c:	20 f4       	brcc	.+8      	; 0x1926 <__moddi3+0x844>
    191e:	a2 0c       	add	r10, r2
    1920:	b3 1c       	adc	r11, r3
    1922:	c4 1c       	adc	r12, r4
    1924:	d5 1c       	adc	r13, r5
    1926:	a2 1a       	sub	r10, r18
    1928:	b3 0a       	sbc	r11, r19
    192a:	c4 0a       	sbc	r12, r20
    192c:	d5 0a       	sbc	r13, r21
    192e:	c6 01       	movw	r24, r12
    1930:	b5 01       	movw	r22, r10
    1932:	a4 01       	movw	r20, r8
    1934:	93 01       	movw	r18, r6
    1936:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
    193a:	7b 01       	movw	r14, r22
    193c:	8c 01       	movw	r16, r24
    193e:	c6 01       	movw	r24, r12
    1940:	b5 01       	movw	r22, r10
    1942:	a4 01       	movw	r20, r8
    1944:	93 01       	movw	r18, r6
    1946:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
    194a:	ca 01       	movw	r24, r20
    194c:	b9 01       	movw	r22, r18
    194e:	a1 96       	adiw	r28, 0x21	; 33
    1950:	2c ad       	ldd	r18, Y+60	; 0x3c
    1952:	3d ad       	ldd	r19, Y+61	; 0x3d
    1954:	4e ad       	ldd	r20, Y+62	; 0x3e
    1956:	5f ad       	ldd	r21, Y+63	; 0x3f
    1958:	a1 97       	sbiw	r28, 0x21	; 33
    195a:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsi3>
    195e:	9b 01       	movw	r18, r22
    1960:	ac 01       	movw	r20, r24
    1962:	87 01       	movw	r16, r14
    1964:	ff 24       	eor	r15, r15
    1966:	ee 24       	eor	r14, r14
    1968:	2d 96       	adiw	r28, 0x0d	; 13
    196a:	8c ad       	ldd	r24, Y+60	; 0x3c
    196c:	9d ad       	ldd	r25, Y+61	; 0x3d
    196e:	ae ad       	ldd	r26, Y+62	; 0x3e
    1970:	bf ad       	ldd	r27, Y+63	; 0x3f
    1972:	2d 97       	sbiw	r28, 0x0d	; 13
    1974:	a0 70       	andi	r26, 0x00	; 0
    1976:	b0 70       	andi	r27, 0x00	; 0
    1978:	e8 2a       	or	r14, r24
    197a:	f9 2a       	or	r15, r25
    197c:	0a 2b       	or	r16, r26
    197e:	1b 2b       	or	r17, r27
    1980:	e2 16       	cp	r14, r18
    1982:	f3 06       	cpc	r15, r19
    1984:	04 07       	cpc	r16, r20
    1986:	15 07       	cpc	r17, r21
    1988:	90 f4       	brcc	.+36     	; 0x19ae <__moddi3+0x8cc>
    198a:	e2 0c       	add	r14, r2
    198c:	f3 1c       	adc	r15, r3
    198e:	04 1d       	adc	r16, r4
    1990:	15 1d       	adc	r17, r5
    1992:	e2 14       	cp	r14, r2
    1994:	f3 04       	cpc	r15, r3
    1996:	04 05       	cpc	r16, r4
    1998:	15 05       	cpc	r17, r5
    199a:	48 f0       	brcs	.+18     	; 0x19ae <__moddi3+0x8cc>
    199c:	e2 16       	cp	r14, r18
    199e:	f3 06       	cpc	r15, r19
    19a0:	04 07       	cpc	r16, r20
    19a2:	15 07       	cpc	r17, r21
    19a4:	20 f4       	brcc	.+8      	; 0x19ae <__moddi3+0x8cc>
    19a6:	e2 0c       	add	r14, r2
    19a8:	f3 1c       	adc	r15, r3
    19aa:	04 1d       	adc	r16, r4
    19ac:	15 1d       	adc	r17, r5
    19ae:	e2 1a       	sub	r14, r18
    19b0:	f3 0a       	sbc	r15, r19
    19b2:	04 0b       	sbc	r16, r20
    19b4:	15 0b       	sbc	r17, r21
    19b6:	d8 01       	movw	r26, r16
    19b8:	c7 01       	movw	r24, r14
    19ba:	62 96       	adiw	r28, 0x12	; 18
    19bc:	0f ac       	ldd	r0, Y+63	; 0x3f
    19be:	62 97       	sbiw	r28, 0x12	; 18
    19c0:	04 c0       	rjmp	.+8      	; 0x19ca <__moddi3+0x8e8>
    19c2:	b6 95       	lsr	r27
    19c4:	a7 95       	ror	r26
    19c6:	97 95       	ror	r25
    19c8:	87 95       	ror	r24
    19ca:	0a 94       	dec	r0
    19cc:	d2 f7       	brpl	.-12     	; 0x19c2 <__moddi3+0x8e0>
    19ce:	89 a7       	std	Y+41, r24	; 0x29
    19d0:	9a a7       	std	Y+42, r25	; 0x2a
    19d2:	ab a7       	std	Y+43, r26	; 0x2b
    19d4:	bc a7       	std	Y+44, r27	; 0x2c
    19d6:	1d a6       	std	Y+45, r1	; 0x2d
    19d8:	1e a6       	std	Y+46, r1	; 0x2e
    19da:	1f a6       	std	Y+47, r1	; 0x2f
    19dc:	18 aa       	std	Y+48, r1	; 0x30
    19de:	89 8b       	std	Y+17, r24	; 0x11
    19e0:	8a a5       	ldd	r24, Y+42	; 0x2a
    19e2:	8a 8b       	std	Y+18, r24	; 0x12
    19e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    19e6:	8b 8b       	std	Y+19, r24	; 0x13
    19e8:	8c a5       	ldd	r24, Y+44	; 0x2c
    19ea:	8c 8b       	std	Y+20, r24	; 0x14
    19ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    19ee:	8d 8b       	std	Y+21, r24	; 0x15
    19f0:	2f c3       	rjmp	.+1630   	; 0x2050 <__moddi3+0xf6e>
    19f2:	6a 14       	cp	r6, r10
    19f4:	7b 04       	cpc	r7, r11
    19f6:	8c 04       	cpc	r8, r12
    19f8:	9d 04       	cpc	r9, r13
    19fa:	48 f4       	brcc	.+18     	; 0x1a0e <__moddi3+0x92c>
    19fc:	49 8b       	std	Y+17, r20	; 0x11
    19fe:	5a 8b       	std	Y+18, r21	; 0x12
    1a00:	6b 8b       	std	Y+19, r22	; 0x13
    1a02:	7c 8b       	std	Y+20, r23	; 0x14
    1a04:	8d 8b       	std	Y+21, r24	; 0x15
    1a06:	9e 8b       	std	Y+22, r25	; 0x16
    1a08:	2f 8b       	std	Y+23, r18	; 0x17
    1a0a:	38 8f       	std	Y+24, r19	; 0x18
    1a0c:	27 c3       	rjmp	.+1614   	; 0x205c <__moddi3+0xf7a>
    1a0e:	00 e0       	ldi	r16, 0x00	; 0
    1a10:	a0 16       	cp	r10, r16
    1a12:	00 e0       	ldi	r16, 0x00	; 0
    1a14:	b0 06       	cpc	r11, r16
    1a16:	01 e0       	ldi	r16, 0x01	; 1
    1a18:	c0 06       	cpc	r12, r16
    1a1a:	00 e0       	ldi	r16, 0x00	; 0
    1a1c:	d0 06       	cpc	r13, r16
    1a1e:	88 f4       	brcc	.+34     	; 0x1a42 <__moddi3+0x960>
    1a20:	1f ef       	ldi	r17, 0xFF	; 255
    1a22:	a1 16       	cp	r10, r17
    1a24:	b1 04       	cpc	r11, r1
    1a26:	c1 04       	cpc	r12, r1
    1a28:	d1 04       	cpc	r13, r1
    1a2a:	39 f0       	breq	.+14     	; 0x1a3a <__moddi3+0x958>
    1a2c:	30 f0       	brcs	.+12     	; 0x1a3a <__moddi3+0x958>
    1a2e:	28 e0       	ldi	r18, 0x08	; 8
    1a30:	e2 2e       	mov	r14, r18
    1a32:	f1 2c       	mov	r15, r1
    1a34:	01 2d       	mov	r16, r1
    1a36:	11 2d       	mov	r17, r1
    1a38:	18 c0       	rjmp	.+48     	; 0x1a6a <__moddi3+0x988>
    1a3a:	ee 24       	eor	r14, r14
    1a3c:	ff 24       	eor	r15, r15
    1a3e:	87 01       	movw	r16, r14
    1a40:	14 c0       	rjmp	.+40     	; 0x1a6a <__moddi3+0x988>
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	a2 16       	cp	r10, r18
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	b2 06       	cpc	r11, r18
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	c2 06       	cpc	r12, r18
    1a4e:	21 e0       	ldi	r18, 0x01	; 1
    1a50:	d2 06       	cpc	r13, r18
    1a52:	30 f0       	brcs	.+12     	; 0x1a60 <__moddi3+0x97e>
    1a54:	98 e1       	ldi	r25, 0x18	; 24
    1a56:	e9 2e       	mov	r14, r25
    1a58:	f1 2c       	mov	r15, r1
    1a5a:	01 2d       	mov	r16, r1
    1a5c:	11 2d       	mov	r17, r1
    1a5e:	05 c0       	rjmp	.+10     	; 0x1a6a <__moddi3+0x988>
    1a60:	80 e1       	ldi	r24, 0x10	; 16
    1a62:	e8 2e       	mov	r14, r24
    1a64:	f1 2c       	mov	r15, r1
    1a66:	01 2d       	mov	r16, r1
    1a68:	11 2d       	mov	r17, r1
    1a6a:	d6 01       	movw	r26, r12
    1a6c:	c5 01       	movw	r24, r10
    1a6e:	0e 2c       	mov	r0, r14
    1a70:	04 c0       	rjmp	.+8      	; 0x1a7a <__moddi3+0x998>
    1a72:	b6 95       	lsr	r27
    1a74:	a7 95       	ror	r26
    1a76:	97 95       	ror	r25
    1a78:	87 95       	ror	r24
    1a7a:	0a 94       	dec	r0
    1a7c:	d2 f7       	brpl	.-12     	; 0x1a72 <__moddi3+0x990>
    1a7e:	88 59       	subi	r24, 0x98	; 152
    1a80:	9e 4f       	sbci	r25, 0xFE	; 254
    1a82:	dc 01       	movw	r26, r24
    1a84:	2c 91       	ld	r18, X
    1a86:	80 e2       	ldi	r24, 0x20	; 32
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	a0 e0       	ldi	r26, 0x00	; 0
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	8e 19       	sub	r24, r14
    1a90:	9f 09       	sbc	r25, r15
    1a92:	a0 0b       	sbc	r26, r16
    1a94:	b1 0b       	sbc	r27, r17
    1a96:	82 1b       	sub	r24, r18
    1a98:	91 09       	sbc	r25, r1
    1a9a:	a1 09       	sbc	r26, r1
    1a9c:	b1 09       	sbc	r27, r1
    1a9e:	00 97       	sbiw	r24, 0x00	; 0
    1aa0:	a1 05       	cpc	r26, r1
    1aa2:	b1 05       	cpc	r27, r1
    1aa4:	09 f0       	breq	.+2      	; 0x1aa8 <__moddi3+0x9c6>
    1aa6:	59 c0       	rjmp	.+178    	; 0x1b5a <__moddi3+0xa78>
    1aa8:	a6 14       	cp	r10, r6
    1aaa:	b7 04       	cpc	r11, r7
    1aac:	c8 04       	cpc	r12, r8
    1aae:	d9 04       	cpc	r13, r9
    1ab0:	70 f0       	brcs	.+28     	; 0x1ace <__moddi3+0x9ec>
    1ab2:	e8 96       	adiw	r28, 0x38	; 56
    1ab4:	ec ac       	ldd	r14, Y+60	; 0x3c
    1ab6:	fd ac       	ldd	r15, Y+61	; 0x3d
    1ab8:	0e ad       	ldd	r16, Y+62	; 0x3e
    1aba:	1f ad       	ldd	r17, Y+63	; 0x3f
    1abc:	e8 97       	sbiw	r28, 0x38	; 56
    1abe:	e2 14       	cp	r14, r2
    1ac0:	f3 04       	cpc	r15, r3
    1ac2:	04 05       	cpc	r16, r4
    1ac4:	15 05       	cpc	r17, r5
    1ac6:	18 f4       	brcc	.+6      	; 0x1ace <__moddi3+0x9ec>
    1ac8:	d8 01       	movw	r26, r16
    1aca:	c7 01       	movw	r24, r14
    1acc:	2f c0       	rjmp	.+94     	; 0x1b2c <__moddi3+0xa4a>
    1ace:	e8 96       	adiw	r28, 0x38	; 56
    1ad0:	8c ad       	ldd	r24, Y+60	; 0x3c
    1ad2:	9d ad       	ldd	r25, Y+61	; 0x3d
    1ad4:	ae ad       	ldd	r26, Y+62	; 0x3e
    1ad6:	bf ad       	ldd	r27, Y+63	; 0x3f
    1ad8:	e8 97       	sbiw	r28, 0x38	; 56
    1ada:	82 19       	sub	r24, r2
    1adc:	93 09       	sbc	r25, r3
    1ade:	a4 09       	sbc	r26, r4
    1ae0:	b5 09       	sbc	r27, r5
    1ae2:	a4 01       	movw	r20, r8
    1ae4:	93 01       	movw	r18, r6
    1ae6:	2a 19       	sub	r18, r10
    1ae8:	3b 09       	sbc	r19, r11
    1aea:	4c 09       	sbc	r20, r12
    1aec:	5d 09       	sbc	r21, r13
    1aee:	aa 24       	eor	r10, r10
    1af0:	bb 24       	eor	r11, r11
    1af2:	65 01       	movw	r12, r10
    1af4:	e8 96       	adiw	r28, 0x38	; 56
    1af6:	6c ac       	ldd	r6, Y+60	; 0x3c
    1af8:	7d ac       	ldd	r7, Y+61	; 0x3d
    1afa:	8e ac       	ldd	r8, Y+62	; 0x3e
    1afc:	9f ac       	ldd	r9, Y+63	; 0x3f
    1afe:	e8 97       	sbiw	r28, 0x38	; 56
    1b00:	68 16       	cp	r6, r24
    1b02:	79 06       	cpc	r7, r25
    1b04:	8a 06       	cpc	r8, r26
    1b06:	9b 06       	cpc	r9, r27
    1b08:	28 f4       	brcc	.+10     	; 0x1b14 <__moddi3+0xa32>
    1b0a:	11 e0       	ldi	r17, 0x01	; 1
    1b0c:	a1 2e       	mov	r10, r17
    1b0e:	b1 2c       	mov	r11, r1
    1b10:	c1 2c       	mov	r12, r1
    1b12:	d1 2c       	mov	r13, r1
    1b14:	79 01       	movw	r14, r18
    1b16:	8a 01       	movw	r16, r20
    1b18:	ea 18       	sub	r14, r10
    1b1a:	fb 08       	sbc	r15, r11
    1b1c:	0c 09       	sbc	r16, r12
    1b1e:	1d 09       	sbc	r17, r13
    1b20:	61 96       	adiw	r28, 0x11	; 17
    1b22:	ec ae       	std	Y+60, r14	; 0x3c
    1b24:	fd ae       	std	Y+61, r15	; 0x3d
    1b26:	0e af       	std	Y+62, r16	; 0x3e
    1b28:	1f af       	std	Y+63, r17	; 0x3f
    1b2a:	61 97       	sbiw	r28, 0x11	; 17
    1b2c:	89 a7       	std	Y+41, r24	; 0x29
    1b2e:	9a a7       	std	Y+42, r25	; 0x2a
    1b30:	ab a7       	std	Y+43, r26	; 0x2b
    1b32:	bc a7       	std	Y+44, r27	; 0x2c
    1b34:	61 96       	adiw	r28, 0x11	; 17
    1b36:	0c ad       	ldd	r16, Y+60	; 0x3c
    1b38:	1d ad       	ldd	r17, Y+61	; 0x3d
    1b3a:	2e ad       	ldd	r18, Y+62	; 0x3e
    1b3c:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b3e:	61 97       	sbiw	r28, 0x11	; 17
    1b40:	0d a7       	std	Y+45, r16	; 0x2d
    1b42:	1e a7       	std	Y+46, r17	; 0x2e
    1b44:	2f a7       	std	Y+47, r18	; 0x2f
    1b46:	38 ab       	std	Y+48, r19	; 0x30
    1b48:	89 8b       	std	Y+17, r24	; 0x11
    1b4a:	8a a5       	ldd	r24, Y+42	; 0x2a
    1b4c:	8a 8b       	std	Y+18, r24	; 0x12
    1b4e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b50:	8b 8b       	std	Y+19, r24	; 0x13
    1b52:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b54:	8c 8b       	std	Y+20, r24	; 0x14
    1b56:	0d 8b       	std	Y+21, r16	; 0x15
    1b58:	7b c2       	rjmp	.+1270   	; 0x2050 <__moddi3+0xf6e>
    1b5a:	e3 96       	adiw	r28, 0x33	; 51
    1b5c:	8f af       	std	Y+63, r24	; 0x3f
    1b5e:	e3 97       	sbiw	r28, 0x33	; 51
    1b60:	a6 01       	movw	r20, r12
    1b62:	95 01       	movw	r18, r10
    1b64:	08 2e       	mov	r0, r24
    1b66:	04 c0       	rjmp	.+8      	; 0x1b70 <__moddi3+0xa8e>
    1b68:	22 0f       	add	r18, r18
    1b6a:	33 1f       	adc	r19, r19
    1b6c:	44 1f       	adc	r20, r20
    1b6e:	55 1f       	adc	r21, r21
    1b70:	0a 94       	dec	r0
    1b72:	d2 f7       	brpl	.-12     	; 0x1b68 <__moddi3+0xa86>
    1b74:	10 e2       	ldi	r17, 0x20	; 32
    1b76:	18 1b       	sub	r17, r24
    1b78:	e2 96       	adiw	r28, 0x32	; 50
    1b7a:	1f af       	std	Y+63, r17	; 0x3f
    1b7c:	e2 97       	sbiw	r28, 0x32	; 50
    1b7e:	d2 01       	movw	r26, r4
    1b80:	c1 01       	movw	r24, r2
    1b82:	01 2e       	mov	r0, r17
    1b84:	04 c0       	rjmp	.+8      	; 0x1b8e <__moddi3+0xaac>
    1b86:	b6 95       	lsr	r27
    1b88:	a7 95       	ror	r26
    1b8a:	97 95       	ror	r25
    1b8c:	87 95       	ror	r24
    1b8e:	0a 94       	dec	r0
    1b90:	d2 f7       	brpl	.-12     	; 0x1b86 <__moddi3+0xaa4>
    1b92:	5c 01       	movw	r10, r24
    1b94:	6d 01       	movw	r12, r26
    1b96:	a2 2a       	or	r10, r18
    1b98:	b3 2a       	or	r11, r19
    1b9a:	c4 2a       	or	r12, r20
    1b9c:	d5 2a       	or	r13, r21
    1b9e:	25 96       	adiw	r28, 0x05	; 5
    1ba0:	ac ae       	std	Y+60, r10	; 0x3c
    1ba2:	bd ae       	std	Y+61, r11	; 0x3d
    1ba4:	ce ae       	std	Y+62, r12	; 0x3e
    1ba6:	df ae       	std	Y+63, r13	; 0x3f
    1ba8:	25 97       	sbiw	r28, 0x05	; 5
    1baa:	72 01       	movw	r14, r4
    1bac:	61 01       	movw	r12, r2
    1bae:	e3 96       	adiw	r28, 0x33	; 51
    1bb0:	0f ac       	ldd	r0, Y+63	; 0x3f
    1bb2:	e3 97       	sbiw	r28, 0x33	; 51
    1bb4:	04 c0       	rjmp	.+8      	; 0x1bbe <__moddi3+0xadc>
    1bb6:	cc 0c       	add	r12, r12
    1bb8:	dd 1c       	adc	r13, r13
    1bba:	ee 1c       	adc	r14, r14
    1bbc:	ff 1c       	adc	r15, r15
    1bbe:	0a 94       	dec	r0
    1bc0:	d2 f7       	brpl	.-12     	; 0x1bb6 <__moddi3+0xad4>
    1bc2:	21 96       	adiw	r28, 0x01	; 1
    1bc4:	cc ae       	std	Y+60, r12	; 0x3c
    1bc6:	dd ae       	std	Y+61, r13	; 0x3d
    1bc8:	ee ae       	std	Y+62, r14	; 0x3e
    1bca:	ff ae       	std	Y+63, r15	; 0x3f
    1bcc:	21 97       	sbiw	r28, 0x01	; 1
    1bce:	64 01       	movw	r12, r8
    1bd0:	53 01       	movw	r10, r6
    1bd2:	01 2e       	mov	r0, r17
    1bd4:	04 c0       	rjmp	.+8      	; 0x1bde <__moddi3+0xafc>
    1bd6:	d6 94       	lsr	r13
    1bd8:	c7 94       	ror	r12
    1bda:	b7 94       	ror	r11
    1bdc:	a7 94       	ror	r10
    1bde:	0a 94       	dec	r0
    1be0:	d2 f7       	brpl	.-12     	; 0x1bd6 <__moddi3+0xaf4>
    1be2:	a4 01       	movw	r20, r8
    1be4:	93 01       	movw	r18, r6
    1be6:	e3 96       	adiw	r28, 0x33	; 51
    1be8:	0f ac       	ldd	r0, Y+63	; 0x3f
    1bea:	e3 97       	sbiw	r28, 0x33	; 51
    1bec:	04 c0       	rjmp	.+8      	; 0x1bf6 <__moddi3+0xb14>
    1bee:	22 0f       	add	r18, r18
    1bf0:	33 1f       	adc	r19, r19
    1bf2:	44 1f       	adc	r20, r20
    1bf4:	55 1f       	adc	r21, r21
    1bf6:	0a 94       	dec	r0
    1bf8:	d2 f7       	brpl	.-12     	; 0x1bee <__moddi3+0xb0c>
    1bfa:	e8 96       	adiw	r28, 0x38	; 56
    1bfc:	8c ad       	ldd	r24, Y+60	; 0x3c
    1bfe:	9d ad       	ldd	r25, Y+61	; 0x3d
    1c00:	ae ad       	ldd	r26, Y+62	; 0x3e
    1c02:	bf ad       	ldd	r27, Y+63	; 0x3f
    1c04:	e8 97       	sbiw	r28, 0x38	; 56
    1c06:	04 c0       	rjmp	.+8      	; 0x1c10 <__moddi3+0xb2e>
    1c08:	b6 95       	lsr	r27
    1c0a:	a7 95       	ror	r26
    1c0c:	97 95       	ror	r25
    1c0e:	87 95       	ror	r24
    1c10:	1a 95       	dec	r17
    1c12:	d2 f7       	brpl	.-12     	; 0x1c08 <__moddi3+0xb26>
    1c14:	7c 01       	movw	r14, r24
    1c16:	8d 01       	movw	r16, r26
    1c18:	e2 2a       	or	r14, r18
    1c1a:	f3 2a       	or	r15, r19
    1c1c:	04 2b       	or	r16, r20
    1c1e:	15 2b       	or	r17, r21
    1c20:	e9 ae       	std	Y+57, r14	; 0x39
    1c22:	fa ae       	std	Y+58, r15	; 0x3a
    1c24:	0b af       	std	Y+59, r16	; 0x3b
    1c26:	1c af       	std	Y+60, r17	; 0x3c
    1c28:	e8 96       	adiw	r28, 0x38	; 56
    1c2a:	0c ad       	ldd	r16, Y+60	; 0x3c
    1c2c:	1d ad       	ldd	r17, Y+61	; 0x3d
    1c2e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1c30:	3f ad       	ldd	r19, Y+63	; 0x3f
    1c32:	e8 97       	sbiw	r28, 0x38	; 56
    1c34:	e3 96       	adiw	r28, 0x33	; 51
    1c36:	0f ac       	ldd	r0, Y+63	; 0x3f
    1c38:	e3 97       	sbiw	r28, 0x33	; 51
    1c3a:	04 c0       	rjmp	.+8      	; 0x1c44 <__moddi3+0xb62>
    1c3c:	00 0f       	add	r16, r16
    1c3e:	11 1f       	adc	r17, r17
    1c40:	22 1f       	adc	r18, r18
    1c42:	33 1f       	adc	r19, r19
    1c44:	0a 94       	dec	r0
    1c46:	d2 f7       	brpl	.-12     	; 0x1c3c <__moddi3+0xb5a>
    1c48:	0d ab       	std	Y+53, r16	; 0x35
    1c4a:	1e ab       	std	Y+54, r17	; 0x36
    1c4c:	2f ab       	std	Y+55, r18	; 0x37
    1c4e:	38 af       	std	Y+56, r19	; 0x38
    1c50:	25 96       	adiw	r28, 0x05	; 5
    1c52:	2c ad       	ldd	r18, Y+60	; 0x3c
    1c54:	3d ad       	ldd	r19, Y+61	; 0x3d
    1c56:	4e ad       	ldd	r20, Y+62	; 0x3e
    1c58:	5f ad       	ldd	r21, Y+63	; 0x3f
    1c5a:	25 97       	sbiw	r28, 0x05	; 5
    1c5c:	3a 01       	movw	r6, r20
    1c5e:	88 24       	eor	r8, r8
    1c60:	99 24       	eor	r9, r9
    1c62:	40 70       	andi	r20, 0x00	; 0
    1c64:	50 70       	andi	r21, 0x00	; 0
    1c66:	a5 96       	adiw	r28, 0x25	; 37
    1c68:	2c af       	std	Y+60, r18	; 0x3c
    1c6a:	3d af       	std	Y+61, r19	; 0x3d
    1c6c:	4e af       	std	Y+62, r20	; 0x3e
    1c6e:	5f af       	std	Y+63, r21	; 0x3f
    1c70:	a5 97       	sbiw	r28, 0x25	; 37
    1c72:	c6 01       	movw	r24, r12
    1c74:	b5 01       	movw	r22, r10
    1c76:	a4 01       	movw	r20, r8
    1c78:	93 01       	movw	r18, r6
    1c7a:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
    1c7e:	7b 01       	movw	r14, r22
    1c80:	8c 01       	movw	r16, r24
    1c82:	c6 01       	movw	r24, r12
    1c84:	b5 01       	movw	r22, r10
    1c86:	a4 01       	movw	r20, r8
    1c88:	93 01       	movw	r18, r6
    1c8a:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
    1c8e:	c9 01       	movw	r24, r18
    1c90:	da 01       	movw	r26, r20
    1c92:	1c 01       	movw	r2, r24
    1c94:	2d 01       	movw	r4, r26
    1c96:	c2 01       	movw	r24, r4
    1c98:	b1 01       	movw	r22, r2
    1c9a:	a5 96       	adiw	r28, 0x25	; 37
    1c9c:	2c ad       	ldd	r18, Y+60	; 0x3c
    1c9e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ca0:	4e ad       	ldd	r20, Y+62	; 0x3e
    1ca2:	5f ad       	ldd	r21, Y+63	; 0x3f
    1ca4:	a5 97       	sbiw	r28, 0x25	; 37
    1ca6:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsi3>
    1caa:	9b 01       	movw	r18, r22
    1cac:	ac 01       	movw	r20, r24
    1cae:	87 01       	movw	r16, r14
    1cb0:	ff 24       	eor	r15, r15
    1cb2:	ee 24       	eor	r14, r14
    1cb4:	a9 ac       	ldd	r10, Y+57	; 0x39
    1cb6:	ba ac       	ldd	r11, Y+58	; 0x3a
    1cb8:	cb ac       	ldd	r12, Y+59	; 0x3b
    1cba:	dc ac       	ldd	r13, Y+60	; 0x3c
    1cbc:	c6 01       	movw	r24, r12
    1cbe:	aa 27       	eor	r26, r26
    1cc0:	bb 27       	eor	r27, r27
    1cc2:	57 01       	movw	r10, r14
    1cc4:	68 01       	movw	r12, r16
    1cc6:	a8 2a       	or	r10, r24
    1cc8:	b9 2a       	or	r11, r25
    1cca:	ca 2a       	or	r12, r26
    1ccc:	db 2a       	or	r13, r27
    1cce:	a2 16       	cp	r10, r18
    1cd0:	b3 06       	cpc	r11, r19
    1cd2:	c4 06       	cpc	r12, r20
    1cd4:	d5 06       	cpc	r13, r21
    1cd6:	10 f5       	brcc	.+68     	; 0x1d1c <__moddi3+0xc3a>
    1cd8:	08 94       	sec
    1cda:	21 08       	sbc	r2, r1
    1cdc:	31 08       	sbc	r3, r1
    1cde:	41 08       	sbc	r4, r1
    1ce0:	51 08       	sbc	r5, r1
    1ce2:	25 96       	adiw	r28, 0x05	; 5
    1ce4:	ec ac       	ldd	r14, Y+60	; 0x3c
    1ce6:	fd ac       	ldd	r15, Y+61	; 0x3d
    1ce8:	0e ad       	ldd	r16, Y+62	; 0x3e
    1cea:	1f ad       	ldd	r17, Y+63	; 0x3f
    1cec:	25 97       	sbiw	r28, 0x05	; 5
    1cee:	ae 0c       	add	r10, r14
    1cf0:	bf 1c       	adc	r11, r15
    1cf2:	c0 1e       	adc	r12, r16
    1cf4:	d1 1e       	adc	r13, r17
    1cf6:	ae 14       	cp	r10, r14
    1cf8:	bf 04       	cpc	r11, r15
    1cfa:	c0 06       	cpc	r12, r16
    1cfc:	d1 06       	cpc	r13, r17
    1cfe:	70 f0       	brcs	.+28     	; 0x1d1c <__moddi3+0xc3a>
    1d00:	a2 16       	cp	r10, r18
    1d02:	b3 06       	cpc	r11, r19
    1d04:	c4 06       	cpc	r12, r20
    1d06:	d5 06       	cpc	r13, r21
    1d08:	48 f4       	brcc	.+18     	; 0x1d1c <__moddi3+0xc3a>
    1d0a:	08 94       	sec
    1d0c:	21 08       	sbc	r2, r1
    1d0e:	31 08       	sbc	r3, r1
    1d10:	41 08       	sbc	r4, r1
    1d12:	51 08       	sbc	r5, r1
    1d14:	ae 0c       	add	r10, r14
    1d16:	bf 1c       	adc	r11, r15
    1d18:	c0 1e       	adc	r12, r16
    1d1a:	d1 1e       	adc	r13, r17
    1d1c:	a2 1a       	sub	r10, r18
    1d1e:	b3 0a       	sbc	r11, r19
    1d20:	c4 0a       	sbc	r12, r20
    1d22:	d5 0a       	sbc	r13, r21
    1d24:	c6 01       	movw	r24, r12
    1d26:	b5 01       	movw	r22, r10
    1d28:	a4 01       	movw	r20, r8
    1d2a:	93 01       	movw	r18, r6
    1d2c:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
    1d30:	7b 01       	movw	r14, r22
    1d32:	8c 01       	movw	r16, r24
    1d34:	c6 01       	movw	r24, r12
    1d36:	b5 01       	movw	r22, r10
    1d38:	a4 01       	movw	r20, r8
    1d3a:	93 01       	movw	r18, r6
    1d3c:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
    1d40:	c9 01       	movw	r24, r18
    1d42:	da 01       	movw	r26, r20
    1d44:	3c 01       	movw	r6, r24
    1d46:	4d 01       	movw	r8, r26
    1d48:	c4 01       	movw	r24, r8
    1d4a:	b3 01       	movw	r22, r6
    1d4c:	a5 96       	adiw	r28, 0x25	; 37
    1d4e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1d50:	3d ad       	ldd	r19, Y+61	; 0x3d
    1d52:	4e ad       	ldd	r20, Y+62	; 0x3e
    1d54:	5f ad       	ldd	r21, Y+63	; 0x3f
    1d56:	a5 97       	sbiw	r28, 0x25	; 37
    1d58:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsi3>
    1d5c:	9b 01       	movw	r18, r22
    1d5e:	ac 01       	movw	r20, r24
    1d60:	87 01       	movw	r16, r14
    1d62:	ff 24       	eor	r15, r15
    1d64:	ee 24       	eor	r14, r14
    1d66:	89 ad       	ldd	r24, Y+57	; 0x39
    1d68:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d6a:	ab ad       	ldd	r26, Y+59	; 0x3b
    1d6c:	bc ad       	ldd	r27, Y+60	; 0x3c
    1d6e:	a0 70       	andi	r26, 0x00	; 0
    1d70:	b0 70       	andi	r27, 0x00	; 0
    1d72:	57 01       	movw	r10, r14
    1d74:	68 01       	movw	r12, r16
    1d76:	a8 2a       	or	r10, r24
    1d78:	b9 2a       	or	r11, r25
    1d7a:	ca 2a       	or	r12, r26
    1d7c:	db 2a       	or	r13, r27
    1d7e:	a2 16       	cp	r10, r18
    1d80:	b3 06       	cpc	r11, r19
    1d82:	c4 06       	cpc	r12, r20
    1d84:	d5 06       	cpc	r13, r21
    1d86:	10 f5       	brcc	.+68     	; 0x1dcc <__moddi3+0xcea>
    1d88:	08 94       	sec
    1d8a:	61 08       	sbc	r6, r1
    1d8c:	71 08       	sbc	r7, r1
    1d8e:	81 08       	sbc	r8, r1
    1d90:	91 08       	sbc	r9, r1
    1d92:	25 96       	adiw	r28, 0x05	; 5
    1d94:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d96:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d98:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d9a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d9c:	25 97       	sbiw	r28, 0x05	; 5
    1d9e:	a6 0e       	add	r10, r22
    1da0:	b7 1e       	adc	r11, r23
    1da2:	c8 1e       	adc	r12, r24
    1da4:	d9 1e       	adc	r13, r25
    1da6:	a6 16       	cp	r10, r22
    1da8:	b7 06       	cpc	r11, r23
    1daa:	c8 06       	cpc	r12, r24
    1dac:	d9 06       	cpc	r13, r25
    1dae:	70 f0       	brcs	.+28     	; 0x1dcc <__moddi3+0xcea>
    1db0:	a2 16       	cp	r10, r18
    1db2:	b3 06       	cpc	r11, r19
    1db4:	c4 06       	cpc	r12, r20
    1db6:	d5 06       	cpc	r13, r21
    1db8:	48 f4       	brcc	.+18     	; 0x1dcc <__moddi3+0xcea>
    1dba:	08 94       	sec
    1dbc:	61 08       	sbc	r6, r1
    1dbe:	71 08       	sbc	r7, r1
    1dc0:	81 08       	sbc	r8, r1
    1dc2:	91 08       	sbc	r9, r1
    1dc4:	a6 0e       	add	r10, r22
    1dc6:	b7 1e       	adc	r11, r23
    1dc8:	c8 1e       	adc	r12, r24
    1dca:	d9 1e       	adc	r13, r25
    1dcc:	d6 01       	movw	r26, r12
    1dce:	c5 01       	movw	r24, r10
    1dd0:	82 1b       	sub	r24, r18
    1dd2:	93 0b       	sbc	r25, r19
    1dd4:	a4 0b       	sbc	r26, r20
    1dd6:	b5 0b       	sbc	r27, r21
    1dd8:	89 ab       	std	Y+49, r24	; 0x31
    1dda:	9a ab       	std	Y+50, r25	; 0x32
    1ddc:	ab ab       	std	Y+51, r26	; 0x33
    1dde:	bc ab       	std	Y+52, r27	; 0x34
    1de0:	d1 01       	movw	r26, r2
    1de2:	99 27       	eor	r25, r25
    1de4:	88 27       	eor	r24, r24
    1de6:	84 01       	movw	r16, r8
    1de8:	73 01       	movw	r14, r6
    1dea:	e8 2a       	or	r14, r24
    1dec:	f9 2a       	or	r15, r25
    1dee:	0a 2b       	or	r16, r26
    1df0:	1b 2b       	or	r17, r27
    1df2:	8f ef       	ldi	r24, 0xFF	; 255
    1df4:	a8 2e       	mov	r10, r24
    1df6:	8f ef       	ldi	r24, 0xFF	; 255
    1df8:	b8 2e       	mov	r11, r24
    1dfa:	c1 2c       	mov	r12, r1
    1dfc:	d1 2c       	mov	r13, r1
    1dfe:	ae 20       	and	r10, r14
    1e00:	bf 20       	and	r11, r15
    1e02:	c0 22       	and	r12, r16
    1e04:	d1 22       	and	r13, r17
    1e06:	78 01       	movw	r14, r16
    1e08:	00 27       	eor	r16, r16
    1e0a:	11 27       	eor	r17, r17
    1e0c:	21 96       	adiw	r28, 0x01	; 1
    1e0e:	6c ac       	ldd	r6, Y+60	; 0x3c
    1e10:	7d ac       	ldd	r7, Y+61	; 0x3d
    1e12:	8e ac       	ldd	r8, Y+62	; 0x3e
    1e14:	9f ac       	ldd	r9, Y+63	; 0x3f
    1e16:	21 97       	sbiw	r28, 0x01	; 1
    1e18:	2f ef       	ldi	r18, 0xFF	; 255
    1e1a:	3f ef       	ldi	r19, 0xFF	; 255
    1e1c:	40 e0       	ldi	r20, 0x00	; 0
    1e1e:	50 e0       	ldi	r21, 0x00	; 0
    1e20:	62 22       	and	r6, r18
    1e22:	73 22       	and	r7, r19
    1e24:	84 22       	and	r8, r20
    1e26:	95 22       	and	r9, r21
    1e28:	21 96       	adiw	r28, 0x01	; 1
    1e2a:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e2c:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e2e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e30:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e32:	21 97       	sbiw	r28, 0x01	; 1
    1e34:	ac 01       	movw	r20, r24
    1e36:	66 27       	eor	r22, r22
    1e38:	77 27       	eor	r23, r23
    1e3a:	ad 96       	adiw	r28, 0x2d	; 45
    1e3c:	4c af       	std	Y+60, r20	; 0x3c
    1e3e:	5d af       	std	Y+61, r21	; 0x3d
    1e40:	6e af       	std	Y+62, r22	; 0x3e
    1e42:	7f af       	std	Y+63, r23	; 0x3f
    1e44:	ad 97       	sbiw	r28, 0x2d	; 45
    1e46:	c6 01       	movw	r24, r12
    1e48:	b5 01       	movw	r22, r10
    1e4a:	a4 01       	movw	r20, r8
    1e4c:	93 01       	movw	r18, r6
    1e4e:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsi3>
    1e52:	a9 96       	adiw	r28, 0x29	; 41
    1e54:	6c af       	std	Y+60, r22	; 0x3c
    1e56:	7d af       	std	Y+61, r23	; 0x3d
    1e58:	8e af       	std	Y+62, r24	; 0x3e
    1e5a:	9f af       	std	Y+63, r25	; 0x3f
    1e5c:	a9 97       	sbiw	r28, 0x29	; 41
    1e5e:	c6 01       	movw	r24, r12
    1e60:	b5 01       	movw	r22, r10
    1e62:	ad 96       	adiw	r28, 0x2d	; 45
    1e64:	2c ad       	ldd	r18, Y+60	; 0x3c
    1e66:	3d ad       	ldd	r19, Y+61	; 0x3d
    1e68:	4e ad       	ldd	r20, Y+62	; 0x3e
    1e6a:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e6c:	ad 97       	sbiw	r28, 0x2d	; 45
    1e6e:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsi3>
    1e72:	1b 01       	movw	r2, r22
    1e74:	2c 01       	movw	r4, r24
    1e76:	c8 01       	movw	r24, r16
    1e78:	b7 01       	movw	r22, r14
    1e7a:	a4 01       	movw	r20, r8
    1e7c:	93 01       	movw	r18, r6
    1e7e:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsi3>
    1e82:	5b 01       	movw	r10, r22
    1e84:	6c 01       	movw	r12, r24
    1e86:	c8 01       	movw	r24, r16
    1e88:	b7 01       	movw	r22, r14
    1e8a:	ad 96       	adiw	r28, 0x2d	; 45
    1e8c:	2c ad       	ldd	r18, Y+60	; 0x3c
    1e8e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1e90:	4e ad       	ldd	r20, Y+62	; 0x3e
    1e92:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e94:	ad 97       	sbiw	r28, 0x2d	; 45
    1e96:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsi3>
    1e9a:	7b 01       	movw	r14, r22
    1e9c:	8c 01       	movw	r16, r24
    1e9e:	a6 01       	movw	r20, r12
    1ea0:	95 01       	movw	r18, r10
    1ea2:	22 0d       	add	r18, r2
    1ea4:	33 1d       	adc	r19, r3
    1ea6:	44 1d       	adc	r20, r4
    1ea8:	55 1d       	adc	r21, r5
    1eaa:	a9 96       	adiw	r28, 0x29	; 41
    1eac:	6c ac       	ldd	r6, Y+60	; 0x3c
    1eae:	7d ac       	ldd	r7, Y+61	; 0x3d
    1eb0:	8e ac       	ldd	r8, Y+62	; 0x3e
    1eb2:	9f ac       	ldd	r9, Y+63	; 0x3f
    1eb4:	a9 97       	sbiw	r28, 0x29	; 41
    1eb6:	c4 01       	movw	r24, r8
    1eb8:	aa 27       	eor	r26, r26
    1eba:	bb 27       	eor	r27, r27
    1ebc:	28 0f       	add	r18, r24
    1ebe:	39 1f       	adc	r19, r25
    1ec0:	4a 1f       	adc	r20, r26
    1ec2:	5b 1f       	adc	r21, r27
    1ec4:	2a 15       	cp	r18, r10
    1ec6:	3b 05       	cpc	r19, r11
    1ec8:	4c 05       	cpc	r20, r12
    1eca:	5d 05       	cpc	r21, r13
    1ecc:	48 f4       	brcc	.+18     	; 0x1ee0 <__moddi3+0xdfe>
    1ece:	81 2c       	mov	r8, r1
    1ed0:	91 2c       	mov	r9, r1
    1ed2:	e1 e0       	ldi	r30, 0x01	; 1
    1ed4:	ae 2e       	mov	r10, r30
    1ed6:	b1 2c       	mov	r11, r1
    1ed8:	e8 0c       	add	r14, r8
    1eda:	f9 1c       	adc	r15, r9
    1edc:	0a 1d       	adc	r16, r10
    1ede:	1b 1d       	adc	r17, r11
    1ee0:	ca 01       	movw	r24, r20
    1ee2:	aa 27       	eor	r26, r26
    1ee4:	bb 27       	eor	r27, r27
    1ee6:	57 01       	movw	r10, r14
    1ee8:	68 01       	movw	r12, r16
    1eea:	a8 0e       	add	r10, r24
    1eec:	b9 1e       	adc	r11, r25
    1eee:	ca 1e       	adc	r12, r26
    1ef0:	db 1e       	adc	r13, r27
    1ef2:	a9 01       	movw	r20, r18
    1ef4:	33 27       	eor	r19, r19
    1ef6:	22 27       	eor	r18, r18
    1ef8:	a9 96       	adiw	r28, 0x29	; 41
    1efa:	8c ad       	ldd	r24, Y+60	; 0x3c
    1efc:	9d ad       	ldd	r25, Y+61	; 0x3d
    1efe:	ae ad       	ldd	r26, Y+62	; 0x3e
    1f00:	bf ad       	ldd	r27, Y+63	; 0x3f
    1f02:	a9 97       	sbiw	r28, 0x29	; 41
    1f04:	a0 70       	andi	r26, 0x00	; 0
    1f06:	b0 70       	andi	r27, 0x00	; 0
    1f08:	28 0f       	add	r18, r24
    1f0a:	39 1f       	adc	r19, r25
    1f0c:	4a 1f       	adc	r20, r26
    1f0e:	5b 1f       	adc	r21, r27
    1f10:	e9 a8       	ldd	r14, Y+49	; 0x31
    1f12:	fa a8       	ldd	r15, Y+50	; 0x32
    1f14:	0b a9       	ldd	r16, Y+51	; 0x33
    1f16:	1c a9       	ldd	r17, Y+52	; 0x34
    1f18:	ea 14       	cp	r14, r10
    1f1a:	fb 04       	cpc	r15, r11
    1f1c:	0c 05       	cpc	r16, r12
    1f1e:	1d 05       	cpc	r17, r13
    1f20:	70 f0       	brcs	.+28     	; 0x1f3e <__moddi3+0xe5c>
    1f22:	ae 14       	cp	r10, r14
    1f24:	bf 04       	cpc	r11, r15
    1f26:	c0 06       	cpc	r12, r16
    1f28:	d1 06       	cpc	r13, r17
    1f2a:	89 f5       	brne	.+98     	; 0x1f8e <__moddi3+0xeac>
    1f2c:	6d a9       	ldd	r22, Y+53	; 0x35
    1f2e:	7e a9       	ldd	r23, Y+54	; 0x36
    1f30:	8f a9       	ldd	r24, Y+55	; 0x37
    1f32:	98 ad       	ldd	r25, Y+56	; 0x38
    1f34:	62 17       	cp	r22, r18
    1f36:	73 07       	cpc	r23, r19
    1f38:	84 07       	cpc	r24, r20
    1f3a:	95 07       	cpc	r25, r21
    1f3c:	40 f5       	brcc	.+80     	; 0x1f8e <__moddi3+0xeac>
    1f3e:	da 01       	movw	r26, r20
    1f40:	c9 01       	movw	r24, r18
    1f42:	21 96       	adiw	r28, 0x01	; 1
    1f44:	6c ac       	ldd	r6, Y+60	; 0x3c
    1f46:	7d ac       	ldd	r7, Y+61	; 0x3d
    1f48:	8e ac       	ldd	r8, Y+62	; 0x3e
    1f4a:	9f ac       	ldd	r9, Y+63	; 0x3f
    1f4c:	21 97       	sbiw	r28, 0x01	; 1
    1f4e:	86 19       	sub	r24, r6
    1f50:	97 09       	sbc	r25, r7
    1f52:	a8 09       	sbc	r26, r8
    1f54:	b9 09       	sbc	r27, r9
    1f56:	25 96       	adiw	r28, 0x05	; 5
    1f58:	ec ac       	ldd	r14, Y+60	; 0x3c
    1f5a:	fd ac       	ldd	r15, Y+61	; 0x3d
    1f5c:	0e ad       	ldd	r16, Y+62	; 0x3e
    1f5e:	1f ad       	ldd	r17, Y+63	; 0x3f
    1f60:	25 97       	sbiw	r28, 0x05	; 5
    1f62:	ae 18       	sub	r10, r14
    1f64:	bf 08       	sbc	r11, r15
    1f66:	c0 0a       	sbc	r12, r16
    1f68:	d1 0a       	sbc	r13, r17
    1f6a:	ee 24       	eor	r14, r14
    1f6c:	ff 24       	eor	r15, r15
    1f6e:	87 01       	movw	r16, r14
    1f70:	28 17       	cp	r18, r24
    1f72:	39 07       	cpc	r19, r25
    1f74:	4a 07       	cpc	r20, r26
    1f76:	5b 07       	cpc	r21, r27
    1f78:	28 f4       	brcc	.+10     	; 0x1f84 <__moddi3+0xea2>
    1f7a:	21 e0       	ldi	r18, 0x01	; 1
    1f7c:	e2 2e       	mov	r14, r18
    1f7e:	f1 2c       	mov	r15, r1
    1f80:	01 2d       	mov	r16, r1
    1f82:	11 2d       	mov	r17, r1
    1f84:	ae 18       	sub	r10, r14
    1f86:	bf 08       	sbc	r11, r15
    1f88:	c0 0a       	sbc	r12, r16
    1f8a:	d1 0a       	sbc	r13, r17
    1f8c:	02 c0       	rjmp	.+4      	; 0x1f92 <__moddi3+0xeb0>
    1f8e:	da 01       	movw	r26, r20
    1f90:	c9 01       	movw	r24, r18
    1f92:	6d a8       	ldd	r6, Y+53	; 0x35
    1f94:	7e a8       	ldd	r7, Y+54	; 0x36
    1f96:	8f a8       	ldd	r8, Y+55	; 0x37
    1f98:	98 ac       	ldd	r9, Y+56	; 0x38
    1f9a:	68 1a       	sub	r6, r24
    1f9c:	79 0a       	sbc	r7, r25
    1f9e:	8a 0a       	sbc	r8, r26
    1fa0:	9b 0a       	sbc	r9, r27
    1fa2:	09 a9       	ldd	r16, Y+49	; 0x31
    1fa4:	1a a9       	ldd	r17, Y+50	; 0x32
    1fa6:	2b a9       	ldd	r18, Y+51	; 0x33
    1fa8:	3c a9       	ldd	r19, Y+52	; 0x34
    1faa:	0a 19       	sub	r16, r10
    1fac:	1b 09       	sbc	r17, r11
    1fae:	2c 09       	sbc	r18, r12
    1fb0:	3d 09       	sbc	r19, r13
    1fb2:	58 01       	movw	r10, r16
    1fb4:	69 01       	movw	r12, r18
    1fb6:	22 24       	eor	r2, r2
    1fb8:	33 24       	eor	r3, r3
    1fba:	21 01       	movw	r4, r2
    1fbc:	2d a9       	ldd	r18, Y+53	; 0x35
    1fbe:	3e a9       	ldd	r19, Y+54	; 0x36
    1fc0:	4f a9       	ldd	r20, Y+55	; 0x37
    1fc2:	58 ad       	ldd	r21, Y+56	; 0x38
    1fc4:	26 15       	cp	r18, r6
    1fc6:	37 05       	cpc	r19, r7
    1fc8:	48 05       	cpc	r20, r8
    1fca:	59 05       	cpc	r21, r9
    1fcc:	28 f4       	brcc	.+10     	; 0x1fd8 <__moddi3+0xef6>
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	28 2e       	mov	r2, r24
    1fd2:	31 2c       	mov	r3, r1
    1fd4:	41 2c       	mov	r4, r1
    1fd6:	51 2c       	mov	r5, r1
    1fd8:	86 01       	movw	r16, r12
    1fda:	75 01       	movw	r14, r10
    1fdc:	e2 18       	sub	r14, r2
    1fde:	f3 08       	sbc	r15, r3
    1fe0:	04 09       	sbc	r16, r4
    1fe2:	15 09       	sbc	r17, r5
    1fe4:	a8 01       	movw	r20, r16
    1fe6:	97 01       	movw	r18, r14
    1fe8:	e2 96       	adiw	r28, 0x32	; 50
    1fea:	0f ac       	ldd	r0, Y+63	; 0x3f
    1fec:	e2 97       	sbiw	r28, 0x32	; 50
    1fee:	04 c0       	rjmp	.+8      	; 0x1ff8 <__moddi3+0xf16>
    1ff0:	22 0f       	add	r18, r18
    1ff2:	33 1f       	adc	r19, r19
    1ff4:	44 1f       	adc	r20, r20
    1ff6:	55 1f       	adc	r21, r21
    1ff8:	0a 94       	dec	r0
    1ffa:	d2 f7       	brpl	.-12     	; 0x1ff0 <__moddi3+0xf0e>
    1ffc:	d4 01       	movw	r26, r8
    1ffe:	c3 01       	movw	r24, r6
    2000:	e3 96       	adiw	r28, 0x33	; 51
    2002:	0f ac       	ldd	r0, Y+63	; 0x3f
    2004:	e3 97       	sbiw	r28, 0x33	; 51
    2006:	04 c0       	rjmp	.+8      	; 0x2010 <__moddi3+0xf2e>
    2008:	b6 95       	lsr	r27
    200a:	a7 95       	ror	r26
    200c:	97 95       	ror	r25
    200e:	87 95       	ror	r24
    2010:	0a 94       	dec	r0
    2012:	d2 f7       	brpl	.-12     	; 0x2008 <__moddi3+0xf26>
    2014:	28 2b       	or	r18, r24
    2016:	39 2b       	or	r19, r25
    2018:	4a 2b       	or	r20, r26
    201a:	5b 2b       	or	r21, r27
    201c:	29 a7       	std	Y+41, r18	; 0x29
    201e:	3a a7       	std	Y+42, r19	; 0x2a
    2020:	4b a7       	std	Y+43, r20	; 0x2b
    2022:	5c a7       	std	Y+44, r21	; 0x2c
    2024:	e3 96       	adiw	r28, 0x33	; 51
    2026:	0f ac       	ldd	r0, Y+63	; 0x3f
    2028:	e3 97       	sbiw	r28, 0x33	; 51
    202a:	04 c0       	rjmp	.+8      	; 0x2034 <__moddi3+0xf52>
    202c:	16 95       	lsr	r17
    202e:	07 95       	ror	r16
    2030:	f7 94       	ror	r15
    2032:	e7 94       	ror	r14
    2034:	0a 94       	dec	r0
    2036:	d2 f7       	brpl	.-12     	; 0x202c <__moddi3+0xf4a>
    2038:	ed a6       	std	Y+45, r14	; 0x2d
    203a:	fe a6       	std	Y+46, r15	; 0x2e
    203c:	0f a7       	std	Y+47, r16	; 0x2f
    203e:	18 ab       	std	Y+48, r17	; 0x30
    2040:	29 8b       	std	Y+17, r18	; 0x11
    2042:	8a a5       	ldd	r24, Y+42	; 0x2a
    2044:	8a 8b       	std	Y+18, r24	; 0x12
    2046:	8b a5       	ldd	r24, Y+43	; 0x2b
    2048:	8b 8b       	std	Y+19, r24	; 0x13
    204a:	8c a5       	ldd	r24, Y+44	; 0x2c
    204c:	8c 8b       	std	Y+20, r24	; 0x14
    204e:	ed 8a       	std	Y+21, r14	; 0x15
    2050:	8e a5       	ldd	r24, Y+46	; 0x2e
    2052:	8e 8b       	std	Y+22, r24	; 0x16
    2054:	8f a5       	ldd	r24, Y+47	; 0x2f
    2056:	8f 8b       	std	Y+23, r24	; 0x17
    2058:	88 a9       	ldd	r24, Y+48	; 0x30
    205a:	88 8f       	std	Y+24, r24	; 0x18
    205c:	e1 96       	adiw	r28, 0x31	; 49
    205e:	4c ad       	ldd	r20, Y+60	; 0x3c
    2060:	5d ad       	ldd	r21, Y+61	; 0x3d
    2062:	6e ad       	ldd	r22, Y+62	; 0x3e
    2064:	7f ad       	ldd	r23, Y+63	; 0x3f
    2066:	e1 97       	sbiw	r28, 0x31	; 49
    2068:	41 15       	cp	r20, r1
    206a:	51 05       	cpc	r21, r1
    206c:	61 05       	cpc	r22, r1
    206e:	71 05       	cpc	r23, r1
    2070:	09 f4       	brne	.+2      	; 0x2074 <__moddi3+0xf92>
    2072:	67 c0       	rjmp	.+206    	; 0x2142 <__moddi3+0x1060>
    2074:	89 89       	ldd	r24, Y+17	; 0x11
    2076:	2a 89       	ldd	r18, Y+18	; 0x12
    2078:	3b 89       	ldd	r19, Y+19	; 0x13
    207a:	4c 89       	ldd	r20, Y+20	; 0x14
    207c:	5d 89       	ldd	r21, Y+21	; 0x15
    207e:	ae 89       	ldd	r26, Y+22	; 0x16
    2080:	bf 89       	ldd	r27, Y+23	; 0x17
    2082:	18 8d       	ldd	r17, Y+24	; 0x18
    2084:	f8 2f       	mov	r31, r24
    2086:	f1 95       	neg	r31
    2088:	91 e0       	ldi	r25, 0x01	; 1
    208a:	1f 16       	cp	r1, r31
    208c:	08 f0       	brcs	.+2      	; 0x2090 <__moddi3+0xfae>
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	82 2f       	mov	r24, r18
    2092:	81 95       	neg	r24
    2094:	21 e0       	ldi	r18, 0x01	; 1
    2096:	18 16       	cp	r1, r24
    2098:	08 f0       	brcs	.+2      	; 0x209c <__moddi3+0xfba>
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	e8 2f       	mov	r30, r24
    209e:	e9 1b       	sub	r30, r25
    20a0:	91 e0       	ldi	r25, 0x01	; 1
    20a2:	8e 17       	cp	r24, r30
    20a4:	08 f0       	brcs	.+2      	; 0x20a8 <__moddi3+0xfc6>
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	29 2b       	or	r18, r25
    20aa:	83 2f       	mov	r24, r19
    20ac:	81 95       	neg	r24
    20ae:	31 e0       	ldi	r19, 0x01	; 1
    20b0:	18 16       	cp	r1, r24
    20b2:	08 f0       	brcs	.+2      	; 0x20b6 <__moddi3+0xfd4>
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	78 2f       	mov	r23, r24
    20b8:	72 1b       	sub	r23, r18
    20ba:	91 e0       	ldi	r25, 0x01	; 1
    20bc:	87 17       	cp	r24, r23
    20be:	08 f0       	brcs	.+2      	; 0x20c2 <__moddi3+0xfe0>
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	39 2b       	or	r19, r25
    20c4:	84 2f       	mov	r24, r20
    20c6:	81 95       	neg	r24
    20c8:	21 e0       	ldi	r18, 0x01	; 1
    20ca:	18 16       	cp	r1, r24
    20cc:	08 f0       	brcs	.+2      	; 0x20d0 <__moddi3+0xfee>
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	68 2f       	mov	r22, r24
    20d2:	63 1b       	sub	r22, r19
    20d4:	91 e0       	ldi	r25, 0x01	; 1
    20d6:	86 17       	cp	r24, r22
    20d8:	08 f0       	brcs	.+2      	; 0x20dc <__moddi3+0xffa>
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	29 2b       	or	r18, r25
    20de:	85 2f       	mov	r24, r21
    20e0:	81 95       	neg	r24
    20e2:	31 e0       	ldi	r19, 0x01	; 1
    20e4:	18 16       	cp	r1, r24
    20e6:	08 f0       	brcs	.+2      	; 0x20ea <__moddi3+0x1008>
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	58 2f       	mov	r21, r24
    20ec:	52 1b       	sub	r21, r18
    20ee:	91 e0       	ldi	r25, 0x01	; 1
    20f0:	85 17       	cp	r24, r21
    20f2:	08 f0       	brcs	.+2      	; 0x20f6 <__moddi3+0x1014>
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	39 2b       	or	r19, r25
    20f8:	8a 2f       	mov	r24, r26
    20fa:	81 95       	neg	r24
    20fc:	21 e0       	ldi	r18, 0x01	; 1
    20fe:	18 16       	cp	r1, r24
    2100:	08 f0       	brcs	.+2      	; 0x2104 <__moddi3+0x1022>
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	48 2f       	mov	r20, r24
    2106:	43 1b       	sub	r20, r19
    2108:	91 e0       	ldi	r25, 0x01	; 1
    210a:	84 17       	cp	r24, r20
    210c:	08 f0       	brcs	.+2      	; 0x2110 <__moddi3+0x102e>
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	29 2b       	or	r18, r25
    2112:	8b 2f       	mov	r24, r27
    2114:	81 95       	neg	r24
    2116:	91 e0       	ldi	r25, 0x01	; 1
    2118:	18 16       	cp	r1, r24
    211a:	08 f0       	brcs	.+2      	; 0x211e <__moddi3+0x103c>
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	38 2f       	mov	r19, r24
    2120:	32 1b       	sub	r19, r18
    2122:	21 e0       	ldi	r18, 0x01	; 1
    2124:	83 17       	cp	r24, r19
    2126:	08 f0       	brcs	.+2      	; 0x212a <__moddi3+0x1048>
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	92 2b       	or	r25, r18
    212c:	81 2f       	mov	r24, r17
    212e:	81 95       	neg	r24
    2130:	89 1b       	sub	r24, r25
    2132:	f9 8b       	std	Y+17, r31	; 0x11
    2134:	ea 8b       	std	Y+18, r30	; 0x12
    2136:	7b 8b       	std	Y+19, r23	; 0x13
    2138:	6c 8b       	std	Y+20, r22	; 0x14
    213a:	5d 8b       	std	Y+21, r21	; 0x15
    213c:	4e 8b       	std	Y+22, r20	; 0x16
    213e:	3f 8b       	std	Y+23, r19	; 0x17
    2140:	88 8f       	std	Y+24, r24	; 0x18
    2142:	29 89       	ldd	r18, Y+17	; 0x11
    2144:	3a 89       	ldd	r19, Y+18	; 0x12
    2146:	4b 89       	ldd	r20, Y+19	; 0x13
    2148:	5c 89       	ldd	r21, Y+20	; 0x14
    214a:	6d 89       	ldd	r22, Y+21	; 0x15
    214c:	7e 89       	ldd	r23, Y+22	; 0x16
    214e:	8f 89       	ldd	r24, Y+23	; 0x17
    2150:	98 8d       	ldd	r25, Y+24	; 0x18
    2152:	c9 58       	subi	r28, 0x89	; 137
    2154:	df 4f       	sbci	r29, 0xFF	; 255
    2156:	e2 e1       	ldi	r30, 0x12	; 18
    2158:	0c 94 43 1e 	jmp	0x3c86	; 0x3c86 <__epilogue_restores__>

0000215c <UART_voidTransmitByte_synch>:
UINT8_t UART_voidRecieverByte_synch(void){

}*/
void UART_voidTransmitByte_synch(UINT8_t Copy_data){

}
    215c:	08 95       	ret

0000215e <UART_u8GetUDRValue>:

UINT8_t UART_u8GetUDRValue(void){
	UINT8_t dataReceived = 0;
	while(GET_BIT(UCSRA, 7) != 1);
    215e:	eb e2       	ldi	r30, 0x2B	; 43
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	80 81       	ld	r24, Z
    2164:	88 23       	and	r24, r24
    2166:	ec f7       	brge	.-6      	; 0x2162 <UART_u8GetUDRValue+0x4>
	dataReceived = UDR;
    2168:	8c b1       	in	r24, 0x0c	; 12
	return dataReceived;
}
    216a:	08 95       	ret

0000216c <UART_voidSetBaudRate>:
void UART_voidSetBaudRate(UINT32_t Copy_u32BoudRate){
    216c:	9b 01       	movw	r18, r22
    216e:	ac 01       	movw	r20, r24
	UINT16_t UBRR_Val = 0;
	UBRR_Val = ((16000000) / (16 * Copy_u32BoudRate)) - 1;
    2170:	22 0f       	add	r18, r18
    2172:	33 1f       	adc	r19, r19
    2174:	44 1f       	adc	r20, r20
    2176:	55 1f       	adc	r21, r21
    2178:	22 0f       	add	r18, r18
    217a:	33 1f       	adc	r19, r19
    217c:	44 1f       	adc	r20, r20
    217e:	55 1f       	adc	r21, r21
    2180:	22 0f       	add	r18, r18
    2182:	33 1f       	adc	r19, r19
    2184:	44 1f       	adc	r20, r20
    2186:	55 1f       	adc	r21, r21
    2188:	22 0f       	add	r18, r18
    218a:	33 1f       	adc	r19, r19
    218c:	44 1f       	adc	r20, r20
    218e:	55 1f       	adc	r21, r21
    2190:	60 e0       	ldi	r22, 0x00	; 0
    2192:	74 e2       	ldi	r23, 0x24	; 36
    2194:	84 ef       	ldi	r24, 0xF4	; 244
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodsi4>
    219c:	21 50       	subi	r18, 0x01	; 1
    219e:	30 40       	sbci	r19, 0x00	; 0
	UBRRL = UBRR_Val;
    21a0:	29 b9       	out	0x09, r18	; 9
	UBRRH = UBRR_Val >> 8;
    21a2:	30 bd       	out	0x20, r19	; 32
}
    21a4:	08 95       	ret

000021a6 <UART_voidSendString>:

void UART_voidSendString (const UINT8_t Copy_StrPtr){
	UDR = Copy_StrPtr;
    21a6:	8c b9       	out	0x0c, r24	; 12
	while(GET_BIT(UCSRA, 6) != 1);
    21a8:	eb e2       	ldi	r30, 0x2B	; 43
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	86 ff       	sbrs	r24, 6
    21b0:	fd cf       	rjmp	.-6      	; 0x21ac <UART_voidSendString+0x6>
}
    21b2:	08 95       	ret

000021b4 <UART_voidRecString>:
void UART_voidRecString (UINT8_t *Copy_StrPtr){

}
    21b4:	08 95       	ret

000021b6 <UART_voidInit>:
#include "UART_Private.h"
#include "UART_Config.h"
#include "UART_Interface.h"
#include "DIO_Interface.h"

void UART_voidInit(){
    21b6:	df 93       	push	r29
    21b8:	cf 93       	push	r28
    21ba:	00 d0       	rcall	.+0      	; 0x21bc <UART_voidInit+0x6>
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62

volatile UINT8_t UCSRC_MAP=0,UCSRB_MAP=0;
    21c0:	19 82       	std	Y+1, r1	; 0x01
    21c2:	1a 82       	std	Y+2, r1	; 0x02

DIO_SetPin_Direction(DIO_PORTD,DIO_PIN0,DIO_INPUT);//RX as input
    21c4:	83 e0       	ldi	r24, 0x03	; 3
    21c6:	60 e0       	ldi	r22, 0x00	; 0
    21c8:	40 e0       	ldi	r20, 0x00	; 0
    21ca:	0e 94 04 12 	call	0x2408	; 0x2408 <DIO_SetPin_Direction>
DIO_SetPin_Direction(DIO_PORTD,DIO_PIN1,DIO_OUTPUT);//TX as output
    21ce:	83 e0       	ldi	r24, 0x03	; 3
    21d0:	61 e0       	ldi	r22, 0x01	; 1
    21d2:	41 e0       	ldi	r20, 0x01	; 1
    21d4:	0e 94 04 12 	call	0x2408	; 0x2408 <DIO_SetPin_Direction>

SET_BIT(UCSRC_MAP,7);
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	80 68       	ori	r24, 0x80	; 128
    21dc:	89 83       	std	Y+1, r24	; 0x01

#if RXEN == RX_EN
SET_BIT(UCSRB_MAP,4);
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	80 61       	ori	r24, 0x10	; 16
    21e2:	8a 83       	std	Y+2, r24	; 0x02
#else
#error "ERROR"
#endif /*Receiver MODE*/

#if TXEN == TX_EN
SET_BIT(UCSRB_MAP,3);
    21e4:	8a 81       	ldd	r24, Y+2	; 0x02
    21e6:	88 60       	ori	r24, 0x08	; 8
    21e8:	8a 83       	std	Y+2, r24	; 0x02
#endif /*Transmitter MODE*/



#if	UMSEL == USART_Asynch
CLR_BIT(UCSRC_MAP,6);
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	8f 7b       	andi	r24, 0xBF	; 191
    21ee:	89 83       	std	Y+1, r24	; 0x01
#else
#error "ERROR"
#endif /*Sync Mode Select*/

#if	UPM == PM_DS
CLR_BIT(UCSRC_MAP,5);
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
    21f2:	8f 7d       	andi	r24, 0xDF	; 223
    21f4:	89 83       	std	Y+1, r24	; 0x01
CLR_BIT(UCSRC_MAP,4);
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	8f 7e       	andi	r24, 0xEF	; 239
    21fa:	89 83       	std	Y+1, r24	; 0x01

#error "ERROR"
#endif /*Parity Mode Select*/

#if	USBS == SB_1BIT
CLR_BIT(UCSRC_MAP,3);
    21fc:	89 81       	ldd	r24, Y+1	; 0x01
    21fe:	87 7f       	andi	r24, 0xF7	; 247
    2200:	89 83       	std	Y+1, r24	; 0x01
#elif UCSZ == UCSZ_7BIT
CLR_BIT(UCSRB_MAP,2);
SET_BIT(UCSRC_MAP,2);
CLR_BIT(UCSRC_MAP,1);
#elif UCSZ == UCSZ_8BIT
CLR_BIT(UCSRB_MAP,2);
    2202:	8a 81       	ldd	r24, Y+2	; 0x02
    2204:	8b 7f       	andi	r24, 0xFB	; 251
    2206:	8a 83       	std	Y+2, r24	; 0x02
SET_BIT(UCSRC_MAP,2);
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	84 60       	ori	r24, 0x04	; 4
    220c:	89 83       	std	Y+1, r24	; 0x01
SET_BIT(UCSRC_MAP,1);
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	82 60       	ori	r24, 0x02	; 2
    2212:	89 83       	std	Y+1, r24	; 0x01
#endif /*Character Size Select*/

#if RXCIE == RXCI_EN
SET_BIT(UCSRA_MAP,7);
#elif RXCIE == RXCI_DS
CLR_BIT(UCSRB_MAP,7);
    2214:	8a 81       	ldd	r24, Y+2	; 0x02
    2216:	8f 77       	andi	r24, 0x7F	; 127
    2218:	8a 83       	std	Y+2, r24	; 0x02
#endif /*RX Complete Interrupt MODE*/

#if TXCIE == TXCI_EN
SET_BIT(UCSRA_MAP,6);
#elif TXCIE == TXCI_DS
CLR_BIT(UCSRB_MAP,6);
    221a:	8a 81       	ldd	r24, Y+2	; 0x02
    221c:	8f 7b       	andi	r24, 0xBF	; 191
    221e:	8a 83       	std	Y+2, r24	; 0x02
#endif /* TX Complete Interrupt MODE*/

#if UDRIE == UDRI_EN
SET_BIT(UCSRA_MAP,5);
#elif UDRIE == UDRI_DS
CLR_BIT(UCSRB_MAP,5);
    2220:	8a 81       	ldd	r24, Y+2	; 0x02
    2222:	8f 7d       	andi	r24, 0xDF	; 223
    2224:	8a 83       	std	Y+2, r24	; 0x02
#else
#error "ERROR"
#endif /*UDRE Flag MODE*/


UCSRC |= UCSRC_MAP;
    2226:	e0 e4       	ldi	r30, 0x40	; 64
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	90 81       	ld	r25, Z
    222c:	89 81       	ldd	r24, Y+1	; 0x01
    222e:	89 2b       	or	r24, r25
    2230:	80 83       	st	Z, r24
UCSRB |= UCSRB_MAP;
    2232:	ea e2       	ldi	r30, 0x2A	; 42
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	90 81       	ld	r25, Z
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	89 2b       	or	r24, r25
    223c:	80 83       	st	Z, r24
}
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	08 95       	ret

00002248 <__vector_12>:
 */


#include "SPI_Interface.h"

ISR(VECTOR(12)) {
    2248:	1f 92       	push	r1
    224a:	0f 92       	push	r0
    224c:	0f b6       	in	r0, 0x3f	; 63
    224e:	0f 92       	push	r0
    2250:	11 24       	eor	r1, r1
    2252:	2f 93       	push	r18
    2254:	3f 93       	push	r19
    2256:	4f 93       	push	r20
    2258:	5f 93       	push	r21
    225a:	6f 93       	push	r22
    225c:	7f 93       	push	r23
    225e:	8f 93       	push	r24
    2260:	9f 93       	push	r25
    2262:	af 93       	push	r26
    2264:	bf 93       	push	r27
    2266:	ef 93       	push	r30
    2268:	ff 93       	push	r31
	ptr_func();
    226a:	e0 91 c0 02 	lds	r30, 0x02C0
    226e:	f0 91 c1 02 	lds	r31, 0x02C1
    2272:	09 95       	icall
}
    2274:	ff 91       	pop	r31
    2276:	ef 91       	pop	r30
    2278:	bf 91       	pop	r27
    227a:	af 91       	pop	r26
    227c:	9f 91       	pop	r25
    227e:	8f 91       	pop	r24
    2280:	7f 91       	pop	r23
    2282:	6f 91       	pop	r22
    2284:	5f 91       	pop	r21
    2286:	4f 91       	pop	r20
    2288:	3f 91       	pop	r19
    228a:	2f 91       	pop	r18
    228c:	0f 90       	pop	r0
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	0f 90       	pop	r0
    2292:	1f 90       	pop	r1
    2294:	18 95       	reti

00002296 <SPI_Send_Receive_Synch_Byte>:
			| (My_Config->Data_Order << DORD) | (My_Config->Polarity << CPOL)
			| (My_Config->Phase << CPHA);
	return error_state;
}

ERROR_STATE SPI_Send_Receive_Synch_Byte(UINT8_t byte, UINT8_t *received) {
    2296:	db 01       	movw	r26, r22
	ERROR_STATE error_state = SUCCESS;
	SPDR = byte;
    2298:	8f b9       	out	0x0f, r24	; 15

	while (!GET_BIT(SPSR, SPIF));
    229a:	ee e2       	ldi	r30, 0x2E	; 46
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	88 23       	and	r24, r24
    22a2:	ec f7       	brge	.-6      	; 0x229e <SPI_Send_Receive_Synch_Byte+0x8>
	*received = SPDR;
    22a4:	8f b1       	in	r24, 0x0f	; 15
    22a6:	8c 93       	st	X, r24
	return error_state;
}
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	08 95       	ret

000022ac <SPI_Send_ASynch_Byte>:

ERROR_STATE SPI_Send_ASynch_Byte(UINT8_t byte) {
	ERROR_STATE error_state = SUCCESS;
	SPDR = byte;
    22ac:	8f b9       	out	0x0f, r24	; 15

	while (!GET_BIT(SPSR, SPIF));
    22ae:	ee e2       	ldi	r30, 0x2E	; 46
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	88 23       	and	r24, r24
    22b6:	ec f7       	brge	.-6      	; 0x22b2 <SPI_Send_ASynch_Byte+0x6>
	return error_state;
}
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	08 95       	ret

000022bc <SPI_Read_Data>:

ERROR_STATE SPI_Read_Data(UINT8_t *var) {
    22bc:	fc 01       	movw	r30, r24
	ERROR_STATE error_state = SUCCESS;
	*var = SPDR;
    22be:	8f b1       	in	r24, 0x0f	; 15
    22c0:	80 83       	st	Z, r24
	return error_state;
}
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	08 95       	ret

000022c6 <SPI_Set_CallBack>:

ERROR_STATE SPI_Set_CallBack(void (*func)(void)) {
	ERROR_STATE error_state = SUCCESS;
	ptr_func = func;
    22c6:	90 93 c1 02 	sts	0x02C1, r25
    22ca:	80 93 c0 02 	sts	0x02C0, r24
	return error_state;
}
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	08 95       	ret

000022d2 <Global_Interrupt_Enable>:

ERROR_STATE Global_Interrupt_Enable() {
	ERROR_STATE error_state = SUCCESS;
	SREG |= (1 << 7);
    22d2:	ef e5       	ldi	r30, 0x5F	; 95
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
    22d8:	80 68       	ori	r24, 0x80	; 128
    22da:	80 83       	st	Z, r24
	return error_state;
}
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	08 95       	ret

000022e0 <Master_Send>:
void Master_Send(UINT8_t data){
	SPI_Send_ASynch_Byte(data);
    22e0:	0e 94 56 11 	call	0x22ac	; 0x22ac <SPI_Send_ASynch_Byte>
}
    22e4:	08 95       	ret

000022e6 <Master_Receive>:

UINT8_t Master_Receive(){
    22e6:	df 93       	push	r29
    22e8:	cf 93       	push	r28
    22ea:	0f 92       	push	r0
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
	UINT8_t received=0;
    22f0:	19 82       	std	Y+1, r1	; 0x01
	SPI_Send_Receive_Synch_Byte(DUMMY_DATA,&received);
    22f2:	8e ef       	ldi	r24, 0xFE	; 254
    22f4:	be 01       	movw	r22, r28
    22f6:	6f 5f       	subi	r22, 0xFF	; 255
    22f8:	7f 4f       	sbci	r23, 0xFF	; 255
    22fa:	0e 94 4b 11 	call	0x2296	; 0x2296 <SPI_Send_Receive_Synch_Byte>
	return received;
}
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	0f 90       	pop	r0
    2302:	cf 91       	pop	r28
    2304:	df 91       	pop	r29
    2306:	08 95       	ret

00002308 <SPI_Init_Slave>:

	SPSR |= (My_Config->Prescaler >> 2);
	return error_state;
}

ERROR_STATE SPI_Init_Slave(Slave_Config *My_Config) {
    2308:	0f 93       	push	r16
    230a:	1f 93       	push	r17
    230c:	8c 01       	movw	r16, r24
	ERROR_STATE error_state = SUCCESS;
	DIO_SetPin_Direction(MISO_PORT, MISO_PIN, DIO_OUTPUT);
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	66 e0       	ldi	r22, 0x06	; 6
    2312:	41 e0       	ldi	r20, 0x01	; 1
    2314:	0e 94 04 12 	call	0x2408	; 0x2408 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(MOSI_PORT, MOSI_PIN, DIO_INPUT);
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	65 e0       	ldi	r22, 0x05	; 5
    231c:	40 e0       	ldi	r20, 0x00	; 0
    231e:	0e 94 04 12 	call	0x2408	; 0x2408 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(CLOCK_PORT, CLOCK_PIN, DIO_INPUT);
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	67 e0       	ldi	r22, 0x07	; 7
    2326:	40 e0       	ldi	r20, 0x00	; 0
    2328:	0e 94 04 12 	call	0x2408	; 0x2408 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(SS_PORT, SS_PIN, DIO_INPUT);
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	64 e0       	ldi	r22, 0x04	; 4
    2330:	40 e0       	ldi	r20, 0x00	; 0
    2332:	0e 94 04 12 	call	0x2408	; 0x2408 <DIO_SetPin_Direction>

	SPCR = 0;
    2336:	ed e2       	ldi	r30, 0x2D	; 45
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	10 82       	st	Z, r1
	SPCR |= (SPI_ENABLE << SPE) | (My_Config->Int_Enable << SPIE)
    233c:	90 81       	ld	r25, Z
    233e:	90 64       	ori	r25, 0x40	; 64
    2340:	d8 01       	movw	r26, r16
    2342:	8c 91       	ld	r24, X
    2344:	87 95       	ror	r24
    2346:	88 27       	eor	r24, r24
    2348:	87 95       	ror	r24
    234a:	89 2b       	or	r24, r25
    234c:	11 96       	adiw	r26, 0x01	; 1
    234e:	9c 91       	ld	r25, X
    2350:	11 97       	sbiw	r26, 0x01	; 1
    2352:	92 95       	swap	r25
    2354:	99 0f       	add	r25, r25
    2356:	90 7e       	andi	r25, 0xE0	; 224
    2358:	98 2b       	or	r25, r24
    235a:	12 96       	adiw	r26, 0x02	; 2
    235c:	2c 91       	ld	r18, X
    235e:	12 97       	sbiw	r26, 0x02	; 2
    2360:	22 0f       	add	r18, r18
    2362:	22 0f       	add	r18, r18
    2364:	22 0f       	add	r18, r18
    2366:	29 2b       	or	r18, r25
    2368:	13 96       	adiw	r26, 0x03	; 3
    236a:	8c 91       	ld	r24, X
    236c:	88 0f       	add	r24, r24
    236e:	88 0f       	add	r24, r24
    2370:	82 2b       	or	r24, r18
    2372:	80 83       	st	Z, r24
			| (My_Config->Data_Order << DORD) | (My_Config->Polarity << CPOL)
			| (My_Config->Phase << CPHA);
	return error_state;
}
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	1f 91       	pop	r17
    2378:	0f 91       	pop	r16
    237a:	08 95       	ret

0000237c <SPI_Init_Master>:

ISR(VECTOR(12)) {
	ptr_func();
}

ERROR_STATE SPI_Init_Master(Master_Config *My_Config) {
    237c:	0f 93       	push	r16
    237e:	1f 93       	push	r17
    2380:	8c 01       	movw	r16, r24
	ERROR_STATE error_state = SUCCESS;
	DIO_SetPin_Direction(MISO_PORT, MISO_PIN, DIO_INPUT);
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	66 e0       	ldi	r22, 0x06	; 6
    2386:	40 e0       	ldi	r20, 0x00	; 0
    2388:	0e 94 04 12 	call	0x2408	; 0x2408 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(MOSI_PORT, MOSI_PIN, DIO_OUTPUT);
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	65 e0       	ldi	r22, 0x05	; 5
    2390:	41 e0       	ldi	r20, 0x01	; 1
    2392:	0e 94 04 12 	call	0x2408	; 0x2408 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(CLOCK_PORT, CLOCK_PIN, DIO_OUTPUT);
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	67 e0       	ldi	r22, 0x07	; 7
    239a:	41 e0       	ldi	r20, 0x01	; 1
    239c:	0e 94 04 12 	call	0x2408	; 0x2408 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(SS_PORT, SS_PIN, DIO_OUTPUT);
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	64 e0       	ldi	r22, 0x04	; 4
    23a4:	41 e0       	ldi	r20, 0x01	; 1
    23a6:	0e 94 04 12 	call	0x2408	; 0x2408 <DIO_SetPin_Direction>

	SPCR |= (1 << SPE)
    23aa:	ed e2       	ldi	r30, 0x2D	; 45
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	90 81       	ld	r25, Z
    23b0:	d8 01       	movw	r26, r16
    23b2:	14 96       	adiw	r26, 0x04	; 4
    23b4:	3c 91       	ld	r19, X
    23b6:	14 97       	sbiw	r26, 0x04	; 4
    23b8:	90 65       	ori	r25, 0x50	; 80
    23ba:	83 2f       	mov	r24, r19
    23bc:	83 70       	andi	r24, 0x03	; 3
    23be:	98 2b       	or	r25, r24
    23c0:	8c 91       	ld	r24, X
    23c2:	87 95       	ror	r24
    23c4:	88 27       	eor	r24, r24
    23c6:	87 95       	ror	r24
    23c8:	89 2b       	or	r24, r25
    23ca:	11 96       	adiw	r26, 0x01	; 1
    23cc:	9c 91       	ld	r25, X
    23ce:	11 97       	sbiw	r26, 0x01	; 1
    23d0:	92 95       	swap	r25
    23d2:	99 0f       	add	r25, r25
    23d4:	90 7e       	andi	r25, 0xE0	; 224
    23d6:	98 2b       	or	r25, r24
    23d8:	12 96       	adiw	r26, 0x02	; 2
    23da:	2c 91       	ld	r18, X
    23dc:	12 97       	sbiw	r26, 0x02	; 2
    23de:	22 0f       	add	r18, r18
    23e0:	22 0f       	add	r18, r18
    23e2:	22 0f       	add	r18, r18
    23e4:	29 2b       	or	r18, r25
    23e6:	13 96       	adiw	r26, 0x03	; 3
    23e8:	8c 91       	ld	r24, X
    23ea:	88 0f       	add	r24, r24
    23ec:	88 0f       	add	r24, r24
    23ee:	82 2b       	or	r24, r18
    23f0:	80 83       	st	Z, r24
			| (My_Config->Int_Enable << SPIE)
			| (My_Config->Data_Order << DORD) | (SPI_MASTER << MSTR)
			| (My_Config->Polarity << CPOL) | (My_Config->Phase << CPHA)
			| (My_Config->Prescaler & 0x3);

	SPSR |= (My_Config->Prescaler >> 2);
    23f2:	ee e2       	ldi	r30, 0x2E	; 46
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	80 81       	ld	r24, Z
    23f8:	36 95       	lsr	r19
    23fa:	36 95       	lsr	r19
    23fc:	38 2b       	or	r19, r24
    23fe:	30 83       	st	Z, r19
	return error_state;
}
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	1f 91       	pop	r17
    2404:	0f 91       	pop	r16
    2406:	08 95       	ret

00002408 <DIO_SetPin_Direction>:
#include "DIO_Interface.h"

ERROR_STATE DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	ERROR_STATE state_error = SUCCESS;
	switch (state)
    2408:	44 23       	and	r20, r20
    240a:	29 f0       	breq	.+10     	; 0x2416 <DIO_SetPin_Direction+0xe>
    240c:	41 30       	cpi	r20, 0x01	; 1
    240e:	09 f4       	brne	.+2      	; 0x2412 <DIO_SetPin_Direction+0xa>
    2410:	48 c0       	rjmp	.+144    	; 0x24a2 <DIO_SetPin_Direction+0x9a>
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	08 95       	ret
	{
		case DIO_INPUT:
		switch(port)
    2416:	81 30       	cpi	r24, 0x01	; 1
    2418:	b9 f0       	breq	.+46     	; 0x2448 <DIO_SetPin_Direction+0x40>
    241a:	81 30       	cpi	r24, 0x01	; 1
    241c:	30 f0       	brcs	.+12     	; 0x242a <DIO_SetPin_Direction+0x22>
    241e:	82 30       	cpi	r24, 0x02	; 2
    2420:	11 f1       	breq	.+68     	; 0x2466 <DIO_SetPin_Direction+0x5e>
    2422:	83 30       	cpi	r24, 0x03	; 3
    2424:	09 f0       	breq	.+2      	; 0x2428 <DIO_SetPin_Direction+0x20>
    2426:	7e c0       	rjmp	.+252    	; 0x2524 <DIO_SetPin_Direction+0x11c>
    2428:	2d c0       	rjmp	.+90     	; 0x2484 <DIO_SetPin_Direction+0x7c>
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
    242a:	ea e3       	ldi	r30, 0x3A	; 58
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	20 81       	ld	r18, Z
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	02 c0       	rjmp	.+4      	; 0x243a <DIO_SetPin_Direction+0x32>
    2436:	88 0f       	add	r24, r24
    2438:	99 1f       	adc	r25, r25
    243a:	6a 95       	dec	r22
    243c:	e2 f7       	brpl	.-8      	; 0x2436 <DIO_SetPin_Direction+0x2e>
    243e:	80 95       	com	r24
    2440:	82 23       	and	r24, r18
    2442:	80 83       	st	Z, r24
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	08 95       	ret
			break;
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
    2448:	e7 e3       	ldi	r30, 0x37	; 55
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	20 81       	ld	r18, Z
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <DIO_SetPin_Direction+0x50>
    2454:	88 0f       	add	r24, r24
    2456:	99 1f       	adc	r25, r25
    2458:	6a 95       	dec	r22
    245a:	e2 f7       	brpl	.-8      	; 0x2454 <DIO_SetPin_Direction+0x4c>
    245c:	80 95       	com	r24
    245e:	82 23       	and	r24, r18
    2460:	80 83       	st	Z, r24
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	08 95       	ret
			break;
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
    2466:	e4 e3       	ldi	r30, 0x34	; 52
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	20 81       	ld	r18, Z
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	02 c0       	rjmp	.+4      	; 0x2476 <DIO_SetPin_Direction+0x6e>
    2472:	88 0f       	add	r24, r24
    2474:	99 1f       	adc	r25, r25
    2476:	6a 95       	dec	r22
    2478:	e2 f7       	brpl	.-8      	; 0x2472 <DIO_SetPin_Direction+0x6a>
    247a:	80 95       	com	r24
    247c:	82 23       	and	r24, r18
    247e:	80 83       	st	Z, r24
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	08 95       	ret
			break;
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
    2484:	e1 e3       	ldi	r30, 0x31	; 49
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	20 81       	ld	r18, Z
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	02 c0       	rjmp	.+4      	; 0x2494 <DIO_SetPin_Direction+0x8c>
    2490:	88 0f       	add	r24, r24
    2492:	99 1f       	adc	r25, r25
    2494:	6a 95       	dec	r22
    2496:	e2 f7       	brpl	.-8      	; 0x2490 <DIO_SetPin_Direction+0x88>
    2498:	80 95       	com	r24
    249a:	82 23       	and	r24, r18
    249c:	80 83       	st	Z, r24
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	08 95       	ret
			state_error = FAIL;
			break;
		}
		break;
		case DIO_OUTPUT:
		switch(port)
    24a2:	81 30       	cpi	r24, 0x01	; 1
    24a4:	a9 f0       	breq	.+42     	; 0x24d0 <DIO_SetPin_Direction+0xc8>
    24a6:	81 30       	cpi	r24, 0x01	; 1
    24a8:	28 f0       	brcs	.+10     	; 0x24b4 <DIO_SetPin_Direction+0xac>
    24aa:	82 30       	cpi	r24, 0x02	; 2
    24ac:	f9 f0       	breq	.+62     	; 0x24ec <DIO_SetPin_Direction+0xe4>
    24ae:	83 30       	cpi	r24, 0x03	; 3
    24b0:	c9 f5       	brne	.+114    	; 0x2524 <DIO_SetPin_Direction+0x11c>
    24b2:	2a c0       	rjmp	.+84     	; 0x2508 <DIO_SetPin_Direction+0x100>
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
    24b4:	ea e3       	ldi	r30, 0x3A	; 58
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	20 81       	ld	r18, Z
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	02 c0       	rjmp	.+4      	; 0x24c4 <DIO_SetPin_Direction+0xbc>
    24c0:	88 0f       	add	r24, r24
    24c2:	99 1f       	adc	r25, r25
    24c4:	6a 95       	dec	r22
    24c6:	e2 f7       	brpl	.-8      	; 0x24c0 <DIO_SetPin_Direction+0xb8>
    24c8:	28 2b       	or	r18, r24
    24ca:	20 83       	st	Z, r18
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	08 95       	ret
			break;
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
    24d0:	e7 e3       	ldi	r30, 0x37	; 55
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	20 81       	ld	r18, Z
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	02 c0       	rjmp	.+4      	; 0x24e0 <DIO_SetPin_Direction+0xd8>
    24dc:	88 0f       	add	r24, r24
    24de:	99 1f       	adc	r25, r25
    24e0:	6a 95       	dec	r22
    24e2:	e2 f7       	brpl	.-8      	; 0x24dc <DIO_SetPin_Direction+0xd4>
    24e4:	28 2b       	or	r18, r24
    24e6:	20 83       	st	Z, r18
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	08 95       	ret
			break;
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
    24ec:	e4 e3       	ldi	r30, 0x34	; 52
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	20 81       	ld	r18, Z
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	02 c0       	rjmp	.+4      	; 0x24fc <DIO_SetPin_Direction+0xf4>
    24f8:	88 0f       	add	r24, r24
    24fa:	99 1f       	adc	r25, r25
    24fc:	6a 95       	dec	r22
    24fe:	e2 f7       	brpl	.-8      	; 0x24f8 <DIO_SetPin_Direction+0xf0>
    2500:	28 2b       	or	r18, r24
    2502:	20 83       	st	Z, r18
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	08 95       	ret
			break;
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
    2508:	e1 e3       	ldi	r30, 0x31	; 49
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	20 81       	ld	r18, Z
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	02 c0       	rjmp	.+4      	; 0x2518 <DIO_SetPin_Direction+0x110>
    2514:	88 0f       	add	r24, r24
    2516:	99 1f       	adc	r25, r25
    2518:	6a 95       	dec	r22
    251a:	e2 f7       	brpl	.-8      	; 0x2514 <DIO_SetPin_Direction+0x10c>
    251c:	28 2b       	or	r18, r24
    251e:	20 83       	st	Z, r18
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	08 95       	ret
			break;
    2524:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
		break;
	}
	return state_error;
}
    2526:	08 95       	ret

00002528 <DIO_SetPin_Value>:

ERROR_STATE DIO_SetPin_Value(DIO_Port port, DIO_Pin pin, DIO_Status status)
{
ERROR_STATE state_error = SUCCESS;
	switch (status)
    2528:	44 23       	and	r20, r20
    252a:	29 f0       	breq	.+10     	; 0x2536 <DIO_SetPin_Value+0xe>
    252c:	41 30       	cpi	r20, 0x01	; 1
    252e:	09 f4       	brne	.+2      	; 0x2532 <DIO_SetPin_Value+0xa>
    2530:	48 c0       	rjmp	.+144    	; 0x25c2 <DIO_SetPin_Value+0x9a>
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	08 95       	ret
	{
		case DIO_LOW:
		switch(port)
    2536:	81 30       	cpi	r24, 0x01	; 1
    2538:	b9 f0       	breq	.+46     	; 0x2568 <DIO_SetPin_Value+0x40>
    253a:	81 30       	cpi	r24, 0x01	; 1
    253c:	30 f0       	brcs	.+12     	; 0x254a <DIO_SetPin_Value+0x22>
    253e:	82 30       	cpi	r24, 0x02	; 2
    2540:	11 f1       	breq	.+68     	; 0x2586 <DIO_SetPin_Value+0x5e>
    2542:	83 30       	cpi	r24, 0x03	; 3
    2544:	09 f0       	breq	.+2      	; 0x2548 <DIO_SetPin_Value+0x20>
    2546:	7e c0       	rjmp	.+252    	; 0x2644 <DIO_SetPin_Value+0x11c>
    2548:	2d c0       	rjmp	.+90     	; 0x25a4 <DIO_SetPin_Value+0x7c>
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
    254a:	eb e3       	ldi	r30, 0x3B	; 59
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	20 81       	ld	r18, Z
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	02 c0       	rjmp	.+4      	; 0x255a <DIO_SetPin_Value+0x32>
    2556:	88 0f       	add	r24, r24
    2558:	99 1f       	adc	r25, r25
    255a:	6a 95       	dec	r22
    255c:	e2 f7       	brpl	.-8      	; 0x2556 <DIO_SetPin_Value+0x2e>
    255e:	80 95       	com	r24
    2560:	82 23       	and	r24, r18
    2562:	80 83       	st	Z, r24
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	08 95       	ret
			break;
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
    2568:	e8 e3       	ldi	r30, 0x38	; 56
    256a:	f0 e0       	ldi	r31, 0x00	; 0
    256c:	20 81       	ld	r18, Z
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	02 c0       	rjmp	.+4      	; 0x2578 <DIO_SetPin_Value+0x50>
    2574:	88 0f       	add	r24, r24
    2576:	99 1f       	adc	r25, r25
    2578:	6a 95       	dec	r22
    257a:	e2 f7       	brpl	.-8      	; 0x2574 <DIO_SetPin_Value+0x4c>
    257c:	80 95       	com	r24
    257e:	82 23       	and	r24, r18
    2580:	80 83       	st	Z, r24
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	08 95       	ret
			break;
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
    2586:	e5 e3       	ldi	r30, 0x35	; 53
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	20 81       	ld	r18, Z
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	02 c0       	rjmp	.+4      	; 0x2596 <DIO_SetPin_Value+0x6e>
    2592:	88 0f       	add	r24, r24
    2594:	99 1f       	adc	r25, r25
    2596:	6a 95       	dec	r22
    2598:	e2 f7       	brpl	.-8      	; 0x2592 <DIO_SetPin_Value+0x6a>
    259a:	80 95       	com	r24
    259c:	82 23       	and	r24, r18
    259e:	80 83       	st	Z, r24
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	08 95       	ret
			break;
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
    25a4:	e2 e3       	ldi	r30, 0x32	; 50
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	20 81       	ld	r18, Z
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <DIO_SetPin_Value+0x8c>
    25b0:	88 0f       	add	r24, r24
    25b2:	99 1f       	adc	r25, r25
    25b4:	6a 95       	dec	r22
    25b6:	e2 f7       	brpl	.-8      	; 0x25b0 <DIO_SetPin_Value+0x88>
    25b8:	80 95       	com	r24
    25ba:	82 23       	and	r24, r18
    25bc:	80 83       	st	Z, r24
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	08 95       	ret
			state_error = FAIL;
			break;
		}
		break;
		case DIO_HIGH:
		switch(port)
    25c2:	81 30       	cpi	r24, 0x01	; 1
    25c4:	a9 f0       	breq	.+42     	; 0x25f0 <DIO_SetPin_Value+0xc8>
    25c6:	81 30       	cpi	r24, 0x01	; 1
    25c8:	28 f0       	brcs	.+10     	; 0x25d4 <DIO_SetPin_Value+0xac>
    25ca:	82 30       	cpi	r24, 0x02	; 2
    25cc:	f9 f0       	breq	.+62     	; 0x260c <DIO_SetPin_Value+0xe4>
    25ce:	83 30       	cpi	r24, 0x03	; 3
    25d0:	c9 f5       	brne	.+114    	; 0x2644 <DIO_SetPin_Value+0x11c>
    25d2:	2a c0       	rjmp	.+84     	; 0x2628 <DIO_SetPin_Value+0x100>
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
    25d4:	eb e3       	ldi	r30, 0x3B	; 59
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	20 81       	ld	r18, Z
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	02 c0       	rjmp	.+4      	; 0x25e4 <DIO_SetPin_Value+0xbc>
    25e0:	88 0f       	add	r24, r24
    25e2:	99 1f       	adc	r25, r25
    25e4:	6a 95       	dec	r22
    25e6:	e2 f7       	brpl	.-8      	; 0x25e0 <DIO_SetPin_Value+0xb8>
    25e8:	28 2b       	or	r18, r24
    25ea:	20 83       	st	Z, r18
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	08 95       	ret
			break;
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
    25f0:	e8 e3       	ldi	r30, 0x38	; 56
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	20 81       	ld	r18, Z
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	02 c0       	rjmp	.+4      	; 0x2600 <DIO_SetPin_Value+0xd8>
    25fc:	88 0f       	add	r24, r24
    25fe:	99 1f       	adc	r25, r25
    2600:	6a 95       	dec	r22
    2602:	e2 f7       	brpl	.-8      	; 0x25fc <DIO_SetPin_Value+0xd4>
    2604:	28 2b       	or	r18, r24
    2606:	20 83       	st	Z, r18
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	08 95       	ret
			break;
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
    260c:	e5 e3       	ldi	r30, 0x35	; 53
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	20 81       	ld	r18, Z
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	02 c0       	rjmp	.+4      	; 0x261c <DIO_SetPin_Value+0xf4>
    2618:	88 0f       	add	r24, r24
    261a:	99 1f       	adc	r25, r25
    261c:	6a 95       	dec	r22
    261e:	e2 f7       	brpl	.-8      	; 0x2618 <DIO_SetPin_Value+0xf0>
    2620:	28 2b       	or	r18, r24
    2622:	20 83       	st	Z, r18
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	08 95       	ret
			break;
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
    2628:	e2 e3       	ldi	r30, 0x32	; 50
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	20 81       	ld	r18, Z
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	02 c0       	rjmp	.+4      	; 0x2638 <DIO_SetPin_Value+0x110>
    2634:	88 0f       	add	r24, r24
    2636:	99 1f       	adc	r25, r25
    2638:	6a 95       	dec	r22
    263a:	e2 f7       	brpl	.-8      	; 0x2634 <DIO_SetPin_Value+0x10c>
    263c:	28 2b       	or	r18, r24
    263e:	20 83       	st	Z, r18
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	08 95       	ret
			break;
    2644:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
		break;
	}
	return state_error;
}
    2646:	08 95       	ret

00002648 <DIO_TglPin_Value>:

ERROR_STATE DIO_TglPin_Value(DIO_Port port, DIO_Pin pin)
{
ERROR_STATE state_error = SUCCESS;
	switch(port)
    2648:	81 30       	cpi	r24, 0x01	; 1
    264a:	b1 f0       	breq	.+44     	; 0x2678 <DIO_TglPin_Value+0x30>
    264c:	81 30       	cpi	r24, 0x01	; 1
    264e:	30 f0       	brcs	.+12     	; 0x265c <DIO_TglPin_Value+0x14>
    2650:	82 30       	cpi	r24, 0x02	; 2
    2652:	01 f1       	breq	.+64     	; 0x2694 <DIO_TglPin_Value+0x4c>
    2654:	83 30       	cpi	r24, 0x03	; 3
    2656:	61 f1       	breq	.+88     	; 0x26b0 <DIO_TglPin_Value+0x68>
    2658:	80 e0       	ldi	r24, 0x00	; 0
    265a:	08 95       	ret
	{
		case DIO_PORTA:
		TGL_BIT(PORTA, pin);
    265c:	eb e3       	ldi	r30, 0x3B	; 59
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	20 81       	ld	r18, Z
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	02 c0       	rjmp	.+4      	; 0x266c <DIO_TglPin_Value+0x24>
    2668:	88 0f       	add	r24, r24
    266a:	99 1f       	adc	r25, r25
    266c:	6a 95       	dec	r22
    266e:	e2 f7       	brpl	.-8      	; 0x2668 <DIO_TglPin_Value+0x20>
    2670:	28 27       	eor	r18, r24
    2672:	20 83       	st	Z, r18
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	08 95       	ret
		break;
		case DIO_PORTB:
		TGL_BIT(PORTB, pin);
    2678:	e8 e3       	ldi	r30, 0x38	; 56
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	20 81       	ld	r18, Z
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	02 c0       	rjmp	.+4      	; 0x2688 <DIO_TglPin_Value+0x40>
    2684:	88 0f       	add	r24, r24
    2686:	99 1f       	adc	r25, r25
    2688:	6a 95       	dec	r22
    268a:	e2 f7       	brpl	.-8      	; 0x2684 <DIO_TglPin_Value+0x3c>
    268c:	28 27       	eor	r18, r24
    268e:	20 83       	st	Z, r18
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	08 95       	ret
		break;
		case DIO_PORTC:
		TGL_BIT(PORTC, pin);
    2694:	e5 e3       	ldi	r30, 0x35	; 53
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	20 81       	ld	r18, Z
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	02 c0       	rjmp	.+4      	; 0x26a4 <DIO_TglPin_Value+0x5c>
    26a0:	88 0f       	add	r24, r24
    26a2:	99 1f       	adc	r25, r25
    26a4:	6a 95       	dec	r22
    26a6:	e2 f7       	brpl	.-8      	; 0x26a0 <DIO_TglPin_Value+0x58>
    26a8:	28 27       	eor	r18, r24
    26aa:	20 83       	st	Z, r18
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	08 95       	ret
		break;
		case DIO_PORTD:
		TGL_BIT(PORTD, pin);
    26b0:	e2 e3       	ldi	r30, 0x32	; 50
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	20 81       	ld	r18, Z
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	02 c0       	rjmp	.+4      	; 0x26c0 <DIO_TglPin_Value+0x78>
    26bc:	88 0f       	add	r24, r24
    26be:	99 1f       	adc	r25, r25
    26c0:	6a 95       	dec	r22
    26c2:	e2 f7       	brpl	.-8      	; 0x26bc <DIO_TglPin_Value+0x74>
    26c4:	28 27       	eor	r18, r24
    26c6:	20 83       	st	Z, r18
    26c8:	81 e0       	ldi	r24, 0x01	; 1
		default:
		state_error = FAIL;
		break;
	}
	return state_error;
}
    26ca:	08 95       	ret

000026cc <DIO_GetPin_Value>:

ERROR_STATE DIO_GetPin_Value(DIO_Port port, DIO_Pin pin,UINT8_t* pin_value)
{
    26cc:	fa 01       	movw	r30, r20
ERROR_STATE state_error = SUCCESS;
	switch (port)
    26ce:	81 30       	cpi	r24, 0x01	; 1
    26d0:	99 f0       	breq	.+38     	; 0x26f8 <DIO_GetPin_Value+0x2c>
    26d2:	81 30       	cpi	r24, 0x01	; 1
    26d4:	30 f0       	brcs	.+12     	; 0x26e2 <DIO_GetPin_Value+0x16>
    26d6:	82 30       	cpi	r24, 0x02	; 2
    26d8:	d1 f0       	breq	.+52     	; 0x270e <DIO_GetPin_Value+0x42>
    26da:	83 30       	cpi	r24, 0x03	; 3
    26dc:	19 f1       	breq	.+70     	; 0x2724 <DIO_GetPin_Value+0x58>
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	08 95       	ret
	{
		case DIO_PORTA:
		*pin_value = GET_BIT(PINA, pin);
    26e2:	89 b3       	in	r24, 0x19	; 25
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	02 c0       	rjmp	.+4      	; 0x26ec <DIO_GetPin_Value+0x20>
    26e8:	95 95       	asr	r25
    26ea:	87 95       	ror	r24
    26ec:	6a 95       	dec	r22
    26ee:	e2 f7       	brpl	.-8      	; 0x26e8 <DIO_GetPin_Value+0x1c>
    26f0:	81 70       	andi	r24, 0x01	; 1
    26f2:	80 83       	st	Z, r24
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	08 95       	ret
		break;
		case DIO_PORTB:
		*pin_value = GET_BIT(PINB, pin);
    26f8:	86 b3       	in	r24, 0x16	; 22
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	02 c0       	rjmp	.+4      	; 0x2702 <DIO_GetPin_Value+0x36>
    26fe:	95 95       	asr	r25
    2700:	87 95       	ror	r24
    2702:	6a 95       	dec	r22
    2704:	e2 f7       	brpl	.-8      	; 0x26fe <DIO_GetPin_Value+0x32>
    2706:	81 70       	andi	r24, 0x01	; 1
    2708:	80 83       	st	Z, r24
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	08 95       	ret
		break;
		case DIO_PORTC:
		*pin_value = GET_BIT(PINC, pin);
    270e:	83 b3       	in	r24, 0x13	; 19
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	02 c0       	rjmp	.+4      	; 0x2718 <DIO_GetPin_Value+0x4c>
    2714:	95 95       	asr	r25
    2716:	87 95       	ror	r24
    2718:	6a 95       	dec	r22
    271a:	e2 f7       	brpl	.-8      	; 0x2714 <DIO_GetPin_Value+0x48>
    271c:	81 70       	andi	r24, 0x01	; 1
    271e:	80 83       	st	Z, r24
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	08 95       	ret
		break;
		case DIO_PORTD:
		*pin_value = GET_BIT(PIND, pin);
    2724:	80 b3       	in	r24, 0x10	; 16
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	02 c0       	rjmp	.+4      	; 0x272e <DIO_GetPin_Value+0x62>
    272a:	95 95       	asr	r25
    272c:	87 95       	ror	r24
    272e:	6a 95       	dec	r22
    2730:	e2 f7       	brpl	.-8      	; 0x272a <DIO_GetPin_Value+0x5e>
    2732:	81 70       	andi	r24, 0x01	; 1
    2734:	80 83       	st	Z, r24
    2736:	81 e0       	ldi	r24, 0x01	; 1
		default:
		state_error = FAIL;
		break;
	}
	return state_error;
}
    2738:	08 95       	ret

0000273a <DIO_SetPin_PULLUP>:

ERROR_STATE DIO_SetPin_PULLUP(DIO_Port port, DIO_Pin pin)
{
ERROR_STATE state_error = SUCCESS;
	switch(port)
    273a:	81 30       	cpi	r24, 0x01	; 1
    273c:	b1 f0       	breq	.+44     	; 0x276a <DIO_SetPin_PULLUP+0x30>
    273e:	81 30       	cpi	r24, 0x01	; 1
    2740:	30 f0       	brcs	.+12     	; 0x274e <DIO_SetPin_PULLUP+0x14>
    2742:	82 30       	cpi	r24, 0x02	; 2
    2744:	01 f1       	breq	.+64     	; 0x2786 <DIO_SetPin_PULLUP+0x4c>
    2746:	83 30       	cpi	r24, 0x03	; 3
    2748:	61 f1       	breq	.+88     	; 0x27a2 <DIO_SetPin_PULLUP+0x68>
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	08 95       	ret
	{
		case DIO_PORTA:
		SET_BIT(PORTA, pin);
    274e:	eb e3       	ldi	r30, 0x3B	; 59
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	20 81       	ld	r18, Z
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	02 c0       	rjmp	.+4      	; 0x275e <DIO_SetPin_PULLUP+0x24>
    275a:	88 0f       	add	r24, r24
    275c:	99 1f       	adc	r25, r25
    275e:	6a 95       	dec	r22
    2760:	e2 f7       	brpl	.-8      	; 0x275a <DIO_SetPin_PULLUP+0x20>
    2762:	28 2b       	or	r18, r24
    2764:	20 83       	st	Z, r18
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	08 95       	ret
		break;
		case DIO_PORTB:
		SET_BIT(PORTB, pin);
    276a:	e8 e3       	ldi	r30, 0x38	; 56
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	20 81       	ld	r18, Z
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	02 c0       	rjmp	.+4      	; 0x277a <DIO_SetPin_PULLUP+0x40>
    2776:	88 0f       	add	r24, r24
    2778:	99 1f       	adc	r25, r25
    277a:	6a 95       	dec	r22
    277c:	e2 f7       	brpl	.-8      	; 0x2776 <DIO_SetPin_PULLUP+0x3c>
    277e:	28 2b       	or	r18, r24
    2780:	20 83       	st	Z, r18
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	08 95       	ret
		break;
		case DIO_PORTC:
		SET_BIT(PORTC, pin);
    2786:	e5 e3       	ldi	r30, 0x35	; 53
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	20 81       	ld	r18, Z
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	02 c0       	rjmp	.+4      	; 0x2796 <DIO_SetPin_PULLUP+0x5c>
    2792:	88 0f       	add	r24, r24
    2794:	99 1f       	adc	r25, r25
    2796:	6a 95       	dec	r22
    2798:	e2 f7       	brpl	.-8      	; 0x2792 <DIO_SetPin_PULLUP+0x58>
    279a:	28 2b       	or	r18, r24
    279c:	20 83       	st	Z, r18
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	08 95       	ret
		break;
		case DIO_PORTD:
		SET_BIT(PORTD, pin);
    27a2:	e2 e3       	ldi	r30, 0x32	; 50
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	20 81       	ld	r18, Z
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	02 c0       	rjmp	.+4      	; 0x27b2 <DIO_SetPin_PULLUP+0x78>
    27ae:	88 0f       	add	r24, r24
    27b0:	99 1f       	adc	r25, r25
    27b2:	6a 95       	dec	r22
    27b4:	e2 f7       	brpl	.-8      	; 0x27ae <DIO_SetPin_PULLUP+0x74>
    27b6:	28 2b       	or	r18, r24
    27b8:	20 83       	st	Z, r18
    27ba:	81 e0       	ldi	r24, 0x01	; 1
		default:
		state_error = FAIL;
		break;
	}
	return state_error;
}
    27bc:	08 95       	ret

000027be <ADC_Initialize>:
 */
#include "ADC_Private.h"
#include "ADC_Interface.h"

ERROR_STATE ADC_Initialize(){
	CLR_BIT(ADC_REF_voltage,REF_BIT1);SET_BIT(ADC_REF_voltage,REF_BIT0);
    27be:	e7 e2       	ldi	r30, 0x27	; 39
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	80 81       	ld	r24, Z
    27c4:	8f 77       	andi	r24, 0x7F	; 127
    27c6:	80 83       	st	Z, r24
    27c8:	80 81       	ld	r24, Z
    27ca:	80 64       	ori	r24, 0x40	; 64
    27cc:	80 83       	st	Z, r24
	SET_BIT(ADC_CNTR_State,ADC_EN_BIT);
    27ce:	e6 e2       	ldi	r30, 0x26	; 38
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	80 81       	ld	r24, Z
    27d4:	80 68       	ori	r24, 0x80	; 128
    27d6:	80 83       	st	Z, r24
	SET_BIT(ADC_CNTR_State,ADC_PRESCALER_BIT2);SET_BIT(ADC_CNTR_State,ADC_PRESCALER_BIT1);SET_BIT(ADC_CNTR_State,ADC_PRESCALER_BIT0);
    27d8:	80 81       	ld	r24, Z
    27da:	84 60       	ori	r24, 0x04	; 4
    27dc:	80 83       	st	Z, r24
    27de:	80 81       	ld	r24, Z
    27e0:	82 60       	ori	r24, 0x02	; 2
    27e2:	80 83       	st	Z, r24
    27e4:	80 81       	ld	r24, Z
    27e6:	81 60       	ori	r24, 0x01	; 1
    27e8:	80 83       	st	Z, r24
	return SUCCESS;
}
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	08 95       	ret

000027ee <ADC_Read>:

ERROR_STATE ADC_Read(ADC_PIN channel,UINT16_t* adc_value){
    27ee:	db 01       	movw	r26, r22
	ADC_REF_voltage &= 0XF0;
    27f0:	e7 e2       	ldi	r30, 0x27	; 39
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	90 81       	ld	r25, Z
    27f6:	90 7f       	andi	r25, 0xF0	; 240
    27f8:	90 83       	st	Z, r25
	ADC_REF_voltage |= channel;
    27fa:	90 81       	ld	r25, Z
    27fc:	89 2b       	or	r24, r25
    27fe:	80 83       	st	Z, r24
	CLR_BIT(ADC_CNTR_State,ADC_INTERRUPT_EN);
    2800:	e6 e2       	ldi	r30, 0x26	; 38
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	87 7f       	andi	r24, 0xF7	; 247
    2808:	80 83       	st	Z, r24
	CLR_BIT(ADC_CNTR_State,ADC_AUTO_TRIGGER_EN);
    280a:	80 81       	ld	r24, Z
    280c:	8f 7d       	andi	r24, 0xDF	; 223
    280e:	80 83       	st	Z, r24
	SET_BIT(ADC_CNTR_State,ADC_START_CONVERSION);
    2810:	80 81       	ld	r24, Z
    2812:	80 64       	ori	r24, 0x40	; 64
    2814:	80 83       	st	Z, r24
	while(GET_BIT(ADC_CNTR_State,ADC_NORMAL_FLAG));
    2816:	80 81       	ld	r24, Z
    2818:	86 fd       	sbrc	r24, 6
    281a:	fd cf       	rjmp	.-6      	; 0x2816 <ADC_Read+0x28>
	*adc_value = ADCL;
    281c:	84 b1       	in	r24, 0x04	; 4
    281e:	95 b1       	in	r25, 0x05	; 5
    2820:	8d 93       	st	X+, r24
    2822:	9c 93       	st	X, r25
	return SUCCESS;
}
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	08 95       	ret

00002828 <YELLOW_LED_TGL>:
}
void YELLOW_LED_OFF(void){
	DIO_SetPin_Value(YELLOW_LED_PORT,YELLOW_LED_PIN,YELLOW_LED_LOW);
}
void YELLOW_LED_TGL(void){
	DIO_TglPin_Value(YELLOW_LED_PORT,YELLOW_LED_PIN);
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	66 e0       	ldi	r22, 0x06	; 6
    282c:	0e 94 24 13 	call	0x2648	; 0x2648 <DIO_TglPin_Value>
}
    2830:	08 95       	ret

00002832 <YELLOW_LED_OFF>:
}
void YELLOW_LED_ON(void){
	DIO_SetPin_Value(YELLOW_LED_PORT,YELLOW_LED_PIN,YELLOW_LED_HIGH);
}
void YELLOW_LED_OFF(void){
	DIO_SetPin_Value(YELLOW_LED_PORT,YELLOW_LED_PIN,YELLOW_LED_LOW);
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	66 e0       	ldi	r22, 0x06	; 6
    2836:	40 e0       	ldi	r20, 0x00	; 0
    2838:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
}
    283c:	08 95       	ret

0000283e <YELLOW_LED_ON>:

void YELLOW_LED_Initializ(void){
	DIO_SetPin_Direction(YELLOW_LED_PORT,YELLOW_LED_PIN,YELLOW_LED_OUTPUT);
}
void YELLOW_LED_ON(void){
	DIO_SetPin_Value(YELLOW_LED_PORT,YELLOW_LED_PIN,YELLOW_LED_HIGH);
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	66 e0       	ldi	r22, 0x06	; 6
    2842:	41 e0       	ldi	r20, 0x01	; 1
    2844:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
}
    2848:	08 95       	ret

0000284a <YELLOW_LED_Initializ>:
 *                                      /_____/                /_____/
 */
#include "YELLOW_LED_Interface.h"

void YELLOW_LED_Initializ(void){
	DIO_SetPin_Direction(YELLOW_LED_PORT,YELLOW_LED_PIN,YELLOW_LED_OUTPUT);
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	66 e0       	ldi	r22, 0x06	; 6
    284e:	41 e0       	ldi	r20, 0x01	; 1
    2850:	0e 94 04 12 	call	0x2408	; 0x2408 <DIO_SetPin_Direction>
}
    2854:	08 95       	ret

00002856 <Speed_Analog_Read>:
		state_error = FAIL;
	}
	return state_error;
}

ERROR_STATE Speed_Analog_Read(UINT16_t* POT_value){
    2856:	bc 01       	movw	r22, r24
	ERROR_STATE state_error = SUCCESS;
	if(ADC_Read(Speed_Analog_PIN,POT_value)){
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	0e 94 f7 13 	call	0x27ee	; 0x27ee <ADC_Read>
    285e:	81 11       	cpse	r24, r1
    2860:	81 e0       	ldi	r24, 0x01	; 1
		state_error = SUCCESS;
	}else{
		state_error = FAIL;
	}
	return state_error;
}
    2862:	08 95       	ret

00002864 <Speed_Analog_Initialize>:
 */
#include "Engine_Sensor_Interface.h"

ERROR_STATE Speed_Analog_Initialize(){
	ERROR_STATE state_error = SUCCESS;
	if(ADC_Initialize()){
    2864:	0e 94 df 13 	call	0x27be	; 0x27be <ADC_Initialize>
    2868:	81 11       	cpse	r24, r1
    286a:	81 e0       	ldi	r24, 0x01	; 1
		state_error = SUCCESS;
	}else{
		state_error = FAIL;
	}
	return state_error;
}
    286c:	08 95       	ret

0000286e <LIMIT_Speed_Analog_Read>:
		state_error = FAIL;
	}
	return state_error;
}

ERROR_STATE LIMIT_Speed_Analog_Read(UINT16_t* POT_value){
    286e:	bc 01       	movw	r22, r24
	ERROR_STATE state_error = SUCCESS;
	if(ADC_Read(LIMIT_Speed_Analog_PIN,POT_value)){
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	0e 94 f7 13 	call	0x27ee	; 0x27ee <ADC_Read>
    2876:	81 11       	cpse	r24, r1
    2878:	81 e0       	ldi	r24, 0x01	; 1
		state_error = SUCCESS;
	}else{
		state_error = FAIL;
	}
	return state_error;
}
    287a:	08 95       	ret

0000287c <LIMIT_Speed_Analog_Initialize>:

#include "Engine_Limit_Sensor_Interface.h"

ERROR_STATE LIMIT_Speed_Analog_Initialize(){
	ERROR_STATE state_error = SUCCESS;
	if(ADC_Initialize()){
    287c:	0e 94 df 13 	call	0x27be	; 0x27be <ADC_Initialize>
    2880:	81 11       	cpse	r24, r1
    2882:	81 e0       	ldi	r24, 0x01	; 1
		state_error = SUCCESS;
	}else{
		state_error = FAIL;
	}
	return state_error;
}
    2884:	08 95       	ret

00002886 <LCD_Write_Character>:
	_delay_ms(2);
	return state_error;
}

ERROR_STATE LCD_Write_Character(UINT8_t character)
{
    2886:	0f 93       	push	r16
    2888:	1f 93       	push	r17
    288a:	18 2f       	mov	r17, r24
	ERROR_STATE state_error = SUCCESS;
	//Send high nibble first
	//LCD = (LCD & 0x0F) | (character & 0xF0);
	DIO_SetPin_Value(LCD_DATA_PORT,LCD_D7,GET_BIT(character,7));
    288c:	48 2f       	mov	r20, r24
    288e:	44 1f       	adc	r20, r20
    2890:	44 27       	eor	r20, r20
    2892:	44 1f       	adc	r20, r20
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	64 e0       	ldi	r22, 0x04	; 4
    2898:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_DATA_PORT,LCD_D6,GET_BIT(character,6));
    289c:	41 2f       	mov	r20, r17
    289e:	42 95       	swap	r20
    28a0:	46 95       	lsr	r20
    28a2:	46 95       	lsr	r20
    28a4:	43 70       	andi	r20, 0x03	; 3
    28a6:	41 70       	andi	r20, 0x01	; 1
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	62 e0       	ldi	r22, 0x02	; 2
    28ac:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_DATA_PORT,LCD_D5,GET_BIT(character,5));
    28b0:	41 2f       	mov	r20, r17
    28b2:	42 95       	swap	r20
    28b4:	46 95       	lsr	r20
    28b6:	47 70       	andi	r20, 0x07	; 7
    28b8:	41 70       	andi	r20, 0x01	; 1
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	61 e0       	ldi	r22, 0x01	; 1
    28be:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_DATA_PORT,LCD_D4,GET_BIT(character,4));
    28c2:	41 2f       	mov	r20, r17
    28c4:	42 95       	swap	r20
    28c6:	4f 70       	andi	r20, 0x0F	; 15
    28c8:	41 70       	andi	r20, 0x01	; 1
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	60 e0       	ldi	r22, 0x00	; 0
    28ce:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
	//Register select will select data register
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_RS, LCD_HIGH);
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	63 e0       	ldi	r22, 0x03	; 3
    28d6:	41 e0       	ldi	r20, 0x01	; 1
    28d8:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
	//Write on LCD

	//Send high to low pulse
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_HIGH);
    28dc:	80 e0       	ldi	r24, 0x00	; 0
    28de:	62 e0       	ldi	r22, 0x02	; 2
    28e0:	41 e0       	ldi	r20, 0x01	; 1
    28e2:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28e6:	05 e0       	ldi	r16, 0x05	; 5
    28e8:	80 2f       	mov	r24, r16
    28ea:	8a 95       	dec	r24
    28ec:	f1 f7       	brne	.-4      	; 0x28ea <LCD_Write_Character+0x64>
	_delay_us(1);
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
    28ee:	80 e0       	ldi	r24, 0x00	; 0
    28f0:	62 e0       	ldi	r22, 0x02	; 2
    28f2:	40 e0       	ldi	r20, 0x00	; 0
    28f4:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28f8:	80 e2       	ldi	r24, 0x20	; 32
    28fa:	93 e0       	ldi	r25, 0x03	; 3
    28fc:	01 97       	sbiw	r24, 0x01	; 1
    28fe:	f1 f7       	brne	.-4      	; 0x28fc <LCD_Write_Character+0x76>
	_delay_us(200);
	//Send lower nibble
	//LCD =  (LCD & 0x0F) | (character << 4);
	DIO_SetPin_Value(LCD_DATA_PORT,LCD_D7,GET_BIT(character,3));
    2900:	41 2f       	mov	r20, r17
    2902:	46 95       	lsr	r20
    2904:	46 95       	lsr	r20
    2906:	46 95       	lsr	r20
    2908:	41 70       	andi	r20, 0x01	; 1
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	64 e0       	ldi	r22, 0x04	; 4
    290e:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_DATA_PORT,LCD_D6,GET_BIT(character,2));
    2912:	41 2f       	mov	r20, r17
    2914:	46 95       	lsr	r20
    2916:	46 95       	lsr	r20
    2918:	41 70       	andi	r20, 0x01	; 1
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	62 e0       	ldi	r22, 0x02	; 2
    291e:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_DATA_PORT,LCD_D5,GET_BIT(character,1));
    2922:	41 2f       	mov	r20, r17
    2924:	46 95       	lsr	r20
    2926:	41 70       	andi	r20, 0x01	; 1
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	61 e0       	ldi	r22, 0x01	; 1
    292c:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_DATA_PORT,LCD_D4,GET_BIT(character,0));
    2930:	11 70       	andi	r17, 0x01	; 1
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	60 e0       	ldi	r22, 0x00	; 0
    2936:	41 2f       	mov	r20, r17
    2938:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
	//Send high to low pulse
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_HIGH);
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	62 e0       	ldi	r22, 0x02	; 2
    2940:	41 e0       	ldi	r20, 0x01	; 1
    2942:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2946:	0a 95       	dec	r16
    2948:	f1 f7       	brne	.-4      	; 0x2946 <LCD_Write_Character+0xc0>
	_delay_us(1);
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	62 e0       	ldi	r22, 0x02	; 2
    294e:	40 e0       	ldi	r20, 0x00	; 0
    2950:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2954:	80 e4       	ldi	r24, 0x40	; 64
    2956:	9f e1       	ldi	r25, 0x1F	; 31
    2958:	01 97       	sbiw	r24, 0x01	; 1
    295a:	f1 f7       	brne	.-4      	; 0x2958 <LCD_Write_Character+0xd2>
	_delay_ms(2);
	return state_error;
}
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	1f 91       	pop	r17
    2960:	0f 91       	pop	r16
    2962:	08 95       	ret

00002964 <LCD_Write_Number>:
	}
	return state_error;
}

ERROR_STATE LCD_Write_Number(SINT64_t number)
{
    2964:	2f 92       	push	r2
    2966:	3f 92       	push	r3
    2968:	4f 92       	push	r4
    296a:	5f 92       	push	r5
    296c:	6f 92       	push	r6
    296e:	7f 92       	push	r7
    2970:	8f 92       	push	r8
    2972:	9f 92       	push	r9
    2974:	af 92       	push	r10
    2976:	bf 92       	push	r11
    2978:	cf 92       	push	r12
    297a:	df 92       	push	r13
    297c:	ef 92       	push	r14
    297e:	ff 92       	push	r15
    2980:	0f 93       	push	r16
    2982:	1f 93       	push	r17
    2984:	df 93       	push	r29
    2986:	cf 93       	push	r28
    2988:	cd b7       	in	r28, 0x3d	; 61
    298a:	de b7       	in	r29, 0x3e	; 62
    298c:	6a 97       	sbiw	r28, 0x1a	; 26
    298e:	0f b6       	in	r0, 0x3f	; 63
    2990:	f8 94       	cli
    2992:	de bf       	out	0x3e, r29	; 62
    2994:	0f be       	out	0x3f, r0	; 63
    2996:	cd bf       	out	0x3d, r28	; 61
    2998:	32 2e       	mov	r3, r18
    299a:	23 2e       	mov	r2, r19
    299c:	4d 8b       	std	Y+21, r20	; 0x15
    299e:	5e 8b       	std	Y+22, r21	; 0x16
    29a0:	6f 8b       	std	Y+23, r22	; 0x17
    29a2:	78 8f       	std	Y+24, r23	; 0x18
    29a4:	89 8f       	std	Y+25, r24	; 0x19
    29a6:	9a 8f       	std	Y+26, r25	; 0x1a
	ERROR_STATE state_error = SUCCESS;
	if(number < 0){
    29a8:	99 23       	and	r25, r25
    29aa:	0c f0       	brlt	.+2      	; 0x29ae <LCD_Write_Number+0x4a>
    29ac:	75 c0       	rjmp	.+234    	; 0x2a98 <LCD_Write_Number+0x134>
		LCD_Write_Character('-');
    29ae:	8d e2       	ldi	r24, 0x2D	; 45
    29b0:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		number*=(-1);
    29b4:	40 e0       	ldi	r20, 0x00	; 0
    29b6:	50 e0       	ldi	r21, 0x00	; 0
    29b8:	60 e0       	ldi	r22, 0x00	; 0
    29ba:	70 e0       	ldi	r23, 0x00	; 0
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	a0 e0       	ldi	r26, 0x00	; 0
    29c0:	23 2d       	mov	r18, r3
    29c2:	21 95       	neg	r18
    29c4:	91 e0       	ldi	r25, 0x01	; 1
    29c6:	12 16       	cp	r1, r18
    29c8:	08 f0       	brcs	.+2      	; 0x29cc <LCD_Write_Number+0x68>
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	34 2f       	mov	r19, r20
    29ce:	32 19       	sub	r19, r2
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	43 17       	cp	r20, r19
    29d4:	08 f0       	brcs	.+2      	; 0x29d8 <LCD_Write_Number+0x74>
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	43 2f       	mov	r20, r19
    29da:	49 1b       	sub	r20, r25
    29dc:	91 e0       	ldi	r25, 0x01	; 1
    29de:	34 17       	cp	r19, r20
    29e0:	08 f0       	brcs	.+2      	; 0x29e4 <LCD_Write_Number+0x80>
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	89 2b       	or	r24, r25
    29e6:	34 2f       	mov	r19, r20
    29e8:	45 2f       	mov	r20, r21
    29ea:	9d 89       	ldd	r25, Y+21	; 0x15
    29ec:	49 1b       	sub	r20, r25
    29ee:	91 e0       	ldi	r25, 0x01	; 1
    29f0:	54 17       	cp	r21, r20
    29f2:	08 f0       	brcs	.+2      	; 0x29f6 <LCD_Write_Number+0x92>
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	54 2f       	mov	r21, r20
    29f8:	58 1b       	sub	r21, r24
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	45 17       	cp	r20, r21
    29fe:	08 f0       	brcs	.+2      	; 0x2a02 <LCD_Write_Number+0x9e>
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	98 2b       	or	r25, r24
    2a04:	45 2f       	mov	r20, r21
    2a06:	56 2f       	mov	r21, r22
    2a08:	ee 89       	ldd	r30, Y+22	; 0x16
    2a0a:	5e 1b       	sub	r21, r30
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	65 17       	cp	r22, r21
    2a10:	08 f0       	brcs	.+2      	; 0x2a14 <LCD_Write_Number+0xb0>
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	65 2f       	mov	r22, r21
    2a16:	69 1b       	sub	r22, r25
    2a18:	91 e0       	ldi	r25, 0x01	; 1
    2a1a:	56 17       	cp	r21, r22
    2a1c:	08 f0       	brcs	.+2      	; 0x2a20 <LCD_Write_Number+0xbc>
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	89 2b       	or	r24, r25
    2a22:	56 2f       	mov	r21, r22
    2a24:	67 2f       	mov	r22, r23
    2a26:	9f 89       	ldd	r25, Y+23	; 0x17
    2a28:	69 1b       	sub	r22, r25
    2a2a:	91 e0       	ldi	r25, 0x01	; 1
    2a2c:	76 17       	cp	r23, r22
    2a2e:	08 f0       	brcs	.+2      	; 0x2a32 <LCD_Write_Number+0xce>
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	76 2f       	mov	r23, r22
    2a34:	78 1b       	sub	r23, r24
    2a36:	81 e0       	ldi	r24, 0x01	; 1
    2a38:	67 17       	cp	r22, r23
    2a3a:	08 f0       	brcs	.+2      	; 0x2a3e <LCD_Write_Number+0xda>
    2a3c:	80 e0       	ldi	r24, 0x00	; 0
    2a3e:	98 2b       	or	r25, r24
    2a40:	67 2f       	mov	r22, r23
    2a42:	7f 2f       	mov	r23, r31
    2a44:	e8 8d       	ldd	r30, Y+24	; 0x18
    2a46:	7e 1b       	sub	r23, r30
    2a48:	e1 e0       	ldi	r30, 0x01	; 1
    2a4a:	f7 17       	cp	r31, r23
    2a4c:	08 f0       	brcs	.+2      	; 0x2a50 <LCD_Write_Number+0xec>
    2a4e:	e0 e0       	ldi	r30, 0x00	; 0
    2a50:	f7 2f       	mov	r31, r23
    2a52:	f9 1b       	sub	r31, r25
    2a54:	9f 2f       	mov	r25, r31
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	7f 17       	cp	r23, r31
    2a5a:	08 f0       	brcs	.+2      	; 0x2a5e <LCD_Write_Number+0xfa>
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	e8 2b       	or	r30, r24
    2a60:	79 2f       	mov	r23, r25
    2a62:	8a 2f       	mov	r24, r26
    2a64:	99 8d       	ldd	r25, Y+25	; 0x19
    2a66:	89 1b       	sub	r24, r25
    2a68:	f1 e0       	ldi	r31, 0x01	; 1
    2a6a:	a8 17       	cp	r26, r24
    2a6c:	08 f0       	brcs	.+2      	; 0x2a70 <LCD_Write_Number+0x10c>
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	98 2f       	mov	r25, r24
    2a72:	9e 1b       	sub	r25, r30
    2a74:	e9 2f       	mov	r30, r25
    2a76:	91 e0       	ldi	r25, 0x01	; 1
    2a78:	8e 17       	cp	r24, r30
    2a7a:	08 f0       	brcs	.+2      	; 0x2a7e <LCD_Write_Number+0x11a>
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	f9 2b       	or	r31, r25
    2a80:	80 e0       	ldi	r24, 0x00	; 0
    2a82:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a84:	89 1b       	sub	r24, r25
    2a86:	32 2e       	mov	r3, r18
    2a88:	23 2e       	mov	r2, r19
    2a8a:	4d 8b       	std	Y+21, r20	; 0x15
    2a8c:	5e 8b       	std	Y+22, r21	; 0x16
    2a8e:	6f 8b       	std	Y+23, r22	; 0x17
    2a90:	78 8f       	std	Y+24, r23	; 0x18
    2a92:	e9 8f       	std	Y+25, r30	; 0x19
    2a94:	8f 1b       	sub	r24, r31
    2a96:	8a 8f       	std	Y+26, r24	; 0x1a
	}
	SINT64_t num = number;
	UINT16_t digit = 0;
	while(num != 0){
    2a98:	83 2d       	mov	r24, r3
    2a9a:	82 29       	or	r24, r2
    2a9c:	ed 89       	ldd	r30, Y+21	; 0x15
    2a9e:	8e 2b       	or	r24, r30
    2aa0:	fe 89       	ldd	r31, Y+22	; 0x16
    2aa2:	8f 2b       	or	r24, r31
    2aa4:	9f 89       	ldd	r25, Y+23	; 0x17
    2aa6:	89 2b       	or	r24, r25
    2aa8:	e8 8d       	ldd	r30, Y+24	; 0x18
    2aaa:	8e 2b       	or	r24, r30
    2aac:	f9 8d       	ldd	r31, Y+25	; 0x19
    2aae:	8f 2b       	or	r24, r31
    2ab0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ab2:	89 2b       	or	r24, r25
    2ab4:	09 f4       	brne	.+2      	; 0x2ab8 <LCD_Write_Number+0x154>
    2ab6:	8f c0       	rjmp	.+286    	; 0x2bd6 <LCD_Write_Number+0x272>
    2ab8:	23 2d       	mov	r18, r3
    2aba:	32 2d       	mov	r19, r2
    2abc:	4d 89       	ldd	r20, Y+21	; 0x15
    2abe:	5e 89       	ldd	r21, Y+22	; 0x16
    2ac0:	6f 89       	ldd	r22, Y+23	; 0x17
    2ac2:	7e 2f       	mov	r23, r30
    2ac4:	ef 2f       	mov	r30, r31
    2ac6:	44 24       	eor	r4, r4
    2ac8:	55 24       	eor	r5, r5
		digit++;
    2aca:	08 94       	sec
    2acc:	41 1c       	adc	r4, r1
    2ace:	51 1c       	adc	r5, r1
		num/=10;
    2ad0:	8e 2f       	mov	r24, r30
    2ad2:	0f 2e       	mov	r0, r31
    2ad4:	fa e0       	ldi	r31, 0x0A	; 10
    2ad6:	af 2e       	mov	r10, r31
    2ad8:	f0 2d       	mov	r31, r0
    2ada:	bb 24       	eor	r11, r11
    2adc:	cc 24       	eor	r12, r12
    2ade:	dd 24       	eor	r13, r13
    2ae0:	ee 24       	eor	r14, r14
    2ae2:	ff 24       	eor	r15, r15
    2ae4:	00 e0       	ldi	r16, 0x00	; 0
    2ae6:	10 e0       	ldi	r17, 0x00	; 0
    2ae8:	0e 94 49 00 	call	0x92	; 0x92 <__divdi3>
    2aec:	e8 2f       	mov	r30, r24
		LCD_Write_Character('-');
		number*=(-1);
	}
	SINT64_t num = number;
	UINT16_t digit = 0;
	while(num != 0){
    2aee:	82 2f       	mov	r24, r18
    2af0:	83 2b       	or	r24, r19
    2af2:	84 2b       	or	r24, r20
    2af4:	85 2b       	or	r24, r21
    2af6:	86 2b       	or	r24, r22
    2af8:	87 2b       	or	r24, r23
    2afa:	8e 2b       	or	r24, r30
    2afc:	89 2b       	or	r24, r25
    2afe:	29 f7       	brne	.-54     	; 0x2aca <LCD_Write_Number+0x166>
	if(number == 0){
		LCD_Write_Character('0');
		}else{
		UINT8_t arr_num[20];

		for(int i = digit-1 ; i >= 0 ;i--){
    2b00:	42 01       	movw	r8, r4
    2b02:	08 94       	sec
    2b04:	81 08       	sbc	r8, r1
    2b06:	91 08       	sbc	r9, r1
    2b08:	99 20       	and	r9, r9
    2b0a:	bc f1       	brlt	.+110    	; 0x2b7a <LCD_Write_Number+0x216>
    2b0c:	ce 01       	movw	r24, r28
    2b0e:	01 96       	adiw	r24, 0x01	; 1
    2b10:	3c 01       	movw	r6, r24
    2b12:	68 0c       	add	r6, r8
    2b14:	79 1c       	adc	r7, r9
			arr_num[i]=number %10 + '0';
    2b16:	23 2d       	mov	r18, r3
    2b18:	32 2d       	mov	r19, r2
    2b1a:	4d 89       	ldd	r20, Y+21	; 0x15
    2b1c:	5e 89       	ldd	r21, Y+22	; 0x16
    2b1e:	6f 89       	ldd	r22, Y+23	; 0x17
    2b20:	78 8d       	ldd	r23, Y+24	; 0x18
    2b22:	89 8d       	ldd	r24, Y+25	; 0x19
    2b24:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b26:	0f 2e       	mov	r0, r31
    2b28:	fa e0       	ldi	r31, 0x0A	; 10
    2b2a:	af 2e       	mov	r10, r31
    2b2c:	f0 2d       	mov	r31, r0
    2b2e:	bb 24       	eor	r11, r11
    2b30:	cc 24       	eor	r12, r12
    2b32:	dd 24       	eor	r13, r13
    2b34:	ee 24       	eor	r14, r14
    2b36:	ff 24       	eor	r15, r15
    2b38:	00 e0       	ldi	r16, 0x00	; 0
    2b3a:	10 e0       	ldi	r17, 0x00	; 0
    2b3c:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__moddi3>
    2b40:	20 5d       	subi	r18, 0xD0	; 208
    2b42:	f3 01       	movw	r30, r6
    2b44:	20 83       	st	Z, r18
			number/=10;
    2b46:	23 2d       	mov	r18, r3
    2b48:	32 2d       	mov	r19, r2
    2b4a:	4d 89       	ldd	r20, Y+21	; 0x15
    2b4c:	5e 89       	ldd	r21, Y+22	; 0x16
    2b4e:	6f 89       	ldd	r22, Y+23	; 0x17
    2b50:	78 8d       	ldd	r23, Y+24	; 0x18
    2b52:	89 8d       	ldd	r24, Y+25	; 0x19
    2b54:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b56:	0e 94 49 00 	call	0x92	; 0x92 <__divdi3>
    2b5a:	32 2e       	mov	r3, r18
    2b5c:	23 2e       	mov	r2, r19
    2b5e:	4d 8b       	std	Y+21, r20	; 0x15
    2b60:	5e 8b       	std	Y+22, r21	; 0x16
    2b62:	6f 8b       	std	Y+23, r22	; 0x17
    2b64:	78 8f       	std	Y+24, r23	; 0x18
    2b66:	89 8f       	std	Y+25, r24	; 0x19
    2b68:	9a 8f       	std	Y+26, r25	; 0x1a
	if(number == 0){
		LCD_Write_Character('0');
		}else{
		UINT8_t arr_num[20];

		for(int i = digit-1 ; i >= 0 ;i--){
    2b6a:	08 94       	sec
    2b6c:	81 08       	sbc	r8, r1
    2b6e:	91 08       	sbc	r9, r1
    2b70:	08 94       	sec
    2b72:	61 08       	sbc	r6, r1
    2b74:	71 08       	sbc	r7, r1
    2b76:	99 20       	and	r9, r9
    2b78:	74 f6       	brge	.-100    	; 0x2b16 <LCD_Write_Number+0x1b2>
			arr_num[i]=number %10 + '0';
			number/=10;
		}
		//itoa(number , arr_num , 10);
		for(int i =0 ; i<digit;i++){
    2b7a:	41 14       	cp	r4, r1
    2b7c:	51 04       	cpc	r5, r1
    2b7e:	89 f0       	breq	.+34     	; 0x2ba2 <LCD_Write_Number+0x23e>
    2b80:	00 e0       	ldi	r16, 0x00	; 0
    2b82:	10 e0       	ldi	r17, 0x00	; 0
			LCD_Write_Character(arr_num[i]);
    2b84:	7e 01       	movw	r14, r28
    2b86:	08 94       	sec
    2b88:	e1 1c       	adc	r14, r1
    2b8a:	f1 1c       	adc	r15, r1
    2b8c:	f7 01       	movw	r30, r14
    2b8e:	e0 0f       	add	r30, r16
    2b90:	f1 1f       	adc	r31, r17
    2b92:	80 81       	ld	r24, Z
    2b94:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		for(int i = digit-1 ; i >= 0 ;i--){
			arr_num[i]=number %10 + '0';
			number/=10;
		}
		//itoa(number , arr_num , 10);
		for(int i =0 ; i<digit;i++){
    2b98:	0f 5f       	subi	r16, 0xFF	; 255
    2b9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b9c:	04 15       	cp	r16, r4
    2b9e:	15 05       	cpc	r17, r5
    2ba0:	a8 f3       	brcs	.-22     	; 0x2b8c <LCD_Write_Number+0x228>
			LCD_Write_Character(arr_num[i]);
		}
	}
	return state_error;
}
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	6a 96       	adiw	r28, 0x1a	; 26
    2ba6:	0f b6       	in	r0, 0x3f	; 63
    2ba8:	f8 94       	cli
    2baa:	de bf       	out	0x3e, r29	; 62
    2bac:	0f be       	out	0x3f, r0	; 63
    2bae:	cd bf       	out	0x3d, r28	; 61
    2bb0:	cf 91       	pop	r28
    2bb2:	df 91       	pop	r29
    2bb4:	1f 91       	pop	r17
    2bb6:	0f 91       	pop	r16
    2bb8:	ff 90       	pop	r15
    2bba:	ef 90       	pop	r14
    2bbc:	df 90       	pop	r13
    2bbe:	cf 90       	pop	r12
    2bc0:	bf 90       	pop	r11
    2bc2:	af 90       	pop	r10
    2bc4:	9f 90       	pop	r9
    2bc6:	8f 90       	pop	r8
    2bc8:	7f 90       	pop	r7
    2bca:	6f 90       	pop	r6
    2bcc:	5f 90       	pop	r5
    2bce:	4f 90       	pop	r4
    2bd0:	3f 90       	pop	r3
    2bd2:	2f 90       	pop	r2
    2bd4:	08 95       	ret
	while(num != 0){
		digit++;
		num/=10;
	}
	if(number == 0){
		LCD_Write_Character('0');
    2bd6:	80 e3       	ldi	r24, 0x30	; 48
    2bd8:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
    2bdc:	e2 cf       	rjmp	.-60     	; 0x2ba2 <LCD_Write_Number+0x23e>

00002bde <LCD_Write_String>:
	_delay_ms(2);
	return state_error;
}

ERROR_STATE LCD_Write_String(const char *str)
{
    2bde:	cf 93       	push	r28
    2be0:	df 93       	push	r29
    2be2:	ec 01       	movw	r28, r24
	ERROR_STATE state_error = SUCCESS;
	while (*str != '\0')
    2be4:	88 81       	ld	r24, Y
    2be6:	88 23       	and	r24, r24
    2be8:	31 f0       	breq	.+12     	; 0x2bf6 <LCD_Write_String+0x18>
	{
		LCD_Write_Character(*str);
    2bea:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		str++;
    2bee:	21 96       	adiw	r28, 0x01	; 1
}

ERROR_STATE LCD_Write_String(const char *str)
{
	ERROR_STATE state_error = SUCCESS;
	while (*str != '\0')
    2bf0:	88 81       	ld	r24, Y
    2bf2:	88 23       	and	r24, r24
    2bf4:	d1 f7       	brne	.-12     	; 0x2bea <LCD_Write_String+0xc>
	{
		LCD_Write_Character(*str);
		str++;
	}
	return state_error;
}
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	df 91       	pop	r29
    2bfa:	cf 91       	pop	r28
    2bfc:	08 95       	ret

00002bfe <LCD_Write_Command>:
	LCD_Write_Command(0x01);
	return state_error;
}

ERROR_STATE LCD_Write_Command(UINT8_t command)
{
    2bfe:	0f 93       	push	r16
    2c00:	1f 93       	push	r17
    2c02:	18 2f       	mov	r17, r24
	ERROR_STATE state_error = SUCCESS;
	//Send high nibble first
	//LCD = (LCD & 0x0F) | (command & 0xF0);
	DIO_SetPin_Value(LCD_DATA_PORT,LCD_D7,GET_BIT(command,7));
    2c04:	48 2f       	mov	r20, r24
    2c06:	44 1f       	adc	r20, r20
    2c08:	44 27       	eor	r20, r20
    2c0a:	44 1f       	adc	r20, r20
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	64 e0       	ldi	r22, 0x04	; 4
    2c10:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_DATA_PORT,LCD_D6,GET_BIT(command,6));
    2c14:	41 2f       	mov	r20, r17
    2c16:	42 95       	swap	r20
    2c18:	46 95       	lsr	r20
    2c1a:	46 95       	lsr	r20
    2c1c:	43 70       	andi	r20, 0x03	; 3
    2c1e:	41 70       	andi	r20, 0x01	; 1
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	62 e0       	ldi	r22, 0x02	; 2
    2c24:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_DATA_PORT,LCD_D5,GET_BIT(command,5));
    2c28:	41 2f       	mov	r20, r17
    2c2a:	42 95       	swap	r20
    2c2c:	46 95       	lsr	r20
    2c2e:	47 70       	andi	r20, 0x07	; 7
    2c30:	41 70       	andi	r20, 0x01	; 1
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	61 e0       	ldi	r22, 0x01	; 1
    2c36:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_DATA_PORT,LCD_D4,GET_BIT(command,4));
    2c3a:	41 2f       	mov	r20, r17
    2c3c:	42 95       	swap	r20
    2c3e:	4f 70       	andi	r20, 0x0F	; 15
    2c40:	41 70       	andi	r20, 0x01	; 1
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	60 e0       	ldi	r22, 0x00	; 0
    2c46:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
	//Register select will select control register
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_RS, LCD_LOW);
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
    2c4c:	63 e0       	ldi	r22, 0x03	; 3
    2c4e:	40 e0       	ldi	r20, 0x00	; 0
    2c50:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
	//Write on LCD
	//Send high to low pulse
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_HIGH);
    2c54:	80 e0       	ldi	r24, 0x00	; 0
    2c56:	62 e0       	ldi	r22, 0x02	; 2
    2c58:	41 e0       	ldi	r20, 0x01	; 1
    2c5a:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c5e:	05 e0       	ldi	r16, 0x05	; 5
    2c60:	80 2f       	mov	r24, r16
    2c62:	8a 95       	dec	r24
    2c64:	f1 f7       	brne	.-4      	; 0x2c62 <LCD_Write_Command+0x64>
	_delay_us(1);
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	62 e0       	ldi	r22, 0x02	; 2
    2c6a:	40 e0       	ldi	r20, 0x00	; 0
    2c6c:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c70:	80 e2       	ldi	r24, 0x20	; 32
    2c72:	93 e0       	ldi	r25, 0x03	; 3
    2c74:	01 97       	sbiw	r24, 0x01	; 1
    2c76:	f1 f7       	brne	.-4      	; 0x2c74 <LCD_Write_Command+0x76>
	_delay_us(200);
	//Send low nibble
	//LCD =  (LCD & 0x0F) | (command << 4);
	DIO_SetPin_Value(LCD_DATA_PORT,LCD_D7,GET_BIT(command,3));
    2c78:	41 2f       	mov	r20, r17
    2c7a:	46 95       	lsr	r20
    2c7c:	46 95       	lsr	r20
    2c7e:	46 95       	lsr	r20
    2c80:	41 70       	andi	r20, 0x01	; 1
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	64 e0       	ldi	r22, 0x04	; 4
    2c86:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_DATA_PORT,LCD_D6,GET_BIT(command,2));
    2c8a:	41 2f       	mov	r20, r17
    2c8c:	46 95       	lsr	r20
    2c8e:	46 95       	lsr	r20
    2c90:	41 70       	andi	r20, 0x01	; 1
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	62 e0       	ldi	r22, 0x02	; 2
    2c96:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_DATA_PORT,LCD_D5,GET_BIT(command,1));
    2c9a:	41 2f       	mov	r20, r17
    2c9c:	46 95       	lsr	r20
    2c9e:	41 70       	andi	r20, 0x01	; 1
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	61 e0       	ldi	r22, 0x01	; 1
    2ca4:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_DATA_PORT,LCD_D4,GET_BIT(command,0));
    2ca8:	11 70       	andi	r17, 0x01	; 1
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	60 e0       	ldi	r22, 0x00	; 0
    2cae:	41 2f       	mov	r20, r17
    2cb0:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
	//Send high to low pulse
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_HIGH);
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
    2cb6:	62 e0       	ldi	r22, 0x02	; 2
    2cb8:	41 e0       	ldi	r20, 0x01	; 1
    2cba:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2cbe:	0a 95       	dec	r16
    2cc0:	f1 f7       	brne	.-4      	; 0x2cbe <LCD_Write_Command+0xc0>
	_delay_us(1);
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	62 e0       	ldi	r22, 0x02	; 2
    2cc6:	40 e0       	ldi	r20, 0x00	; 0
    2cc8:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ccc:	80 e4       	ldi	r24, 0x40	; 64
    2cce:	9f e1       	ldi	r25, 0x1F	; 31
    2cd0:	01 97       	sbiw	r24, 0x01	; 1
    2cd2:	f1 f7       	brne	.-4      	; 0x2cd0 <LCD_Write_Command+0xd2>
	_delay_ms(2);
	return state_error;
}
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	1f 91       	pop	r17
    2cd8:	0f 91       	pop	r16
    2cda:	08 95       	ret

00002cdc <load_custom_characters>:
    0b00011,
    0b00001,
	0b11111
};
// Function to load custom characters into CGRAM
void load_custom_characters() {
    2cdc:	0f 93       	push	r16
    2cde:	1f 93       	push	r17
    2ce0:	cf 93       	push	r28
    2ce2:	df 93       	push	r29
    LCD_Write_Command(0x40);  // Set CGRAM address to 0x40
    2ce4:	80 e4       	ldi	r24, 0x40	; 64
    2ce6:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_Write_Command>
    2cea:	cb e6       	ldi	r28, 0x6B	; 107
    2cec:	d2 e0       	ldi	r29, 0x02	; 2
    for (int i = 0; i < 8; i++) {
    2cee:	03 e7       	ldi	r16, 0x73	; 115
    2cf0:	12 e0       	ldi	r17, 0x02	; 2
          LCD_Write_Character(P_0[i]);
    2cf2:	89 91       	ld	r24, Y+
    2cf4:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
	0b11111
};
// Function to load custom characters into CGRAM
void load_custom_characters() {
    LCD_Write_Command(0x40);  // Set CGRAM address to 0x40
    for (int i = 0; i < 8; i++) {
    2cf8:	c0 17       	cp	r28, r16
    2cfa:	d1 07       	cpc	r29, r17
    2cfc:	d1 f7       	brne	.-12     	; 0x2cf2 <load_custom_characters+0x16>
          LCD_Write_Character(P_0[i]);
    }
    LCD_Write_Command(0x48);  // Set CGRAM address to 0x48
    2cfe:	88 e4       	ldi	r24, 0x48	; 72
    2d00:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_Write_Command>
    2d04:	c3 e7       	ldi	r28, 0x73	; 115
    2d06:	d2 e0       	ldi	r29, 0x02	; 2
    for (int i = 0; i < 8; i++) {
    2d08:	0b e7       	ldi	r16, 0x7B	; 123
    2d0a:	12 e0       	ldi	r17, 0x02	; 2
        	LCD_Write_Character(P_1[i]);
    2d0c:	89 91       	ld	r24, Y+
    2d0e:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
    LCD_Write_Command(0x40);  // Set CGRAM address to 0x40
    for (int i = 0; i < 8; i++) {
          LCD_Write_Character(P_0[i]);
    }
    LCD_Write_Command(0x48);  // Set CGRAM address to 0x48
    for (int i = 0; i < 8; i++) {
    2d12:	c0 17       	cp	r28, r16
    2d14:	d1 07       	cpc	r29, r17
    2d16:	d1 f7       	brne	.-12     	; 0x2d0c <load_custom_characters+0x30>
        	LCD_Write_Character(P_1[i]);
    }
    LCD_Write_Command(0x50);  // Set CGRAM address to 0x50
    2d18:	80 e5       	ldi	r24, 0x50	; 80
    2d1a:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_Write_Command>
    2d1e:	cb e7       	ldi	r28, 0x7B	; 123
    2d20:	d2 e0       	ldi	r29, 0x02	; 2
    for (int i = 0; i < 8; i++) {
    2d22:	03 e8       	ldi	r16, 0x83	; 131
    2d24:	12 e0       	ldi	r17, 0x02	; 2
        	LCD_Write_Character(P_2[i]);
    2d26:	89 91       	ld	r24, Y+
    2d28:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
    LCD_Write_Command(0x48);  // Set CGRAM address to 0x48
    for (int i = 0; i < 8; i++) {
        	LCD_Write_Character(P_1[i]);
    }
    LCD_Write_Command(0x50);  // Set CGRAM address to 0x50
    for (int i = 0; i < 8; i++) {
    2d2c:	c0 17       	cp	r28, r16
    2d2e:	d1 07       	cpc	r29, r17
    2d30:	d1 f7       	brne	.-12     	; 0x2d26 <load_custom_characters+0x4a>
        	LCD_Write_Character(P_2[i]);
    }
    LCD_Write_Command(0x58);  // Set CGRAM address to 0x58
    2d32:	88 e5       	ldi	r24, 0x58	; 88
    2d34:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_Write_Command>
    2d38:	c3 e8       	ldi	r28, 0x83	; 131
    2d3a:	d2 e0       	ldi	r29, 0x02	; 2
    for (int i = 0; i < 8; i++) {
    2d3c:	0b e8       	ldi	r16, 0x8B	; 139
    2d3e:	12 e0       	ldi	r17, 0x02	; 2
        	LCD_Write_Character(P_3[i]);
    2d40:	89 91       	ld	r24, Y+
    2d42:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
    LCD_Write_Command(0x50);  // Set CGRAM address to 0x50
    for (int i = 0; i < 8; i++) {
        	LCD_Write_Character(P_2[i]);
    }
    LCD_Write_Command(0x58);  // Set CGRAM address to 0x58
    for (int i = 0; i < 8; i++) {
    2d46:	c0 17       	cp	r28, r16
    2d48:	d1 07       	cpc	r29, r17
    2d4a:	d1 f7       	brne	.-12     	; 0x2d40 <load_custom_characters+0x64>
        	LCD_Write_Character(P_3[i]);
    }
    LCD_Write_Command(0x60);  // Set CGRAM address to 0x60
    2d4c:	80 e6       	ldi	r24, 0x60	; 96
    2d4e:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_Write_Command>
    2d52:	cb e8       	ldi	r28, 0x8B	; 139
    2d54:	d2 e0       	ldi	r29, 0x02	; 2
    for (int i = 0; i < 8; i++) {
    2d56:	03 e9       	ldi	r16, 0x93	; 147
    2d58:	12 e0       	ldi	r17, 0x02	; 2
        	LCD_Write_Character(P_4[i]);
    2d5a:	89 91       	ld	r24, Y+
    2d5c:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
    LCD_Write_Command(0x58);  // Set CGRAM address to 0x58
    for (int i = 0; i < 8; i++) {
        	LCD_Write_Character(P_3[i]);
    }
    LCD_Write_Command(0x60);  // Set CGRAM address to 0x60
    for (int i = 0; i < 8; i++) {
    2d60:	c0 17       	cp	r28, r16
    2d62:	d1 07       	cpc	r29, r17
    2d64:	d1 f7       	brne	.-12     	; 0x2d5a <load_custom_characters+0x7e>
        	LCD_Write_Character(P_4[i]);
    }
    LCD_Write_Command(0x68);  // Set CGRAM address to 0x68
    2d66:	88 e6       	ldi	r24, 0x68	; 104
    2d68:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_Write_Command>
    2d6c:	c3 e9       	ldi	r28, 0x93	; 147
    2d6e:	d2 e0       	ldi	r29, 0x02	; 2
    for (int i = 0; i < 8; i++) {
    2d70:	0b e9       	ldi	r16, 0x9B	; 155
    2d72:	12 e0       	ldi	r17, 0x02	; 2
        	LCD_Write_Character(P_5[i]);
    2d74:	89 91       	ld	r24, Y+
    2d76:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
    LCD_Write_Command(0x60);  // Set CGRAM address to 0x60
    for (int i = 0; i < 8; i++) {
        	LCD_Write_Character(P_4[i]);
    }
    LCD_Write_Command(0x68);  // Set CGRAM address to 0x68
    for (int i = 0; i < 8; i++) {
    2d7a:	c0 17       	cp	r28, r16
    2d7c:	d1 07       	cpc	r29, r17
    2d7e:	d1 f7       	brne	.-12     	; 0x2d74 <load_custom_characters+0x98>
        	LCD_Write_Character(P_5[i]);
    }
    LCD_Write_Command(0x70);  // Set CGRAM address to 0x70
    2d80:	80 e7       	ldi	r24, 0x70	; 112
    2d82:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_Write_Command>
    2d86:	cb e9       	ldi	r28, 0x9B	; 155
    2d88:	d2 e0       	ldi	r29, 0x02	; 2
    for (int i = 0; i < 8; i++) {
    2d8a:	03 ea       	ldi	r16, 0xA3	; 163
    2d8c:	12 e0       	ldi	r17, 0x02	; 2
        	LCD_Write_Character(P_6[i]);
    2d8e:	89 91       	ld	r24, Y+
    2d90:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
    LCD_Write_Command(0x68);  // Set CGRAM address to 0x68
    for (int i = 0; i < 8; i++) {
        	LCD_Write_Character(P_5[i]);
    }
    LCD_Write_Command(0x70);  // Set CGRAM address to 0x70
    for (int i = 0; i < 8; i++) {
    2d94:	c0 17       	cp	r28, r16
    2d96:	d1 07       	cpc	r29, r17
    2d98:	d1 f7       	brne	.-12     	; 0x2d8e <load_custom_characters+0xb2>
        	LCD_Write_Character(P_6[i]);
    }
    LCD_Write_Command(0x80);  // Set cursor to the beginning of the first line
    2d9a:	80 e8       	ldi	r24, 0x80	; 128
    2d9c:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_Write_Command>
}
    2da0:	df 91       	pop	r29
    2da2:	cf 91       	pop	r28
    2da4:	1f 91       	pop	r17
    2da6:	0f 91       	pop	r16
    2da8:	08 95       	ret

00002daa <LCD_LINE_position>:
*/
ERROR_STATE LCD_LINE_position(LCD_LINES row , SINT8_t column){
	ERROR_STATE state_error = SUCCESS;
	UINT8_t address = 0;

	if(column < 20 && column >= 0){
    2daa:	64 31       	cpi	r22, 0x14	; 20
    2dac:	a8 f4       	brcc	.+42     	; 0x2dd8 <LCD_LINE_position+0x2e>
		switch(row){
    2dae:	81 30       	cpi	r24, 0x01	; 1
    2db0:	a9 f0       	breq	.+42     	; 0x2ddc <LCD_LINE_position+0x32>
    2db2:	81 30       	cpi	r24, 0x01	; 1
    2db4:	48 f0       	brcs	.+18     	; 0x2dc8 <LCD_LINE_position+0x1e>
    2db6:	82 30       	cpi	r24, 0x02	; 2
    2db8:	19 f0       	breq	.+6      	; 0x2dc0 <LCD_LINE_position+0x16>
    2dba:	83 30       	cpi	r24, 0x03	; 3
    2dbc:	69 f4       	brne	.+26     	; 0x2dd8 <LCD_LINE_position+0x2e>
    2dbe:	02 c0       	rjmp	.+4      	; 0x2dc4 <LCD_LINE_position+0x1a>
    2dc0:	94 e1       	ldi	r25, 0x14	; 20
    2dc2:	03 c0       	rjmp	.+6      	; 0x2dca <LCD_LINE_position+0x20>
    2dc4:	94 e5       	ldi	r25, 0x54	; 84
    2dc6:	01 c0       	rjmp	.+2      	; 0x2dca <LCD_LINE_position+0x20>
			case LCD_LINE3:
			address = 0x14;
			break;
			case LCD_LINE4:
			address = 0x54;
			break;
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
			state_error = FAIL;
			break;
		}
		if(SUCCESS == state_error){
			address += column;
			LCD_Write_Command(0x80+address);
    2dca:	86 2f       	mov	r24, r22
    2dcc:	80 58       	subi	r24, 0x80	; 128
    2dce:	89 0f       	add	r24, r25
    2dd0:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_Write_Command>
    2dd4:	81 e0       	ldi	r24, 0x01	; 1
    2dd6:	08 95       	ret
    2dd8:	80 e0       	ldi	r24, 0x00	; 0
		}else{
		state_error = FAIL;
	}

	return state_error;
}
    2dda:	08 95       	ret
			state_error = FAIL;
			break;
		}
		if(SUCCESS == state_error){
			address += column;
			LCD_Write_Command(0x80+address);
    2ddc:	90 e4       	ldi	r25, 0x40	; 64
    2dde:	f5 cf       	rjmp	.-22     	; 0x2dca <LCD_LINE_position+0x20>

00002de0 <LCD_Clear>:
}

ERROR_STATE LCD_Clear(void)
{
	ERROR_STATE state_error = SUCCESS;
	LCD_Write_Command(0x01);
    2de0:	81 e0       	ldi	r24, 0x01	; 1
    2de2:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_Write_Command>
	return state_error;
}
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	08 95       	ret

00002dea <LCD_Curser_ON>:
}

ERROR_STATE LCD_Curser_ON(void)
{
	ERROR_STATE state_error = SUCCESS;
	LCD_Write_Command(0x0F);
    2dea:	8f e0       	ldi	r24, 0x0F	; 15
    2dec:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_Write_Command>
	return state_error;
}
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	08 95       	ret

00002df4 <LCD_Curser_OFF>:
}

ERROR_STATE LCD_Curser_OFF(void)
{
	ERROR_STATE state_error = SUCCESS;
	LCD_Write_Command(0x0C);
    2df4:	8c e0       	ldi	r24, 0x0C	; 12
    2df6:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_Write_Command>
	return state_error;
}
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	08 95       	ret

00002dfe <LCD_Initialize>:

ERROR_STATE LCD_Initialize(void)
{
	ERROR_STATE state_error = SUCCESS;
	//Define direction for pins
	DIO_SetPin_Direction(LCD_DATA_PORT, LCD_D4, LCD_OUT);
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	60 e0       	ldi	r22, 0x00	; 0
    2e02:	41 e0       	ldi	r20, 0x01	; 1
    2e04:	0e 94 04 12 	call	0x2408	; 0x2408 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DATA_PORT, LCD_D5, LCD_OUT);
    2e08:	81 e0       	ldi	r24, 0x01	; 1
    2e0a:	61 e0       	ldi	r22, 0x01	; 1
    2e0c:	41 e0       	ldi	r20, 0x01	; 1
    2e0e:	0e 94 04 12 	call	0x2408	; 0x2408 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DATA_PORT, LCD_D6, LCD_OUT);
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	62 e0       	ldi	r22, 0x02	; 2
    2e16:	41 e0       	ldi	r20, 0x01	; 1
    2e18:	0e 94 04 12 	call	0x2408	; 0x2408 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DATA_PORT, LCD_D7, LCD_OUT);
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	64 e0       	ldi	r22, 0x04	; 4
    2e20:	41 e0       	ldi	r20, 0x01	; 1
    2e22:	0e 94 04 12 	call	0x2408	; 0x2408 <DIO_SetPin_Direction>

	DIO_SetPin_Direction(LCD_CNTRL_PORT, LCD_RS, LCD_OUT);
    2e26:	80 e0       	ldi	r24, 0x00	; 0
    2e28:	63 e0       	ldi	r22, 0x03	; 3
    2e2a:	41 e0       	ldi	r20, 0x01	; 1
    2e2c:	0e 94 04 12 	call	0x2408	; 0x2408 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_CNTRL_PORT, LCD_EN, LCD_OUT);
    2e30:	80 e0       	ldi	r24, 0x00	; 0
    2e32:	62 e0       	ldi	r22, 0x02	; 2
    2e34:	41 e0       	ldi	r20, 0x01	; 1
    2e36:	0e 94 04 12 	call	0x2408	; 0x2408 <DIO_SetPin_Direction>
    2e3a:	28 ec       	ldi	r18, 0xC8	; 200
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	40 e9       	ldi	r20, 0x90	; 144
    2e40:	51 e0       	ldi	r21, 0x01	; 1
    2e42:	ca 01       	movw	r24, r20
    2e44:	01 97       	sbiw	r24, 0x01	; 1
    2e46:	f1 f7       	brne	.-4      	; 0x2e44 <LCD_Initialize+0x46>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e48:	21 50       	subi	r18, 0x01	; 1
    2e4a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e4c:	d1 f7       	brne	.-12     	; 0x2e42 <LCD_Initialize+0x44>
	_delay_ms(20);
	LCD_Write_Command(0x33);
    2e4e:	83 e3       	ldi	r24, 0x33	; 51
    2e50:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_Write_Command>
	LCD_Write_Command(0x32);
    2e54:	82 e3       	ldi	r24, 0x32	; 50
    2e56:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_Write_Command>
	LCD_Write_Command(0x28);
    2e5a:	88 e2       	ldi	r24, 0x28	; 40
    2e5c:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_Write_Command>
	LCD_Write_Command(0x01);
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_Write_Command>
	LCD_Write_Command(0x0F);
    2e66:	8f e0       	ldi	r24, 0x0F	; 15
    2e68:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_Write_Command>
    2e6c:	80 e4       	ldi	r24, 0x40	; 64
    2e6e:	9c e9       	ldi	r25, 0x9C	; 156
    2e70:	01 97       	sbiw	r24, 0x01	; 1
    2e72:	f1 f7       	brne	.-4      	; 0x2e70 <LCD_Initialize+0x72>
	_delay_ms(10);
	return state_error;
}
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	08 95       	ret

00002e78 <KEYPAD_Read>:
	DIO_SetPin_PULLUP(KEYPAD_PORT_OUT, KEYPAD_PIN_OUT0);*/

}

void KEYPAD_Read(UINT8_t* val)
{
    2e78:	2f 92       	push	r2
    2e7a:	3f 92       	push	r3
    2e7c:	4f 92       	push	r4
    2e7e:	5f 92       	push	r5
    2e80:	6f 92       	push	r6
    2e82:	7f 92       	push	r7
    2e84:	8f 92       	push	r8
    2e86:	9f 92       	push	r9
    2e88:	af 92       	push	r10
    2e8a:	bf 92       	push	r11
    2e8c:	cf 92       	push	r12
    2e8e:	df 92       	push	r13
    2e90:	ef 92       	push	r14
    2e92:	ff 92       	push	r15
    2e94:	0f 93       	push	r16
    2e96:	1f 93       	push	r17
    2e98:	df 93       	push	r29
    2e9a:	cf 93       	push	r28
    2e9c:	00 d0       	rcall	.+0      	; 0x2e9e <KEYPAD_Read+0x26>
    2e9e:	0f 92       	push	r0
    2ea0:	cd b7       	in	r28, 0x3d	; 61
    2ea2:	de b7       	in	r29, 0x3e	; 62
    2ea4:	9b 83       	std	Y+3, r25	; 0x03
    2ea6:	8a 83       	std	Y+2, r24	; 0x02
	UINT8_t btn = 'E';
	UINT8_t Keypad_button=1;
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	89 83       	std	Y+1, r24	; 0x01
    2eac:	0f 2e       	mov	r0, r31
    2eae:	f6 ea       	ldi	r31, 0xA6	; 166
    2eb0:	af 2e       	mov	r10, r31
    2eb2:	f2 e0       	ldi	r31, 0x02	; 2
    2eb4:	bf 2e       	mov	r11, r31
    2eb6:	f0 2d       	mov	r31, r0
    2eb8:	0f 2e       	mov	r0, r31
    2eba:	f5 e4       	ldi	r31, 0x45	; 69
    2ebc:	df 2e       	mov	r13, r31
    2ebe:	f0 2d       	mov	r31, r0
    2ec0:	0f 2e       	mov	r0, r31
    2ec2:	f5 e0       	ldi	r31, 0x05	; 5
    2ec4:	7f 2e       	mov	r7, r31
    2ec6:	f0 2d       	mov	r31, r0
    2ec8:	88 24       	eor	r8, r8
    2eca:	99 24       	eor	r9, r9
	UINT8_t Row_Loc ;//i-counter
	UINT8_t Col_Loc ;//j-counter
	for (Row_Loc = KEYPAD_ROW_END; Row_Loc >= KEYPAD_ROW_STRT; Row_Loc--)
	{
			DIO_SetPin_Value(KEYPAD_PORT_OUT, Row_Loc, KEYPAD_LOW);
    2ecc:	0f 2e       	mov	r0, r31
    2ece:	f3 ea       	ldi	r31, 0xA3	; 163
    2ed0:	2f 2e       	mov	r2, r31
    2ed2:	f2 e0       	ldi	r31, 0x02	; 2
    2ed4:	3f 2e       	mov	r3, r31
    2ed6:	f0 2d       	mov	r31, r0
    2ed8:	0f 2e       	mov	r0, r31
    2eda:	f7 e0       	ldi	r31, 0x07	; 7
    2edc:	6f 2e       	mov	r6, r31
    2ede:	f0 2d       	mov	r31, r0
    2ee0:	0f 2e       	mov	r0, r31
    2ee2:	f0 e9       	ldi	r31, 0x90	; 144
    2ee4:	4f 2e       	mov	r4, r31
    2ee6:	f1 e0       	ldi	r31, 0x01	; 1
    2ee8:	5f 2e       	mov	r5, r31
    2eea:	f0 2d       	mov	r31, r0
							btn = keypad[KEYPAD_ROW_END - Row_Loc][3];
						}
						_delay_us(100);
					
				}else{
					DIO_GetPin_Value(KEYPAD_PORT_INP, Col_Loc,&Keypad_button);
    2eec:	7e 01       	movw	r14, r28
    2eee:	08 94       	sec
    2ef0:	e1 1c       	adc	r14, r1
    2ef2:	f1 1c       	adc	r15, r1
	UINT8_t Keypad_button=1;
	UINT8_t Row_Loc ;//i-counter
	UINT8_t Col_Loc ;//j-counter
	for (Row_Loc = KEYPAD_ROW_END; Row_Loc >= KEYPAD_ROW_STRT; Row_Loc--)
	{
			DIO_SetPin_Value(KEYPAD_PORT_OUT, Row_Loc, KEYPAD_LOW);
    2ef4:	82 e0       	ldi	r24, 0x02	; 2
    2ef6:	67 2d       	mov	r22, r7
    2ef8:	40 e0       	ldi	r20, 0x00	; 0
    2efa:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
    2efe:	c4 01       	movw	r24, r8
    2f00:	88 0f       	add	r24, r24
    2f02:	99 1f       	adc	r25, r25
    2f04:	88 0f       	add	r24, r24
    2f06:	99 1f       	adc	r25, r25
    2f08:	81 01       	movw	r16, r2
    2f0a:	08 0f       	add	r16, r24
    2f0c:	19 1f       	adc	r17, r25
    2f0e:	c6 2c       	mov	r12, r6
    2f10:	1b c0       	rjmp	.+54     	; 0x2f48 <KEYPAD_Read+0xd0>
    2f12:	0f 5f       	subi	r16, 0xFF	; 255
    2f14:	1f 4f       	sbci	r17, 0xFF	; 255
			for (Col_Loc = KEYPAD_COL_STRT; Col_Loc >= KEYPAD_COL_END; Col_Loc--)
			{
				if(Col_Loc == 4){
    2f16:	84 e0       	ldi	r24, 0x04	; 4
    2f18:	c8 16       	cp	r12, r24
    2f1a:	b1 f4       	brne	.+44     	; 0x2f48 <KEYPAD_Read+0xd0>
					DIO_GetPin_Value(KEYPAD_PORT_INP, 3,&Keypad_button);
    2f1c:	83 e0       	ldi	r24, 0x03	; 3
    2f1e:	63 e0       	ldi	r22, 0x03	; 3
    2f20:	a7 01       	movw	r20, r14
    2f22:	0e 94 66 13 	call	0x26cc	; 0x26cc <DIO_GetPin_Value>
						while (Keypad_button == KEYPAD_PRESSED)
    2f26:	89 81       	ldd	r24, Y+1	; 0x01
    2f28:	88 23       	and	r24, r24
    2f2a:	51 f4       	brne	.+20     	; 0x2f40 <KEYPAD_Read+0xc8>
						{
							DIO_GetPin_Value(KEYPAD_PORT_INP, 3,&Keypad_button);
    2f2c:	83 e0       	ldi	r24, 0x03	; 3
    2f2e:	63 e0       	ldi	r22, 0x03	; 3
    2f30:	a7 01       	movw	r20, r14
    2f32:	0e 94 66 13 	call	0x26cc	; 0x26cc <DIO_GetPin_Value>
							btn = keypad[KEYPAD_ROW_END - Row_Loc][3];
    2f36:	f5 01       	movw	r30, r10
    2f38:	d0 80       	ld	r13, Z
			DIO_SetPin_Value(KEYPAD_PORT_OUT, Row_Loc, KEYPAD_LOW);
			for (Col_Loc = KEYPAD_COL_STRT; Col_Loc >= KEYPAD_COL_END; Col_Loc--)
			{
				if(Col_Loc == 4){
					DIO_GetPin_Value(KEYPAD_PORT_INP, 3,&Keypad_button);
						while (Keypad_button == KEYPAD_PRESSED)
    2f3a:	89 81       	ldd	r24, Y+1	; 0x01
    2f3c:	88 23       	and	r24, r24
    2f3e:	b1 f3       	breq	.-20     	; 0x2f2c <KEYPAD_Read+0xb4>
    2f40:	c2 01       	movw	r24, r4
    2f42:	01 97       	sbiw	r24, 0x01	; 1
    2f44:	f1 f7       	brne	.-4      	; 0x2f42 <KEYPAD_Read+0xca>
    2f46:	19 c0       	rjmp	.+50     	; 0x2f7a <KEYPAD_Read+0x102>
							btn = keypad[KEYPAD_ROW_END - Row_Loc][3];
						}
						_delay_us(100);
					
				}else{
					DIO_GetPin_Value(KEYPAD_PORT_INP, Col_Loc,&Keypad_button);
    2f48:	83 e0       	ldi	r24, 0x03	; 3
    2f4a:	6c 2d       	mov	r22, r12
    2f4c:	a7 01       	movw	r20, r14
    2f4e:	0e 94 66 13 	call	0x26cc	; 0x26cc <DIO_GetPin_Value>
						while (Keypad_button == KEYPAD_PRESSED)
    2f52:	89 81       	ldd	r24, Y+1	; 0x01
    2f54:	88 23       	and	r24, r24
    2f56:	51 f4       	brne	.+20     	; 0x2f6c <KEYPAD_Read+0xf4>
						{
							DIO_GetPin_Value(KEYPAD_PORT_INP, 3,&Keypad_button);
    2f58:	83 e0       	ldi	r24, 0x03	; 3
    2f5a:	63 e0       	ldi	r22, 0x03	; 3
    2f5c:	a7 01       	movw	r20, r14
    2f5e:	0e 94 66 13 	call	0x26cc	; 0x26cc <DIO_GetPin_Value>
							btn = keypad[KEYPAD_ROW_END - Row_Loc][ KEYPAD_COL_STRT - Col_Loc ];
    2f62:	f8 01       	movw	r30, r16
    2f64:	d0 80       	ld	r13, Z
						}
						_delay_us(100);
					
				}else{
					DIO_GetPin_Value(KEYPAD_PORT_INP, Col_Loc,&Keypad_button);
						while (Keypad_button == KEYPAD_PRESSED)
    2f66:	89 81       	ldd	r24, Y+1	; 0x01
    2f68:	88 23       	and	r24, r24
    2f6a:	b1 f3       	breq	.-20     	; 0x2f58 <KEYPAD_Read+0xe0>
    2f6c:	c2 01       	movw	r24, r4
    2f6e:	01 97       	sbiw	r24, 0x01	; 1
    2f70:	f1 f7       	brne	.-4      	; 0x2f6e <KEYPAD_Read+0xf6>
	UINT8_t Row_Loc ;//i-counter
	UINT8_t Col_Loc ;//j-counter
	for (Row_Loc = KEYPAD_ROW_END; Row_Loc >= KEYPAD_ROW_STRT; Row_Loc--)
	{
			DIO_SetPin_Value(KEYPAD_PORT_OUT, Row_Loc, KEYPAD_LOW);
			for (Col_Loc = KEYPAD_COL_STRT; Col_Loc >= KEYPAD_COL_END; Col_Loc--)
    2f72:	ca 94       	dec	r12
    2f74:	f3 e0       	ldi	r31, 0x03	; 3
    2f76:	fc 15       	cp	r31, r12
    2f78:	60 f2       	brcs	.-104    	; 0x2f12 <KEYPAD_Read+0x9a>
							btn = keypad[KEYPAD_ROW_END - Row_Loc][ KEYPAD_COL_STRT - Col_Loc ];
						}
						_delay_us(100);
				}
			}
			DIO_SetPin_Value(KEYPAD_PORT_OUT, Row_Loc, KEYPAD_HIGH);
    2f7a:	82 e0       	ldi	r24, 0x02	; 2
    2f7c:	67 2d       	mov	r22, r7
    2f7e:	41 e0       	ldi	r20, 0x01	; 1
    2f80:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
{
	UINT8_t btn = 'E';
	UINT8_t Keypad_button=1;
	UINT8_t Row_Loc ;//i-counter
	UINT8_t Col_Loc ;//j-counter
	for (Row_Loc = KEYPAD_ROW_END; Row_Loc >= KEYPAD_ROW_STRT; Row_Loc--)
    2f84:	7a 94       	dec	r7
    2f86:	08 94       	sec
    2f88:	81 1c       	adc	r8, r1
    2f8a:	91 1c       	adc	r9, r1
    2f8c:	84 e0       	ldi	r24, 0x04	; 4
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	a8 0e       	add	r10, r24
    2f92:	b9 1e       	adc	r11, r25
    2f94:	91 e0       	ldi	r25, 0x01	; 1
    2f96:	79 16       	cp	r7, r25
    2f98:	09 f0       	breq	.+2      	; 0x2f9c <KEYPAD_Read+0x124>
    2f9a:	ac cf       	rjmp	.-168    	; 0x2ef4 <KEYPAD_Read+0x7c>
				}
			}
			DIO_SetPin_Value(KEYPAD_PORT_OUT, Row_Loc, KEYPAD_HIGH);
	}

	*val= btn;
    2f9c:	ea 81       	ldd	r30, Y+2	; 0x02
    2f9e:	fb 81       	ldd	r31, Y+3	; 0x03
    2fa0:	d0 82       	st	Z, r13
}
    2fa2:	0f 90       	pop	r0
    2fa4:	0f 90       	pop	r0
    2fa6:	0f 90       	pop	r0
    2fa8:	cf 91       	pop	r28
    2faa:	df 91       	pop	r29
    2fac:	1f 91       	pop	r17
    2fae:	0f 91       	pop	r16
    2fb0:	ff 90       	pop	r15
    2fb2:	ef 90       	pop	r14
    2fb4:	df 90       	pop	r13
    2fb6:	cf 90       	pop	r12
    2fb8:	bf 90       	pop	r11
    2fba:	af 90       	pop	r10
    2fbc:	9f 90       	pop	r9
    2fbe:	8f 90       	pop	r8
    2fc0:	7f 90       	pop	r7
    2fc2:	6f 90       	pop	r6
    2fc4:	5f 90       	pop	r5
    2fc6:	4f 90       	pop	r4
    2fc8:	3f 90       	pop	r3
    2fca:	2f 90       	pop	r2
    2fcc:	08 95       	ret

00002fce <KEYPAD_Initialize>:
	{'E', 'E', 'E', 'D'}
};

void KEYPAD_Initialize(void)
{
	DIO_SetPin_Direction(KEYPAD_PORT_OUT, KEYPAD_PIN_OUT0, KEYPAD_OUT);
    2fce:	82 e0       	ldi	r24, 0x02	; 2
    2fd0:	65 e0       	ldi	r22, 0x05	; 5
    2fd2:	41 e0       	ldi	r20, 0x01	; 1
    2fd4:	0e 94 04 12 	call	0x2408	; 0x2408 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(KEYPAD_PORT_OUT, KEYPAD_PIN_OUT1, KEYPAD_OUT);
    2fd8:	82 e0       	ldi	r24, 0x02	; 2
    2fda:	64 e0       	ldi	r22, 0x04	; 4
    2fdc:	41 e0       	ldi	r20, 0x01	; 1
    2fde:	0e 94 04 12 	call	0x2408	; 0x2408 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(KEYPAD_PORT_OUT, KEYPAD_PIN_OUT2, KEYPAD_OUT);
    2fe2:	82 e0       	ldi	r24, 0x02	; 2
    2fe4:	63 e0       	ldi	r22, 0x03	; 3
    2fe6:	41 e0       	ldi	r20, 0x01	; 1
    2fe8:	0e 94 04 12 	call	0x2408	; 0x2408 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(KEYPAD_PORT_OUT, KEYPAD_PIN_OUT3, KEYPAD_OUT);
    2fec:	82 e0       	ldi	r24, 0x02	; 2
    2fee:	62 e0       	ldi	r22, 0x02	; 2
    2ff0:	41 e0       	ldi	r20, 0x01	; 1
    2ff2:	0e 94 04 12 	call	0x2408	; 0x2408 <DIO_SetPin_Direction>

	DIO_SetPin_Value(KEYPAD_PORT_OUT, KEYPAD_PIN_OUT0, KEYPAD_HIGH);
    2ff6:	82 e0       	ldi	r24, 0x02	; 2
    2ff8:	65 e0       	ldi	r22, 0x05	; 5
    2ffa:	41 e0       	ldi	r20, 0x01	; 1
    2ffc:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
	DIO_SetPin_Value(KEYPAD_PORT_OUT, KEYPAD_PIN_OUT1, KEYPAD_HIGH);
    3000:	82 e0       	ldi	r24, 0x02	; 2
    3002:	64 e0       	ldi	r22, 0x04	; 4
    3004:	41 e0       	ldi	r20, 0x01	; 1
    3006:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
	DIO_SetPin_Value(KEYPAD_PORT_OUT, KEYPAD_PIN_OUT2, KEYPAD_HIGH);
    300a:	82 e0       	ldi	r24, 0x02	; 2
    300c:	63 e0       	ldi	r22, 0x03	; 3
    300e:	41 e0       	ldi	r20, 0x01	; 1
    3010:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
	DIO_SetPin_Value(KEYPAD_PORT_OUT, KEYPAD_PIN_OUT3, KEYPAD_HIGH);
    3014:	82 e0       	ldi	r24, 0x02	; 2
    3016:	62 e0       	ldi	r22, 0x02	; 2
    3018:	41 e0       	ldi	r20, 0x01	; 1
    301a:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>

	DIO_SetPin_Direction(KEYPAD_PORT_INP, KEYPAD_PIN_INP0, KEYPAD_INP);
    301e:	83 e0       	ldi	r24, 0x03	; 3
    3020:	67 e0       	ldi	r22, 0x07	; 7
    3022:	40 e0       	ldi	r20, 0x00	; 0
    3024:	0e 94 04 12 	call	0x2408	; 0x2408 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(KEYPAD_PORT_INP, KEYPAD_PIN_INP1, KEYPAD_INP);
    3028:	83 e0       	ldi	r24, 0x03	; 3
    302a:	66 e0       	ldi	r22, 0x06	; 6
    302c:	40 e0       	ldi	r20, 0x00	; 0
    302e:	0e 94 04 12 	call	0x2408	; 0x2408 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(KEYPAD_PORT_INP, KEYPAD_PIN_INP2, KEYPAD_INP);
    3032:	83 e0       	ldi	r24, 0x03	; 3
    3034:	65 e0       	ldi	r22, 0x05	; 5
    3036:	40 e0       	ldi	r20, 0x00	; 0
    3038:	0e 94 04 12 	call	0x2408	; 0x2408 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(KEYPAD_PORT_INP, KEYPAD_PIN_INP3, KEYPAD_INP);
    303c:	83 e0       	ldi	r24, 0x03	; 3
    303e:	63 e0       	ldi	r22, 0x03	; 3
    3040:	40 e0       	ldi	r20, 0x00	; 0
    3042:	0e 94 04 12 	call	0x2408	; 0x2408 <DIO_SetPin_Direction>
/*  DIO_SetPin_PULLUP(KEYPAD_PORT_OUT, KEYPAD_PIN_OUT0);
	DIO_SetPin_PULLUP(KEYPAD_PORT_OUT, KEYPAD_PIN_OUT0);
	DIO_SetPin_PULLUP(KEYPAD_PORT_OUT, KEYPAD_PIN_OUT0);
	DIO_SetPin_PULLUP(KEYPAD_PORT_OUT, KEYPAD_PIN_OUT0);*/

}
    3046:	08 95       	ret

00003048 <GREEN_LED_TGL>:
}
void GREEN_LED_OFF(void){
	DIO_SetPin_Value(GREEN_LED_PORT,GREEN_LED_PIN,GREEN_LED_LOW);
}
void GREEN_LED_TGL(void){
	DIO_TglPin_Value(GREEN_LED_PORT,GREEN_LED_PIN);
    3048:	80 e0       	ldi	r24, 0x00	; 0
    304a:	64 e0       	ldi	r22, 0x04	; 4
    304c:	0e 94 24 13 	call	0x2648	; 0x2648 <DIO_TglPin_Value>
}
    3050:	08 95       	ret

00003052 <GREEN_LED_OFF>:
}
void GREEN_LED_ON(void){
	DIO_SetPin_Value(GREEN_LED_PORT,GREEN_LED_PIN,GREEN_LED_HIGH);
}
void GREEN_LED_OFF(void){
	DIO_SetPin_Value(GREEN_LED_PORT,GREEN_LED_PIN,GREEN_LED_LOW);
    3052:	80 e0       	ldi	r24, 0x00	; 0
    3054:	64 e0       	ldi	r22, 0x04	; 4
    3056:	40 e0       	ldi	r20, 0x00	; 0
    3058:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
}
    305c:	08 95       	ret

0000305e <GREEN_LED_ON>:

void GREEN_LED_Initializ(void){
	DIO_SetPin_Direction(GREEN_LED_PORT,GREEN_LED_PIN,GREEN_LED_OUTPUT);
}
void GREEN_LED_ON(void){
	DIO_SetPin_Value(GREEN_LED_PORT,GREEN_LED_PIN,GREEN_LED_HIGH);
    305e:	80 e0       	ldi	r24, 0x00	; 0
    3060:	64 e0       	ldi	r22, 0x04	; 4
    3062:	41 e0       	ldi	r20, 0x01	; 1
    3064:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
}
    3068:	08 95       	ret

0000306a <GREEN_LED_Initializ>:
 */

#include "GREEN_LED_Interface.h"

void GREEN_LED_Initializ(void){
	DIO_SetPin_Direction(GREEN_LED_PORT,GREEN_LED_PIN,GREEN_LED_OUTPUT);
    306a:	80 e0       	ldi	r24, 0x00	; 0
    306c:	64 e0       	ldi	r22, 0x04	; 4
    306e:	41 e0       	ldi	r20, 0x01	; 1
    3070:	0e 94 04 12 	call	0x2408	; 0x2408 <DIO_SetPin_Direction>
}
    3074:	08 95       	ret

00003076 <BUZZER_TGL>:
	DIO_SetPin_Value(BUZZER_PORT,BUZZER_PIN,BUZZER_LOW);
	return state_error;
}
ERROR_STATE BUZZER_TGL(void){
	ERROR_STATE state_error = SUCCESS;
	DIO_TglPin_Value(BUZZER_PORT,BUZZER_PIN);
    3076:	82 e0       	ldi	r24, 0x02	; 2
    3078:	66 e0       	ldi	r22, 0x06	; 6
    307a:	0e 94 24 13 	call	0x2648	; 0x2648 <DIO_TglPin_Value>
	return state_error;
}
    307e:	81 e0       	ldi	r24, 0x01	; 1
    3080:	08 95       	ret

00003082 <BUZZER_OFF>:
	DIO_SetPin_Value(BUZZER_PORT,BUZZER_PIN,BUZZER_HIGH);
	return state_error;
}
ERROR_STATE BUZZER_OFF(void){
	ERROR_STATE state_error = SUCCESS;
	DIO_SetPin_Value(BUZZER_PORT,BUZZER_PIN,BUZZER_LOW);
    3082:	82 e0       	ldi	r24, 0x02	; 2
    3084:	66 e0       	ldi	r22, 0x06	; 6
    3086:	40 e0       	ldi	r20, 0x00	; 0
    3088:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
	return state_error;
}
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	08 95       	ret

00003090 <BUZZER_ON>:
	DIO_SetPin_Direction(BUZZER_PORT,BUZZER_PIN,BUZZER_OUTPUT);
	return state_error;
}
ERROR_STATE BUZZER_ON(void){
	ERROR_STATE state_error = SUCCESS;
	DIO_SetPin_Value(BUZZER_PORT,BUZZER_PIN,BUZZER_HIGH);
    3090:	82 e0       	ldi	r24, 0x02	; 2
    3092:	66 e0       	ldi	r22, 0x06	; 6
    3094:	41 e0       	ldi	r20, 0x01	; 1
    3096:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
	return state_error;
}
    309a:	81 e0       	ldi	r24, 0x01	; 1
    309c:	08 95       	ret

0000309e <BUZZER_Initialize>:

#include "Buzzer_Interface.h"

ERROR_STATE BUZZER_Initialize(void){
	ERROR_STATE state_error = SUCCESS;
	DIO_SetPin_Direction(BUZZER_PORT,BUZZER_PIN,BUZZER_OUTPUT);
    309e:	82 e0       	ldi	r24, 0x02	; 2
    30a0:	66 e0       	ldi	r22, 0x06	; 6
    30a2:	41 e0       	ldi	r20, 0x01	; 1
    30a4:	0e 94 04 12 	call	0x2408	; 0x2408 <DIO_SetPin_Direction>
	return state_error;
}
    30a8:	81 e0       	ldi	r24, 0x01	; 1
    30aa:	08 95       	ret

000030ac <BLUE_LED_TGL>:
	DIO_SetPin_Value(BLUE_LED_PORT,BLUE_LED_PIN,BLUE_LED_LOW);
	return state_error;
}
ERROR_STATE BLUE_LED_TGL(void){
	ERROR_STATE state_error = SUCCESS;
	DIO_TglPin_Value(BLUE_LED_PORT,BLUE_LED_PIN);
    30ac:	80 e0       	ldi	r24, 0x00	; 0
    30ae:	65 e0       	ldi	r22, 0x05	; 5
    30b0:	0e 94 24 13 	call	0x2648	; 0x2648 <DIO_TglPin_Value>
	return state_error;
}
    30b4:	81 e0       	ldi	r24, 0x01	; 1
    30b6:	08 95       	ret

000030b8 <BLUE_LED_OFF>:
	DIO_SetPin_Value(BLUE_LED_PORT,BLUE_LED_PIN,BLUE_LED_HIGH);
	return state_error;
}
ERROR_STATE BLUE_LED_OFF(void){
	ERROR_STATE state_error = SUCCESS;
	DIO_SetPin_Value(BLUE_LED_PORT,BLUE_LED_PIN,BLUE_LED_LOW);
    30b8:	80 e0       	ldi	r24, 0x00	; 0
    30ba:	65 e0       	ldi	r22, 0x05	; 5
    30bc:	40 e0       	ldi	r20, 0x00	; 0
    30be:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
	return state_error;
}
    30c2:	81 e0       	ldi	r24, 0x01	; 1
    30c4:	08 95       	ret

000030c6 <BLUE_LED_ON>:
	DIO_SetPin_Direction(BLUE_LED_PORT,BLUE_LED_PIN,BLUE_LED_OUTPUT);
	return state_error;
}
ERROR_STATE BLUE_LED_ON(void){
	ERROR_STATE state_error = SUCCESS;
	DIO_SetPin_Value(BLUE_LED_PORT,BLUE_LED_PIN,BLUE_LED_HIGH);
    30c6:	80 e0       	ldi	r24, 0x00	; 0
    30c8:	65 e0       	ldi	r22, 0x05	; 5
    30ca:	41 e0       	ldi	r20, 0x01	; 1
    30cc:	0e 94 94 12 	call	0x2528	; 0x2528 <DIO_SetPin_Value>
	return state_error;
}
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	08 95       	ret

000030d4 <BLUE_LED_Initializ>:

#include "BLUE_LED_Interface.h"

ERROR_STATE BLUE_LED_Initializ(void){
	ERROR_STATE state_error = SUCCESS;
	DIO_SetPin_Direction(BLUE_LED_PORT,BLUE_LED_PIN,BLUE_LED_OUTPUT);
    30d4:	80 e0       	ldi	r24, 0x00	; 0
    30d6:	65 e0       	ldi	r22, 0x05	; 5
    30d8:	41 e0       	ldi	r20, 0x01	; 1
    30da:	0e 94 04 12 	call	0x2408	; 0x2408 <DIO_SetPin_Direction>
	return state_error;
}
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	08 95       	ret

000030e2 <MAIN_Application>:
	return state_error;
}

ERROR_STATE MAIN_Application() {
	ERROR_STATE state_error = SUCCESS;
	if (Parking_Flag) {
    30e2:	80 91 6a 02 	lds	r24, 0x026A
    30e6:	88 23       	and	r24, r24
    30e8:	19 f0       	breq	.+6      	; 0x30f0 <MAIN_Application+0xe>
		Parking_State();
    30ea:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <Parking_State>
    30ee:	14 c0       	rjmp	.+40     	; 0x3118 <MAIN_Application+0x36>
	} else {
		if (Normal_Flag) {
    30f0:	80 91 bd 02 	lds	r24, 0x02BD
    30f4:	88 23       	and	r24, r24
    30f6:	19 f0       	breq	.+6      	; 0x30fe <MAIN_Application+0x1c>
			Normal_State();
    30f8:	0e 94 9e 1c 	call	0x393c	; 0x393c <Normal_State>
    30fc:	0d c0       	rjmp	.+26     	; 0x3118 <MAIN_Application+0x36>
		} else {
			if (Reverse_Flag) {
    30fe:	80 91 bc 02 	lds	r24, 0x02BC
    3102:	88 23       	and	r24, r24
    3104:	19 f0       	breq	.+6      	; 0x310c <MAIN_Application+0x2a>
				Reverse_State();
    3106:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <Reverse_State>
    310a:	06 c0       	rjmp	.+12     	; 0x3118 <MAIN_Application+0x36>
			} else {
				if (Drive_Flag) {
    310c:	80 91 be 02 	lds	r24, 0x02BE
    3110:	88 23       	and	r24, r24
    3112:	11 f0       	breq	.+4      	; 0x3118 <MAIN_Application+0x36>
					Drive_State();
    3114:	0e 94 3a 1c 	call	0x3874	; 0x3874 <Drive_State>
				}
			}
		}
	}
	return state_error;
}
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	08 95       	ret

0000311c <Application_Initialize>:
						SPI_SAMPLE_LEADING,
						SPI_PRESCALER_4};

ERROR_STATE Application_Initialize() {
	ERROR_STATE state_error = SUCCESS;
	SPI_Init_Master(&My_Master);
    311c:	84 eb       	ldi	r24, 0xB4	; 180
    311e:	92 e0       	ldi	r25, 0x02	; 2
    3120:	0e 94 be 11 	call	0x237c	; 0x237c <SPI_Init_Master>

	LCD_Initialize();
    3124:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <LCD_Initialize>
	load_custom_characters();
    3128:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <load_custom_characters>
	KEYPAD_Initialize();
    312c:	0e 94 e7 17 	call	0x2fce	; 0x2fce <KEYPAD_Initialize>
	Speed_Analog_Initialize();
    3130:	0e 94 32 14 	call	0x2864	; 0x2864 <Speed_Analog_Initialize>
	BLUE_LED_Initializ();
    3134:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <BLUE_LED_Initializ>
	GREEN_LED_Initializ();
    3138:	0e 94 35 18 	call	0x306a	; 0x306a <GREEN_LED_Initializ>
	YELLOW_LED_Initializ();
    313c:	0e 94 25 14 	call	0x284a	; 0x284a <YELLOW_LED_Initializ>
	BUZZER_Initialize();
    3140:	0e 94 4f 18 	call	0x309e	; 0x309e <BUZZER_Initialize>
	LCD_LINE_position(LCD_LINE1,0);
    3144:	80 e0       	ldi	r24, 0x00	; 0
    3146:	60 e0       	ldi	r22, 0x00	; 0
    3148:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		LCD_Write_String("GEAR_BOX_PROJECT");
    314c:	80 e6       	ldi	r24, 0x60	; 96
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>

		LCD_LINE_position(LCD_LINE2,2);
    3154:	81 e0       	ldi	r24, 0x01	; 1
    3156:	62 e0       	ldi	r22, 0x02	; 2
    3158:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		LCD_Write_String("^_^ Welcome ^_^");
    315c:	81 e7       	ldi	r24, 0x71	; 113
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>

		LCD_LINE_position(LCD_LINE4,2);
    3164:	83 e0       	ldi	r24, 0x03	; 3
    3166:	62 e0       	ldi	r22, 0x02	; 2
    3168:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		LCD_Write_String("BY: KYLIAN TECH");
    316c:	81 e8       	ldi	r24, 0x81	; 129
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>
    3174:	20 e2       	ldi	r18, 0x20	; 32
    3176:	3e e4       	ldi	r19, 0x4E	; 78
    3178:	40 e9       	ldi	r20, 0x90	; 144
    317a:	51 e0       	ldi	r21, 0x01	; 1
    317c:	ca 01       	movw	r24, r20
    317e:	01 97       	sbiw	r24, 0x01	; 1
    3180:	f1 f7       	brne	.-4      	; 0x317e <Application_Initialize+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3182:	21 50       	subi	r18, 0x01	; 1
    3184:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3186:	d1 f7       	brne	.-12     	; 0x317c <Application_Initialize+0x60>

		_delay_ms(2000);
		LCD_Clear();
    3188:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <LCD_Clear>

		LCD_LINE_position(LCD_LINE1,0);
    318c:	80 e0       	ldi	r24, 0x00	; 0
    318e:	60 e0       	ldi	r22, 0x00	; 0
    3190:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		LCD_Write_String("Ali Embaby - 980");
    3194:	81 e9       	ldi	r24, 0x91	; 145
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>

		LCD_LINE_position(LCD_LINE2,0);
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	60 e0       	ldi	r22, 0x00	; 0
    31a0:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		LCD_Write_String("Seif Shebl - 894");
    31a4:	82 ea       	ldi	r24, 0xA2	; 162
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>

		LCD_LINE_position(LCD_LINE3,0);
    31ac:	82 e0       	ldi	r24, 0x02	; 2
    31ae:	60 e0       	ldi	r22, 0x00	; 0
    31b0:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		LCD_Write_String("Ahmed Nasr - 1069");
    31b4:	83 eb       	ldi	r24, 0xB3	; 179
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>

		LCD_LINE_position(LCD_LINE4,0);
    31bc:	83 e0       	ldi	r24, 0x03	; 3
    31be:	60 e0       	ldi	r22, 0x00	; 0
    31c0:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		LCD_Write_String("Azza Saeed - 912");
    31c4:	85 ec       	ldi	r24, 0xC5	; 197
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>
    31cc:	20 e2       	ldi	r18, 0x20	; 32
    31ce:	3e e4       	ldi	r19, 0x4E	; 78
    31d0:	40 e9       	ldi	r20, 0x90	; 144
    31d2:	51 e0       	ldi	r21, 0x01	; 1
    31d4:	ca 01       	movw	r24, r20
    31d6:	01 97       	sbiw	r24, 0x01	; 1
    31d8:	f1 f7       	brne	.-4      	; 0x31d6 <Application_Initialize+0xba>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31da:	21 50       	subi	r18, 0x01	; 1
    31dc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31de:	d1 f7       	brne	.-12     	; 0x31d4 <Application_Initialize+0xb8>
		_delay_ms(2000);
		LCD_Clear();
    31e0:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <LCD_Clear>

	return state_error;
}
    31e4:	81 e0       	ldi	r24, 0x01	; 1
    31e6:	08 95       	ret

000031e8 <Display_Letter>:
	Master_Send(Limit_Speed_Value);
	_delay_ms(200);
	/*SPI WRITE*/

}
void Display_Letter(Letters letter) {
    31e8:	0f 93       	push	r16
    31ea:	1f 93       	push	r17
	switch (letter) {
    31ec:	81 30       	cpi	r24, 0x01	; 1
    31ee:	09 f4       	brne	.+2      	; 0x31f2 <Display_Letter+0xa>
    31f0:	4f c0       	rjmp	.+158    	; 0x3290 <Display_Letter+0xa8>
    31f2:	81 30       	cpi	r24, 0x01	; 1
    31f4:	38 f0       	brcs	.+14     	; 0x3204 <Display_Letter+0x1c>
    31f6:	82 30       	cpi	r24, 0x02	; 2
    31f8:	09 f4       	brne	.+2      	; 0x31fc <Display_Letter+0x14>
    31fa:	91 c0       	rjmp	.+290    	; 0x331e <Display_Letter+0x136>
    31fc:	83 30       	cpi	r24, 0x03	; 3
    31fe:	09 f0       	breq	.+2      	; 0x3202 <Display_Letter+0x1a>
    3200:	1b c1       	rjmp	.+566    	; 0x3438 <Display_Letter+0x250>
    3202:	da c0       	rjmp	.+436    	; 0x33b8 <Display_Letter+0x1d0>
	case P:
		LCD_LINE_position(0, 14);
    3204:	80 e0       	ldi	r24, 0x00	; 0
    3206:	6e e0       	ldi	r22, 0x0E	; 14
    3208:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		LCD_Write_String(" ");
    320c:	06 ed       	ldi	r16, 0xD6	; 214
    320e:	10 e0       	ldi	r17, 0x00	; 0
    3210:	c8 01       	movw	r24, r16
    3212:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>
		LCD_Write_Character(3);
    3216:	83 e0       	ldi	r24, 0x03	; 3
    3218:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_Character(3);
    321c:	83 e0       	ldi	r24, 0x03	; 3
    321e:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_Character(3);
    3222:	83 e0       	ldi	r24, 0x03	; 3
    3224:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_LINE_position(1, 14);
    3228:	81 e0       	ldi	r24, 0x01	; 1
    322a:	6e e0       	ldi	r22, 0x0E	; 14
    322c:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		LCD_Write_Character(1);
    3230:	81 e0       	ldi	r24, 0x01	; 1
    3232:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_String(" ");
    3236:	c8 01       	movw	r24, r16
    3238:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>
		LCD_Write_Character(3);
    323c:	83 e0       	ldi	r24, 0x03	; 3
    323e:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_String(" ");
    3242:	c8 01       	movw	r24, r16
    3244:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>
		LCD_Write_Character(0);
    3248:	80 e0       	ldi	r24, 0x00	; 0
    324a:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_LINE_position(2, 14);
    324e:	82 e0       	ldi	r24, 0x02	; 2
    3250:	6e e0       	ldi	r22, 0x0E	; 14
    3252:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		LCD_Write_Character(1);
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_String(" ");
    325c:	c8 01       	movw	r24, r16
    325e:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>
		LCD_Write_Character(3);
    3262:	83 e0       	ldi	r24, 0x03	; 3
    3264:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_Character(3);
    3268:	83 e0       	ldi	r24, 0x03	; 3
    326a:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_Character(4);
    326e:	84 e0       	ldi	r24, 0x04	; 4
    3270:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_LINE_position(3, 14);
    3274:	83 e0       	ldi	r24, 0x03	; 3
    3276:	6e e0       	ldi	r22, 0x0E	; 14
    3278:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		LCD_Write_Character(1);
    327c:	81 e0       	ldi	r24, 0x01	; 1
    327e:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_Character(3);
    3282:	83 e0       	ldi	r24, 0x03	; 3
    3284:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_Character(2);
    3288:	82 e0       	ldi	r24, 0x02	; 2
    328a:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
    328e:	d4 c0       	rjmp	.+424    	; 0x3438 <Display_Letter+0x250>
		break;
	case R:
		LCD_LINE_position(0, 14);
    3290:	80 e0       	ldi	r24, 0x00	; 0
    3292:	6e e0       	ldi	r22, 0x0E	; 14
    3294:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		LCD_Write_String(" ");
    3298:	06 ed       	ldi	r16, 0xD6	; 214
    329a:	10 e0       	ldi	r17, 0x00	; 0
    329c:	c8 01       	movw	r24, r16
    329e:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>
		LCD_Write_Character(3);
    32a2:	83 e0       	ldi	r24, 0x03	; 3
    32a4:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_Character(3);
    32a8:	83 e0       	ldi	r24, 0x03	; 3
    32aa:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_Character(3);
    32ae:	83 e0       	ldi	r24, 0x03	; 3
    32b0:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_LINE_position(1, 14);
    32b4:	81 e0       	ldi	r24, 0x01	; 1
    32b6:	6e e0       	ldi	r22, 0x0E	; 14
    32b8:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		LCD_Write_Character(1);
    32bc:	81 e0       	ldi	r24, 0x01	; 1
    32be:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_String(" ");
    32c2:	c8 01       	movw	r24, r16
    32c4:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>
		LCD_Write_Character(3);
    32c8:	83 e0       	ldi	r24, 0x03	; 3
    32ca:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_String(" ");
    32ce:	c8 01       	movw	r24, r16
    32d0:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>
		LCD_Write_Character(0);
    32d4:	80 e0       	ldi	r24, 0x00	; 0
    32d6:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_LINE_position(2, 14);
    32da:	82 e0       	ldi	r24, 0x02	; 2
    32dc:	6e e0       	ldi	r22, 0x0E	; 14
    32de:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		LCD_Write_Character(1);
    32e2:	81 e0       	ldi	r24, 0x01	; 1
    32e4:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_String("   ");
    32e8:	88 ed       	ldi	r24, 0xD8	; 216
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>
		LCD_Write_Character(4);
    32f0:	84 e0       	ldi	r24, 0x04	; 4
    32f2:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_LINE_position(3, 14);
    32f6:	83 e0       	ldi	r24, 0x03	; 3
    32f8:	6e e0       	ldi	r22, 0x0E	; 14
    32fa:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		LCD_Write_Character(1);
    32fe:	81 e0       	ldi	r24, 0x01	; 1
    3300:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_Character(3);
    3304:	83 e0       	ldi	r24, 0x03	; 3
    3306:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_Character(5);
    330a:	85 e0       	ldi	r24, 0x05	; 5
    330c:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_Character(3);
    3310:	83 e0       	ldi	r24, 0x03	; 3
    3312:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_Character(6);
    3316:	86 e0       	ldi	r24, 0x06	; 6
    3318:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
    331c:	8d c0       	rjmp	.+282    	; 0x3438 <Display_Letter+0x250>
		break;
	case N:
		LCD_LINE_position(0, 14);
    331e:	80 e0       	ldi	r24, 0x00	; 0
    3320:	6e e0       	ldi	r22, 0x0E	; 14
    3322:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		LCD_Write_String(" ");
    3326:	06 ed       	ldi	r16, 0xD6	; 214
    3328:	10 e0       	ldi	r17, 0x00	; 0
    332a:	c8 01       	movw	r24, r16
    332c:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>
		LCD_Write_Character(3);
    3330:	83 e0       	ldi	r24, 0x03	; 3
    3332:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_String("  ");
    3336:	8c ed       	ldi	r24, 0xDC	; 220
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>
		LCD_Write_Character(3);
    333e:	83 e0       	ldi	r24, 0x03	; 3
    3340:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_LINE_position(1, 14);
    3344:	81 e0       	ldi	r24, 0x01	; 1
    3346:	6e e0       	ldi	r22, 0x0E	; 14
    3348:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		LCD_Write_Character(1);
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_String(" ");
    3352:	c8 01       	movw	r24, r16
    3354:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>
		LCD_Write_Character(0);
    3358:	80 e0       	ldi	r24, 0x00	; 0
    335a:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_String("| ");
    335e:	8f ed       	ldi	r24, 0xDF	; 223
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>
		LCD_Write_Character(2);
    3366:	82 e0       	ldi	r24, 0x02	; 2
    3368:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_LINE_position(2, 14);
    336c:	82 e0       	ldi	r24, 0x02	; 2
    336e:	6e e0       	ldi	r22, 0x0E	; 14
    3370:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		LCD_Write_Character(1);
    3374:	81 e0       	ldi	r24, 0x01	; 1
    3376:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_String(" .' ");
    337a:	82 ee       	ldi	r24, 0xE2	; 226
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>
		LCD_Write_Character(2);
    3382:	82 e0       	ldi	r24, 0x02	; 2
    3384:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_LINE_position(3, 14);
    3388:	83 e0       	ldi	r24, 0x03	; 3
    338a:	6e e0       	ldi	r22, 0x0E	; 14
    338c:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		LCD_Write_Character(1);
    3390:	81 e0       	ldi	r24, 0x01	; 1
    3392:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_Character(3);
    3396:	83 e0       	ldi	r24, 0x03	; 3
    3398:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_String("|");
    339c:	87 ee       	ldi	r24, 0xE7	; 231
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>
		LCD_Write_Character(0);
    33a4:	80 e0       	ldi	r24, 0x00	; 0
    33a6:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_Character(3);
    33aa:	83 e0       	ldi	r24, 0x03	; 3
    33ac:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_Character(2);
    33b0:	82 e0       	ldi	r24, 0x02	; 2
    33b2:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
    33b6:	40 c0       	rjmp	.+128    	; 0x3438 <Display_Letter+0x250>
		break;
	case D:
		LCD_LINE_position(0, 14);
    33b8:	80 e0       	ldi	r24, 0x00	; 0
    33ba:	6e e0       	ldi	r22, 0x0E	; 14
    33bc:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		LCD_Write_String(" ");
    33c0:	86 ed       	ldi	r24, 0xD6	; 214
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>
		LCD_Write_Character(3);
    33c8:	83 e0       	ldi	r24, 0x03	; 3
    33ca:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_Character(3);
    33ce:	83 e0       	ldi	r24, 0x03	; 3
    33d0:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_Character(3);
    33d4:	83 e0       	ldi	r24, 0x03	; 3
    33d6:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_LINE_position(1, 14);
    33da:	81 e0       	ldi	r24, 0x01	; 1
    33dc:	6e e0       	ldi	r22, 0x0E	; 14
    33de:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		LCD_Write_Character(1);
    33e2:	81 e0       	ldi	r24, 0x01	; 1
    33e4:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_String("   ");
    33e8:	88 ed       	ldi	r24, 0xD8	; 216
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>
		LCD_Write_Character(0);
    33f0:	80 e0       	ldi	r24, 0x00	; 0
    33f2:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_LINE_position(2, 14);
    33f6:	82 e0       	ldi	r24, 0x02	; 2
    33f8:	6e e0       	ldi	r22, 0x0E	; 14
    33fa:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		LCD_Write_Character(1);
    33fe:	81 e0       	ldi	r24, 0x01	; 1
    3400:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_String(" |)");
    3404:	89 ee       	ldi	r24, 0xE9	; 233
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>
		LCD_Write_Character(1);
    340c:	81 e0       	ldi	r24, 0x01	; 1
    340e:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_LINE_position(3, 14);
    3412:	83 e0       	ldi	r24, 0x03	; 3
    3414:	6e e0       	ldi	r22, 0x0E	; 14
    3416:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		LCD_Write_Character(1);
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_Character(3);
    3420:	83 e0       	ldi	r24, 0x03	; 3
    3422:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_Character(3);
    3426:	83 e0       	ldi	r24, 0x03	; 3
    3428:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_Character(3);
    342c:	83 e0       	ldi	r24, 0x03	; 3
    342e:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		LCD_Write_Character(4);
    3432:	84 e0       	ldi	r24, 0x04	; 4
    3434:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
		break;
	default:
		break;
	}
}
    3438:	1f 91       	pop	r17
    343a:	0f 91       	pop	r16
    343c:	08 95       	ret

0000343e <SET_LIMIT_SPEED>:
		Limit_Flag ^= TRUE;
		Current_Speed_value(&Current_Speed);
		_delay_ms(1250);
	}
}
void SET_LIMIT_SPEED() {
    343e:	2f 92       	push	r2
    3440:	3f 92       	push	r3
    3442:	4f 92       	push	r4
    3444:	5f 92       	push	r5
    3446:	6f 92       	push	r6
    3448:	7f 92       	push	r7
    344a:	8f 92       	push	r8
    344c:	9f 92       	push	r9
    344e:	af 92       	push	r10
    3450:	bf 92       	push	r11
    3452:	cf 92       	push	r12
    3454:	df 92       	push	r13
    3456:	ef 92       	push	r14
    3458:	ff 92       	push	r15
    345a:	0f 93       	push	r16
    345c:	1f 93       	push	r17
    345e:	df 93       	push	r29
    3460:	cf 93       	push	r28
    3462:	00 d0       	rcall	.+0      	; 0x3464 <SET_LIMIT_SPEED+0x26>
    3464:	cd b7       	in	r28, 0x3d	; 61
    3466:	de b7       	in	r29, 0x3e	; 62
	LCD_Clear();
    3468:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <LCD_Clear>
	LCD_LINE_position(0, 1);
    346c:	80 e0       	ldi	r24, 0x00	; 0
    346e:	61 e0       	ldi	r22, 0x01	; 1
    3470:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
	LCD_Write_String("PLEASE ADJUST VR2");
    3474:	8d ee       	ldi	r24, 0xED	; 237
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>
	LCD_LINE_position(1, 4);
    347c:	81 e0       	ldi	r24, 0x01	; 1
    347e:	64 e0       	ldi	r22, 0x04	; 4
    3480:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
	LCD_Write_String("TO SET VALUE");
    3484:	8f ef       	ldi	r24, 0xFF	; 255
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>
	LCD_LINE_position(2, 3);
    348c:	82 e0       	ldi	r24, 0x02	; 2
    348e:	63 e0       	ldi	r22, 0x03	; 3
    3490:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
	LCD_Write_String("LIMIT SPEED:");
    3494:	8c e0       	ldi	r24, 0x0C	; 12
    3496:	91 e0       	ldi	r25, 0x01	; 1
    3498:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>
	UINT16_t CURRENT_LIMIT_VALUE = 0, limit_avrg = 0;
    349c:	1a 82       	std	Y+2, r1	; 0x02
    349e:	19 82       	std	Y+1, r1	; 0x01
	KEYPAD_Read(&Mode_Selected);
    34a0:	89 e6       	ldi	r24, 0x69	; 105
    34a2:	92 e0       	ldi	r25, 0x02	; 2
    34a4:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <KEYPAD_Read>
    34a8:	44 24       	eor	r4, r4
    34aa:	55 24       	eor	r5, r5
	while ((Mode_Selected != 'B')) {
		KEYPAD_Read(&Mode_Selected);
		LCD_LINE_position(3, 8);
		LCD_Write_String("     ");
		LCD_LINE_position(3, 8);
    34ac:	22 24       	eor	r2, r2
    34ae:	33 24       	eor	r3, r3
		limit_avrg = 0;
		for (int i = 0; i < 20; i++) {
			LIMIT_Speed_Analog_Read(&CURRENT_LIMIT_VALUE);
    34b0:	3e 01       	movw	r6, r28
    34b2:	08 94       	sec
    34b4:	61 1c       	adc	r6, r1
    34b6:	71 1c       	adc	r7, r1
    34b8:	0f 2e       	mov	r0, r31
    34ba:	f0 e9       	ldi	r31, 0x90	; 144
    34bc:	8f 2e       	mov	r8, r31
    34be:	f1 e0       	ldi	r31, 0x01	; 1
    34c0:	9f 2e       	mov	r9, r31
    34c2:	f0 2d       	mov	r31, r0
    34c4:	49 c0       	rjmp	.+146    	; 0x3558 <SET_LIMIT_SPEED+0x11a>
	LCD_LINE_position(2, 3);
	LCD_Write_String("LIMIT SPEED:");
	UINT16_t CURRENT_LIMIT_VALUE = 0, limit_avrg = 0;
	KEYPAD_Read(&Mode_Selected);
	while ((Mode_Selected != 'B')) {
		KEYPAD_Read(&Mode_Selected);
    34c6:	89 e6       	ldi	r24, 0x69	; 105
    34c8:	92 e0       	ldi	r25, 0x02	; 2
    34ca:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <KEYPAD_Read>
		LCD_LINE_position(3, 8);
    34ce:	83 e0       	ldi	r24, 0x03	; 3
    34d0:	68 e0       	ldi	r22, 0x08	; 8
    34d2:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		LCD_Write_String("     ");
    34d6:	89 e1       	ldi	r24, 0x19	; 25
    34d8:	91 e0       	ldi	r25, 0x01	; 1
    34da:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>
		LCD_LINE_position(3, 8);
    34de:	83 e0       	ldi	r24, 0x03	; 3
    34e0:	68 e0       	ldi	r22, 0x08	; 8
    34e2:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
    34e6:	71 01       	movw	r14, r2
    34e8:	81 01       	movw	r16, r2
		limit_avrg = 0;
		for (int i = 0; i < 20; i++) {
			LIMIT_Speed_Analog_Read(&CURRENT_LIMIT_VALUE);
    34ea:	c3 01       	movw	r24, r6
    34ec:	0e 94 37 14 	call	0x286e	; 0x286e <LIMIT_Speed_Analog_Read>
			limit_avrg += CURRENT_LIMIT_VALUE;
    34f0:	89 81       	ldd	r24, Y+1	; 0x01
    34f2:	9a 81       	ldd	r25, Y+2	; 0x02
    34f4:	e8 0e       	add	r14, r24
    34f6:	f9 1e       	adc	r15, r25
		KEYPAD_Read(&Mode_Selected);
		LCD_LINE_position(3, 8);
		LCD_Write_String("     ");
		LCD_LINE_position(3, 8);
		limit_avrg = 0;
		for (int i = 0; i < 20; i++) {
    34f8:	0f 5f       	subi	r16, 0xFF	; 255
    34fa:	1f 4f       	sbci	r17, 0xFF	; 255
    34fc:	04 31       	cpi	r16, 0x14	; 20
    34fe:	11 05       	cpc	r17, r1
    3500:	a1 f7       	brne	.-24     	; 0x34ea <SET_LIMIT_SPEED+0xac>
			LIMIT_Speed_Analog_Read(&CURRENT_LIMIT_VALUE);
			limit_avrg += CURRENT_LIMIT_VALUE;
		}
		limit_avrg = (((limit_avrg/20)-24)/4);
    3502:	c7 01       	movw	r24, r14
    3504:	64 e1       	ldi	r22, 0x14	; 20
    3506:	70 e0       	ldi	r23, 0x00	; 0
    3508:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__udivmodhi4>
    350c:	68 51       	subi	r22, 0x18	; 24
    350e:	70 40       	sbci	r23, 0x00	; 0
    3510:	2b 01       	movw	r4, r22
    3512:	56 94       	lsr	r5
    3514:	47 94       	ror	r4
    3516:	56 94       	lsr	r5
    3518:	47 94       	ror	r4
		LCD_Write_Number(limit_avrg);
    351a:	52 01       	movw	r10, r4
    351c:	cc 24       	eor	r12, r12
    351e:	dd 24       	eor	r13, r13
    3520:	ee 24       	eor	r14, r14
    3522:	ff 24       	eor	r15, r15
    3524:	87 01       	movw	r16, r14
    3526:	24 2d       	mov	r18, r4
    3528:	3b 2d       	mov	r19, r11
    352a:	4c 2d       	mov	r20, r12
    352c:	5d 2d       	mov	r21, r13
    352e:	6e 2d       	mov	r22, r14
    3530:	7f 2d       	mov	r23, r15
    3532:	80 2f       	mov	r24, r16
    3534:	91 2f       	mov	r25, r17
    3536:	0e 94 b2 14 	call	0x2964	; 0x2964 <LCD_Write_Number>

		LCD_LINE_position(3, 13);
    353a:	83 e0       	ldi	r24, 0x03	; 3
    353c:	6d e0       	ldi	r22, 0x0D	; 13
    353e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		LCD_Write_Character(0x7F);
    3542:	8f e7       	ldi	r24, 0x7F	; 127
    3544:	0e 94 43 14 	call	0x2886	; 0x2886 <LCD_Write_Character>
    3548:	28 ee       	ldi	r18, 0xE8	; 232
    354a:	33 e0       	ldi	r19, 0x03	; 3
    354c:	c4 01       	movw	r24, r8
    354e:	01 97       	sbiw	r24, 0x01	; 1
    3550:	f1 f7       	brne	.-4      	; 0x354e <SET_LIMIT_SPEED+0x110>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3552:	21 50       	subi	r18, 0x01	; 1
    3554:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3556:	d1 f7       	brne	.-12     	; 0x354c <SET_LIMIT_SPEED+0x10e>
	LCD_Write_String("TO SET VALUE");
	LCD_LINE_position(2, 3);
	LCD_Write_String("LIMIT SPEED:");
	UINT16_t CURRENT_LIMIT_VALUE = 0, limit_avrg = 0;
	KEYPAD_Read(&Mode_Selected);
	while ((Mode_Selected != 'B')) {
    3558:	80 91 69 02 	lds	r24, 0x0269
    355c:	82 34       	cpi	r24, 0x42	; 66
    355e:	09 f0       	breq	.+2      	; 0x3562 <SET_LIMIT_SPEED+0x124>
    3560:	b2 cf       	rjmp	.-156    	; 0x34c6 <SET_LIMIT_SPEED+0x88>
		LCD_Write_Character(0x7F);
		_delay_ms(100);
	}
	UINT8_t Limit_Speed_Value = 0;
	Limit_Speed_Value = (UINT8_t) limit_avrg;
	Master_Send(Limit_Speed_Value);
    3562:	84 2d       	mov	r24, r4
    3564:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Master_Send>
    3568:	20 ed       	ldi	r18, 0xD0	; 208
    356a:	37 e0       	ldi	r19, 0x07	; 7
    356c:	40 e9       	ldi	r20, 0x90	; 144
    356e:	51 e0       	ldi	r21, 0x01	; 1
    3570:	ca 01       	movw	r24, r20
    3572:	01 97       	sbiw	r24, 0x01	; 1
    3574:	f1 f7       	brne	.-4      	; 0x3572 <SET_LIMIT_SPEED+0x134>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3576:	21 50       	subi	r18, 0x01	; 1
    3578:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    357a:	d1 f7       	brne	.-12     	; 0x3570 <SET_LIMIT_SPEED+0x132>
	_delay_ms(200);
	/*SPI WRITE*/

}
    357c:	0f 90       	pop	r0
    357e:	0f 90       	pop	r0
    3580:	cf 91       	pop	r28
    3582:	df 91       	pop	r29
    3584:	1f 91       	pop	r17
    3586:	0f 91       	pop	r16
    3588:	ff 90       	pop	r15
    358a:	ef 90       	pop	r14
    358c:	df 90       	pop	r13
    358e:	cf 90       	pop	r12
    3590:	bf 90       	pop	r11
    3592:	af 90       	pop	r10
    3594:	9f 90       	pop	r9
    3596:	8f 90       	pop	r8
    3598:	7f 90       	pop	r7
    359a:	6f 90       	pop	r6
    359c:	5f 90       	pop	r5
    359e:	4f 90       	pop	r4
    35a0:	3f 90       	pop	r3
    35a2:	2f 90       	pop	r2
    35a4:	08 95       	ret

000035a6 <Current_Speed_value>:
		break;
	default:
		break;
	}
}
void Current_Speed_value(SINT16_t *Speed) {
    35a6:	af 92       	push	r10
    35a8:	bf 92       	push	r11
    35aa:	cf 92       	push	r12
    35ac:	df 92       	push	r13
    35ae:	ef 92       	push	r14
    35b0:	ff 92       	push	r15
    35b2:	0f 93       	push	r16
    35b4:	1f 93       	push	r17
    35b6:	df 93       	push	r29
    35b8:	cf 93       	push	r28
    35ba:	00 d0       	rcall	.+0      	; 0x35bc <Current_Speed_value+0x16>
    35bc:	cd b7       	in	r28, 0x3d	; 61
    35be:	de b7       	in	r29, 0x3e	; 62
    35c0:	5c 01       	movw	r10, r24
	UINT16_t speed_adj = 0;
    35c2:	1a 82       	std	Y+2, r1	; 0x02
    35c4:	19 82       	std	Y+1, r1	; 0x01
    35c6:	ee 24       	eor	r14, r14
    35c8:	ff 24       	eor	r15, r15
    35ca:	00 e0       	ldi	r16, 0x00	; 0
    35cc:	10 e0       	ldi	r17, 0x00	; 0
	SINT16_t speed_val = 0;

	for (int i = 0; i < 30; i++) {
		Speed_Analog_Read(&speed_adj);
    35ce:	6e 01       	movw	r12, r28
    35d0:	08 94       	sec
    35d2:	c1 1c       	adc	r12, r1
    35d4:	d1 1c       	adc	r13, r1
    35d6:	c6 01       	movw	r24, r12
    35d8:	0e 94 2b 14 	call	0x2856	; 0x2856 <Speed_Analog_Read>
		speed_val += ((speed_adj / 2) - 262);
    35dc:	89 81       	ldd	r24, Y+1	; 0x01
    35de:	9a 81       	ldd	r25, Y+2	; 0x02
    35e0:	96 95       	lsr	r25
    35e2:	87 95       	ror	r24
    35e4:	86 50       	subi	r24, 0x06	; 6
    35e6:	91 40       	sbci	r25, 0x01	; 1
    35e8:	e8 0e       	add	r14, r24
    35ea:	f9 1e       	adc	r15, r25
}
void Current_Speed_value(SINT16_t *Speed) {
	UINT16_t speed_adj = 0;
	SINT16_t speed_val = 0;

	for (int i = 0; i < 30; i++) {
    35ec:	0f 5f       	subi	r16, 0xFF	; 255
    35ee:	1f 4f       	sbci	r17, 0xFF	; 255
    35f0:	0e 31       	cpi	r16, 0x1E	; 30
    35f2:	11 05       	cpc	r17, r1
    35f4:	81 f7       	brne	.-32     	; 0x35d6 <Current_Speed_value+0x30>
		Speed_Analog_Read(&speed_adj);
		speed_val += ((speed_adj / 2) - 262);
	}
	speed_val /= 30;
    35f6:	c7 01       	movw	r24, r14
    35f8:	6e e1       	ldi	r22, 0x1E	; 30
    35fa:	70 e0       	ldi	r23, 0x00	; 0
    35fc:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__divmodhi4>
    3600:	86 2f       	mov	r24, r22
    3602:	97 2f       	mov	r25, r23
    3604:	8c 01       	movw	r16, r24
    3606:	8f ef       	ldi	r24, 0xFF	; 255
    3608:	02 3e       	cpi	r16, 0xE2	; 226
    360a:	18 07       	cpc	r17, r24
    360c:	14 f4       	brge	.+4      	; 0x3612 <Current_Speed_value+0x6c>
    360e:	02 ee       	ldi	r16, 0xE2	; 226
    3610:	1f ef       	ldi	r17, 0xFF	; 255
	if(speed_val <(-30)){
		speed_val = -30;
	}
	if (Limit_Flag) {
    3612:	80 91 bf 02 	lds	r24, 0x02BF
    3616:	88 23       	and	r24, r24
    3618:	39 f1       	breq	.+78     	; 0x3668 <Current_Speed_value+0xc2>
		/*SPI read UPDATE*/
		//UINT8_t SPEED_LIMIT = 0;
		if(one_time_flag){
    361a:	80 91 68 02 	lds	r24, 0x0268
    361e:	88 23       	and	r24, r24
    3620:	99 f0       	breq	.+38     	; 0x3648 <Current_Speed_value+0xa2>
			Master_Send(UPDATE_YOURSELF);
    3622:	8d ef       	ldi	r24, 0xFD	; 253
    3624:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Master_Send>
    3628:	20 ed       	ldi	r18, 0xD0	; 208
    362a:	37 e0       	ldi	r19, 0x07	; 7
    362c:	40 e9       	ldi	r20, 0x90	; 144
    362e:	51 e0       	ldi	r21, 0x01	; 1
    3630:	ca 01       	movw	r24, r20
    3632:	01 97       	sbiw	r24, 0x01	; 1
    3634:	f1 f7       	brne	.-4      	; 0x3632 <Current_Speed_value+0x8c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3636:	21 50       	subi	r18, 0x01	; 1
    3638:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    363a:	d1 f7       	brne	.-12     	; 0x3630 <Current_Speed_value+0x8a>
			_delay_ms(200);
			SPEED_LIMIT = Master_Receive();
    363c:	0e 94 73 11 	call	0x22e6	; 0x22e6 <Master_Receive>
    3640:	80 93 b9 02 	sts	0x02B9, r24
			one_time_flag =FALSE;
    3644:	10 92 68 02 	sts	0x0268, r1
		}

		if (speed_val > SPEED_LIMIT) {
    3648:	80 91 b9 02 	lds	r24, 0x02B9
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	80 17       	cp	r24, r16
    3650:	91 07       	cpc	r25, r17
    3652:	0c f4       	brge	.+2      	; 0x3656 <Current_Speed_value+0xb0>
    3654:	8c 01       	movw	r16, r24
			speed_val = (SPEED_LIMIT);
		}
		if ((speed_val) < (SPEED_LIMIT) * (-1)) {
    3656:	22 27       	eor	r18, r18
    3658:	33 27       	eor	r19, r19
    365a:	28 1b       	sub	r18, r24
    365c:	39 0b       	sbc	r19, r25
    365e:	02 17       	cp	r16, r18
    3660:	13 07       	cpc	r17, r19
    3662:	2c f4       	brge	.+10     	; 0x366e <Current_Speed_value+0xc8>
    3664:	89 01       	movw	r16, r18
    3666:	03 c0       	rjmp	.+6      	; 0x366e <Current_Speed_value+0xc8>
			speed_val = (SPEED_LIMIT) * (-1);
		}
	}else{
		one_time_flag =TRUE;
    3668:	81 e0       	ldi	r24, 0x01	; 1
    366a:	80 93 68 02 	sts	0x0268, r24
	}
	*Speed = speed_val;
    366e:	f5 01       	movw	r30, r10
    3670:	11 83       	std	Z+1, r17	; 0x01
    3672:	00 83       	st	Z, r16
}
    3674:	0f 90       	pop	r0
    3676:	0f 90       	pop	r0
    3678:	cf 91       	pop	r28
    367a:	df 91       	pop	r29
    367c:	1f 91       	pop	r17
    367e:	0f 91       	pop	r16
    3680:	ff 90       	pop	r15
    3682:	ef 90       	pop	r14
    3684:	df 90       	pop	r13
    3686:	cf 90       	pop	r12
    3688:	bf 90       	pop	r11
    368a:	af 90       	pop	r10
    368c:	08 95       	ret

0000368e <TGL_Limit_Speed>:
void TGL_Limit_Speed() {
	if (Current_Speed == 0) {
    368e:	80 91 ba 02 	lds	r24, 0x02BA
    3692:	90 91 bb 02 	lds	r25, 0x02BB
    3696:	89 2b       	or	r24, r25
    3698:	39 f5       	brne	.+78     	; 0x36e8 <TGL_Limit_Speed+0x5a>
		LCD_Clear();
    369a:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <LCD_Clear>
		LCD_LINE_position(0, 1);
    369e:	80 e0       	ldi	r24, 0x00	; 0
    36a0:	61 e0       	ldi	r22, 0x01	; 1
    36a2:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		if (Limit_Flag) {
    36a6:	80 91 bf 02 	lds	r24, 0x02BF
    36aa:	88 23       	and	r24, r24
    36ac:	29 f0       	breq	.+10     	; 0x36b8 <TGL_Limit_Speed+0x2a>
			LCD_Write_String("LIMIT SPEED OFF");
    36ae:	8f e1       	ldi	r24, 0x1F	; 31
    36b0:	91 e0       	ldi	r25, 0x01	; 1
    36b2:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>
    36b6:	04 c0       	rjmp	.+8      	; 0x36c0 <TGL_Limit_Speed+0x32>
		} else {
			LCD_Write_String("LIMIT SPEED ON");
    36b8:	8f e2       	ldi	r24, 0x2F	; 47
    36ba:	91 e0       	ldi	r25, 0x01	; 1
    36bc:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>
		}
		Limit_Flag ^= TRUE;
    36c0:	80 91 bf 02 	lds	r24, 0x02BF
    36c4:	91 e0       	ldi	r25, 0x01	; 1
    36c6:	89 27       	eor	r24, r25
    36c8:	80 93 bf 02 	sts	0x02BF, r24
		Current_Speed_value(&Current_Speed);
    36cc:	8a eb       	ldi	r24, 0xBA	; 186
    36ce:	92 e0       	ldi	r25, 0x02	; 2
    36d0:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <Current_Speed_value>
    36d4:	24 ed       	ldi	r18, 0xD4	; 212
    36d6:	30 e3       	ldi	r19, 0x30	; 48
    36d8:	40 e9       	ldi	r20, 0x90	; 144
    36da:	51 e0       	ldi	r21, 0x01	; 1
    36dc:	ca 01       	movw	r24, r20
    36de:	01 97       	sbiw	r24, 0x01	; 1
    36e0:	f1 f7       	brne	.-4      	; 0x36de <TGL_Limit_Speed+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36e2:	21 50       	subi	r18, 0x01	; 1
    36e4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36e6:	d1 f7       	brne	.-12     	; 0x36dc <TGL_Limit_Speed+0x4e>
    36e8:	08 95       	ret

000036ea <Main_LCD_Display>:
extern SINT16_t Current_Speed;
extern bool Limit_Flag;
extern UINT8_t Mode_Selected;
bool one_time_flag=TRUE;
UINT8_t SPEED_LIMIT = 0;
void Main_LCD_Display(MODES Mode) {
    36ea:	9f 92       	push	r9
    36ec:	af 92       	push	r10
    36ee:	bf 92       	push	r11
    36f0:	cf 92       	push	r12
    36f2:	df 92       	push	r13
    36f4:	ef 92       	push	r14
    36f6:	ff 92       	push	r15
    36f8:	0f 93       	push	r16
    36fa:	1f 93       	push	r17
    36fc:	98 2e       	mov	r9, r24

	UINT16_t Current_Speed_Positive = 0;
	if (Current_Speed < 0) {
    36fe:	80 91 ba 02 	lds	r24, 0x02BA
    3702:	90 91 bb 02 	lds	r25, 0x02BB
    3706:	99 23       	and	r25, r25
    3708:	2c f4       	brge	.+10     	; 0x3714 <Main_LCD_Display+0x2a>
		Current_Speed_Positive = Current_Speed * (-1);
    370a:	aa 24       	eor	r10, r10
    370c:	bb 24       	eor	r11, r11
    370e:	a8 1a       	sub	r10, r24
    3710:	b9 0a       	sbc	r11, r25
    3712:	01 c0       	rjmp	.+2      	; 0x3716 <Main_LCD_Display+0x2c>
	} else {
		Current_Speed_Positive = Current_Speed;
    3714:	5c 01       	movw	r10, r24
	}
	LCD_Curser_OFF();
    3716:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_Curser_OFF>
	LCD_LINE_position(0, 0);
    371a:	80 e0       	ldi	r24, 0x00	; 0
    371c:	60 e0       	ldi	r22, 0x00	; 0
    371e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
	LCD_Write_String("SPEED:");
    3722:	8e e3       	ldi	r24, 0x3E	; 62
    3724:	91 e0       	ldi	r25, 0x01	; 1
    3726:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>
	LCD_LINE_position(0, 6);
    372a:	80 e0       	ldi	r24, 0x00	; 0
    372c:	66 e0       	ldi	r22, 0x06	; 6
    372e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
	LCD_Write_String("   ");
    3732:	88 ed       	ldi	r24, 0xD8	; 216
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>
	LCD_LINE_position(0, 6);
    373a:	80 e0       	ldi	r24, 0x00	; 0
    373c:	66 e0       	ldi	r22, 0x06	; 6
    373e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
	LCD_Write_Number(Current_Speed_Positive);
    3742:	cc 24       	eor	r12, r12
    3744:	dd 24       	eor	r13, r13
    3746:	ee 24       	eor	r14, r14
    3748:	ff 24       	eor	r15, r15
    374a:	87 01       	movw	r16, r14
    374c:	2a 2d       	mov	r18, r10
    374e:	3b 2d       	mov	r19, r11
    3750:	4c 2d       	mov	r20, r12
    3752:	5d 2d       	mov	r21, r13
    3754:	6e 2d       	mov	r22, r14
    3756:	7f 2d       	mov	r23, r15
    3758:	80 2f       	mov	r24, r16
    375a:	91 2f       	mov	r25, r17
    375c:	0e 94 b2 14 	call	0x2964	; 0x2964 <LCD_Write_Number>
	if(Limit_Flag){
    3760:	80 91 bf 02 	lds	r24, 0x02BF
    3764:	88 23       	and	r24, r24
    3766:	f1 f0       	breq	.+60     	; 0x37a4 <Main_LCD_Display+0xba>
		LCD_LINE_position(0, 10);
    3768:	80 e0       	ldi	r24, 0x00	; 0
    376a:	6a e0       	ldi	r22, 0x0A	; 10
    376c:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		LCD_Write_String("!LIM");
    3770:	85 e4       	ldi	r24, 0x45	; 69
    3772:	91 e0       	ldi	r25, 0x01	; 1
    3774:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>
		LCD_LINE_position(1, 11);
    3778:	81 e0       	ldi	r24, 0x01	; 1
    377a:	6b e0       	ldi	r22, 0x0B	; 11
    377c:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		LCD_Write_Number(SPEED_LIMIT);
    3780:	a0 90 b9 02 	lds	r10, 0x02B9
    3784:	bb 24       	eor	r11, r11
    3786:	cc 24       	eor	r12, r12
    3788:	dd 24       	eor	r13, r13
    378a:	ee 24       	eor	r14, r14
    378c:	ff 24       	eor	r15, r15
    378e:	87 01       	movw	r16, r14
    3790:	2a 2d       	mov	r18, r10
    3792:	3b 2d       	mov	r19, r11
    3794:	4c 2d       	mov	r20, r12
    3796:	5d 2d       	mov	r21, r13
    3798:	6e 2d       	mov	r22, r14
    379a:	7f 2d       	mov	r23, r15
    379c:	80 2f       	mov	r24, r16
    379e:	91 2f       	mov	r25, r17
    37a0:	0e 94 b2 14 	call	0x2964	; 0x2964 <LCD_Write_Number>
	}
	LCD_LINE_position(2, 0);
    37a4:	82 e0       	ldi	r24, 0x02	; 2
    37a6:	60 e0       	ldi	r22, 0x00	; 0
    37a8:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
	LCD_Write_String("1)TGL MAXSPEED");
    37ac:	8a e4       	ldi	r24, 0x4A	; 74
    37ae:	91 e0       	ldi	r25, 0x01	; 1
    37b0:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>
	LCD_LINE_position(3, 0);
    37b4:	83 e0       	ldi	r24, 0x03	; 3
    37b6:	60 e0       	ldi	r22, 0x00	; 0
    37b8:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
	LCD_Write_String("2)SET MAXSPEED");
    37bc:	89 e5       	ldi	r24, 0x59	; 89
    37be:	91 e0       	ldi	r25, 0x01	; 1
    37c0:	0e 94 ef 15 	call	0x2bde	; 0x2bde <LCD_Write_String>

	switch (Mode) {
    37c4:	81 e0       	ldi	r24, 0x01	; 1
    37c6:	98 16       	cp	r9, r24
    37c8:	b1 f0       	breq	.+44     	; 0x37f6 <Main_LCD_Display+0x10c>
    37ca:	98 16       	cp	r9, r24
    37cc:	40 f0       	brcs	.+16     	; 0x37de <Main_LCD_Display+0xf4>
    37ce:	82 e0       	ldi	r24, 0x02	; 2
    37d0:	98 16       	cp	r9, r24
    37d2:	39 f1       	breq	.+78     	; 0x3822 <Main_LCD_Display+0x138>
    37d4:	83 e0       	ldi	r24, 0x03	; 3
    37d6:	98 16       	cp	r9, r24
    37d8:	09 f0       	breq	.+2      	; 0x37dc <Main_LCD_Display+0xf2>
    37da:	42 c0       	rjmp	.+132    	; 0x3860 <Main_LCD_Display+0x176>
    37dc:	32 c0       	rjmp	.+100    	; 0x3842 <Main_LCD_Display+0x158>
	case Parking_Mode:
		BLUE_LED_OFF();
    37de:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <BLUE_LED_OFF>
		GREEN_LED_OFF();
    37e2:	0e 94 29 18 	call	0x3052	; 0x3052 <GREEN_LED_OFF>
		YELLOW_LED_ON();
    37e6:	0e 94 1f 14 	call	0x283e	; 0x283e <YELLOW_LED_ON>
		BUZZER_OFF();
    37ea:	0e 94 41 18 	call	0x3082	; 0x3082 <BUZZER_OFF>
		Display_Letter(P);
    37ee:	80 e0       	ldi	r24, 0x00	; 0
    37f0:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <Display_Letter>
    37f4:	35 c0       	rjmp	.+106    	; 0x3860 <Main_LCD_Display+0x176>
		break;
	case Reverse_Mode:
		BLUE_LED_OFF();
    37f6:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <BLUE_LED_OFF>
		GREEN_LED_OFF();
    37fa:	0e 94 29 18 	call	0x3052	; 0x3052 <GREEN_LED_OFF>
		YELLOW_LED_OFF();
    37fe:	0e 94 19 14 	call	0x2832	; 0x2832 <YELLOW_LED_OFF>
		BUZZER_TGL();
    3802:	0e 94 3b 18 	call	0x3076	; 0x3076 <BUZZER_TGL>
    3806:	2a ef       	ldi	r18, 0xFA	; 250
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	40 e9       	ldi	r20, 0x90	; 144
    380c:	51 e0       	ldi	r21, 0x01	; 1
    380e:	ca 01       	movw	r24, r20
    3810:	01 97       	sbiw	r24, 0x01	; 1
    3812:	f1 f7       	brne	.-4      	; 0x3810 <Main_LCD_Display+0x126>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3814:	21 50       	subi	r18, 0x01	; 1
    3816:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3818:	d1 f7       	brne	.-12     	; 0x380e <Main_LCD_Display+0x124>
		_delay_ms(25);
		Display_Letter(R);
    381a:	81 e0       	ldi	r24, 0x01	; 1
    381c:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <Display_Letter>
    3820:	1f c0       	rjmp	.+62     	; 0x3860 <Main_LCD_Display+0x176>
		break;
	case Normal_Mode:
		BLUE_LED_ON();
    3822:	0e 94 63 18 	call	0x30c6	; 0x30c6 <BLUE_LED_ON>
		GREEN_LED_OFF();
    3826:	0e 94 29 18 	call	0x3052	; 0x3052 <GREEN_LED_OFF>
		YELLOW_LED_OFF();
    382a:	0e 94 19 14 	call	0x2832	; 0x2832 <YELLOW_LED_OFF>
		BUZZER_OFF();
    382e:	0e 94 41 18 	call	0x3082	; 0x3082 <BUZZER_OFF>
		LCD_LINE_position(2, 19);
    3832:	82 e0       	ldi	r24, 0x02	; 2
    3834:	63 e1       	ldi	r22, 0x13	; 19
    3836:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		Display_Letter(N);
    383a:	82 e0       	ldi	r24, 0x02	; 2
    383c:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <Display_Letter>
    3840:	0f c0       	rjmp	.+30     	; 0x3860 <Main_LCD_Display+0x176>
		break;
	case Drive_Mode:
		BLUE_LED_OFF();
    3842:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <BLUE_LED_OFF>
		GREEN_LED_ON();
    3846:	0e 94 2f 18 	call	0x305e	; 0x305e <GREEN_LED_ON>
		YELLOW_LED_OFF();
    384a:	0e 94 19 14 	call	0x2832	; 0x2832 <YELLOW_LED_OFF>
		BUZZER_OFF();
    384e:	0e 94 41 18 	call	0x3082	; 0x3082 <BUZZER_OFF>
		LCD_LINE_position(3, 19);
    3852:	83 e0       	ldi	r24, 0x03	; 3
    3854:	63 e1       	ldi	r22, 0x13	; 19
    3856:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCD_LINE_position>
		Display_Letter(D);
    385a:	83 e0       	ldi	r24, 0x03	; 3
    385c:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <Display_Letter>
		break;
	default:
		break;
	}
}
    3860:	1f 91       	pop	r17
    3862:	0f 91       	pop	r16
    3864:	ff 90       	pop	r15
    3866:	ef 90       	pop	r14
    3868:	df 90       	pop	r13
    386a:	cf 90       	pop	r12
    386c:	bf 90       	pop	r11
    386e:	af 90       	pop	r10
    3870:	9f 90       	pop	r9
    3872:	08 95       	ret

00003874 <Drive_State>:
	default:
		/**/
		break;
	}
}
void Drive_State() {
    3874:	0f 93       	push	r16
    3876:	1f 93       	push	r17
    3878:	cf 93       	push	r28
    387a:	df 93       	push	r29
	LCD_Clear();
    387c:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <LCD_Clear>
	KEYPAD_Read(&Mode_Selected);
    3880:	89 e6       	ldi	r24, 0x69	; 105
    3882:	92 e0       	ldi	r25, 0x02	; 2
    3884:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <KEYPAD_Read>
	while ((Mode_Selected == 'E' || Mode_Selected == 'D' || Mode_Selected == 'B')
			&& Current_Speed >= 0) {
		Main_LCD_Display(Drive_Mode);
		KEYPAD_Read(&Mode_Selected);
    3888:	09 e6       	ldi	r16, 0x69	; 105
    388a:	12 e0       	ldi	r17, 0x02	; 2
		Current_Speed_value(&Current_Speed);
    388c:	ca eb       	ldi	r28, 0xBA	; 186
    388e:	d2 e0       	ldi	r29, 0x02	; 2
    3890:	09 c0       	rjmp	.+18     	; 0x38a4 <Drive_State+0x30>
void Drive_State() {
	LCD_Clear();
	KEYPAD_Read(&Mode_Selected);
	while ((Mode_Selected == 'E' || Mode_Selected == 'D' || Mode_Selected == 'B')
			&& Current_Speed >= 0) {
		Main_LCD_Display(Drive_Mode);
    3892:	83 e0       	ldi	r24, 0x03	; 3
    3894:	0e 94 75 1b 	call	0x36ea	; 0x36ea <Main_LCD_Display>
		KEYPAD_Read(&Mode_Selected);
    3898:	c8 01       	movw	r24, r16
    389a:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <KEYPAD_Read>
		Current_Speed_value(&Current_Speed);
    389e:	ce 01       	movw	r24, r28
    38a0:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <Current_Speed_value>
	}
}
void Drive_State() {
	LCD_Clear();
	KEYPAD_Read(&Mode_Selected);
	while ((Mode_Selected == 'E' || Mode_Selected == 'D' || Mode_Selected == 'B')
    38a4:	90 91 69 02 	lds	r25, 0x0269
    38a8:	89 2f       	mov	r24, r25
    38aa:	84 54       	subi	r24, 0x44	; 68
    38ac:	82 30       	cpi	r24, 0x02	; 2
    38ae:	10 f0       	brcs	.+4      	; 0x38b4 <Drive_State+0x40>
    38b0:	92 34       	cpi	r25, 0x42	; 66
    38b2:	39 f4       	brne	.+14     	; 0x38c2 <Drive_State+0x4e>
    38b4:	20 91 ba 02 	lds	r18, 0x02BA
    38b8:	30 91 bb 02 	lds	r19, 0x02BB
    38bc:	33 23       	and	r19, r19
    38be:	4c f7       	brge	.-46     	; 0x3892 <Drive_State+0x1e>
    38c0:	07 c0       	rjmp	.+14     	; 0x38d0 <Drive_State+0x5c>
			&& Current_Speed >= 0) {
		Main_LCD_Display(Drive_Mode);
		KEYPAD_Read(&Mode_Selected);
		Current_Speed_value(&Current_Speed);
	}
	if (Current_Speed <= 0) {
    38c2:	20 91 ba 02 	lds	r18, 0x02BA
    38c6:	30 91 bb 02 	lds	r19, 0x02BB
    38ca:	12 16       	cp	r1, r18
    38cc:	13 06       	cpc	r1, r19
    38ce:	2c f0       	brlt	.+10     	; 0x38da <Drive_State+0x66>
		Reverse_Flag = TRUE;
    38d0:	81 e0       	ldi	r24, 0x01	; 1
    38d2:	80 93 bc 02 	sts	0x02BC, r24
		Drive_Flag = FALSE;
    38d6:	10 92 be 02 	sts	0x02BE, r1
	}
	switch (Mode_Selected) {
    38da:	90 35       	cpi	r25, 0x50	; 80
    38dc:	61 f0       	breq	.+24     	; 0x38f6 <Drive_State+0x82>
    38de:	91 35       	cpi	r25, 0x51	; 81
    38e0:	28 f4       	brcc	.+10     	; 0x38ec <Drive_State+0x78>
    38e2:	9e 34       	cpi	r25, 0x4E	; 78
    38e4:	c9 f0       	breq	.+50     	; 0x3918 <Drive_State+0xa4>
    38e6:	9f 34       	cpi	r25, 0x4F	; 79
    38e8:	21 f5       	brne	.+72     	; 0x3932 <Drive_State+0xbe>
    38ea:	1e c0       	rjmp	.+60     	; 0x3928 <Drive_State+0xb4>
    38ec:	92 35       	cpi	r25, 0x52	; 82
    38ee:	59 f0       	breq	.+22     	; 0x3906 <Drive_State+0x92>
    38f0:	93 35       	cpi	r25, 0x53	; 83
    38f2:	f9 f4       	brne	.+62     	; 0x3932 <Drive_State+0xbe>
    38f4:	1c c0       	rjmp	.+56     	; 0x392e <Drive_State+0xba>
	case 'P':
		if (Current_Speed == 0) {
    38f6:	23 2b       	or	r18, r19
    38f8:	e1 f4       	brne	.+56     	; 0x3932 <Drive_State+0xbe>
			Parking_Flag = TRUE;
    38fa:	81 e0       	ldi	r24, 0x01	; 1
    38fc:	80 93 6a 02 	sts	0x026A, r24
			Drive_Flag = FALSE;
    3900:	10 92 be 02 	sts	0x02BE, r1
    3904:	16 c0       	rjmp	.+44     	; 0x3932 <Drive_State+0xbe>
		}
		break;
	case 'R':
		if (Current_Speed == 0 || Current_Speed < 0) {
    3906:	12 16       	cp	r1, r18
    3908:	13 06       	cpc	r1, r19
    390a:	9c f0       	brlt	.+38     	; 0x3932 <Drive_State+0xbe>
			Reverse_Flag = TRUE;
    390c:	81 e0       	ldi	r24, 0x01	; 1
    390e:	80 93 bc 02 	sts	0x02BC, r24
			Drive_Flag = FALSE;
    3912:	10 92 be 02 	sts	0x02BE, r1
    3916:	0d c0       	rjmp	.+26     	; 0x3932 <Drive_State+0xbe>
		}
		break;
	case 'N':
		if (Current_Speed == 0 || Current_Speed > 0) {
    3918:	33 23       	and	r19, r19
    391a:	5c f0       	brlt	.+22     	; 0x3932 <Drive_State+0xbe>
			Normal_Flag = TRUE;
    391c:	81 e0       	ldi	r24, 0x01	; 1
    391e:	80 93 bd 02 	sts	0x02BD, r24
			Drive_Flag = FALSE;
    3922:	10 92 be 02 	sts	0x02BE, r1
    3926:	05 c0       	rjmp	.+10     	; 0x3932 <Drive_State+0xbe>
		}
		break;
	case 'O':
		TGL_Limit_Speed();
    3928:	0e 94 47 1b 	call	0x368e	; 0x368e <TGL_Limit_Speed>
    392c:	02 c0       	rjmp	.+4      	; 0x3932 <Drive_State+0xbe>
		break;
	case 'S':
		SET_LIMIT_SPEED();
    392e:	0e 94 1f 1a 	call	0x343e	; 0x343e <SET_LIMIT_SPEED>
		break;
	default:
		/**/
		break;
	}
}
    3932:	df 91       	pop	r29
    3934:	cf 91       	pop	r28
    3936:	1f 91       	pop	r17
    3938:	0f 91       	pop	r16
    393a:	08 95       	ret

0000393c <Normal_State>:
	default:

		break;
	}
}
void Normal_State() {
    393c:	cf 93       	push	r28
    393e:	df 93       	push	r29
	LCD_Clear();
    3940:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <LCD_Clear>
	KEYPAD_Read(&Mode_Selected);
    3944:	89 e6       	ldi	r24, 0x69	; 105
    3946:	92 e0       	ldi	r25, 0x02	; 2
    3948:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <KEYPAD_Read>
	while (Mode_Selected == 'E' || Mode_Selected == 'N' || Mode_Selected == 'B') {
		Main_LCD_Display(Normal_Mode);
		KEYPAD_Read(&Mode_Selected);
    394c:	c9 e6       	ldi	r28, 0x69	; 105
    394e:	d2 e0       	ldi	r29, 0x02	; 2
    3950:	06 c0       	rjmp	.+12     	; 0x395e <Normal_State+0x22>
}
void Normal_State() {
	LCD_Clear();
	KEYPAD_Read(&Mode_Selected);
	while (Mode_Selected == 'E' || Mode_Selected == 'N' || Mode_Selected == 'B') {
		Main_LCD_Display(Normal_Mode);
    3952:	82 e0       	ldi	r24, 0x02	; 2
    3954:	0e 94 75 1b 	call	0x36ea	; 0x36ea <Main_LCD_Display>
		KEYPAD_Read(&Mode_Selected);
    3958:	ce 01       	movw	r24, r28
    395a:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <KEYPAD_Read>
	}
}
void Normal_State() {
	LCD_Clear();
	KEYPAD_Read(&Mode_Selected);
	while (Mode_Selected == 'E' || Mode_Selected == 'N' || Mode_Selected == 'B') {
    395e:	80 91 69 02 	lds	r24, 0x0269
    3962:	85 34       	cpi	r24, 0x45	; 69
    3964:	b1 f3       	breq	.-20     	; 0x3952 <Normal_State+0x16>
    3966:	8e 34       	cpi	r24, 0x4E	; 78
    3968:	a1 f3       	breq	.-24     	; 0x3952 <Normal_State+0x16>
    396a:	82 34       	cpi	r24, 0x42	; 66
    396c:	91 f3       	breq	.-28     	; 0x3952 <Normal_State+0x16>
		Main_LCD_Display(Normal_Mode);
		KEYPAD_Read(&Mode_Selected);
	}
	switch (Mode_Selected) {
    396e:	80 35       	cpi	r24, 0x50	; 80
    3970:	61 f0       	breq	.+24     	; 0x398a <Normal_State+0x4e>
    3972:	81 35       	cpi	r24, 0x51	; 81
    3974:	28 f4       	brcc	.+10     	; 0x3980 <Normal_State+0x44>
    3976:	84 34       	cpi	r24, 0x44	; 68
    3978:	09 f1       	breq	.+66     	; 0x39bc <Normal_State+0x80>
    397a:	8f 34       	cpi	r24, 0x4F	; 79
    397c:	81 f5       	brne	.+96     	; 0x39de <Normal_State+0xa2>
    397e:	2a c0       	rjmp	.+84     	; 0x39d4 <Normal_State+0x98>
    3980:	82 35       	cpi	r24, 0x52	; 82
    3982:	79 f0       	breq	.+30     	; 0x39a2 <Normal_State+0x66>
    3984:	83 35       	cpi	r24, 0x53	; 83
    3986:	59 f5       	brne	.+86     	; 0x39de <Normal_State+0xa2>
    3988:	28 c0       	rjmp	.+80     	; 0x39da <Normal_State+0x9e>
	case 'P':
		if (Current_Speed == 0) {
    398a:	80 91 ba 02 	lds	r24, 0x02BA
    398e:	90 91 bb 02 	lds	r25, 0x02BB
    3992:	89 2b       	or	r24, r25
    3994:	21 f5       	brne	.+72     	; 0x39de <Normal_State+0xa2>
			Parking_Flag = TRUE;
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	80 93 6a 02 	sts	0x026A, r24
			Normal_Flag = FALSE;
    399c:	10 92 bd 02 	sts	0x02BD, r1
    39a0:	1e c0       	rjmp	.+60     	; 0x39de <Normal_State+0xa2>
		}
		break;
	case 'R':
		if (Current_Speed == 0 || Current_Speed < 0) {
    39a2:	80 91 ba 02 	lds	r24, 0x02BA
    39a6:	90 91 bb 02 	lds	r25, 0x02BB
    39aa:	18 16       	cp	r1, r24
    39ac:	19 06       	cpc	r1, r25
    39ae:	bc f0       	brlt	.+46     	; 0x39de <Normal_State+0xa2>
			Reverse_Flag = TRUE;
    39b0:	81 e0       	ldi	r24, 0x01	; 1
    39b2:	80 93 bc 02 	sts	0x02BC, r24
			Normal_Flag = FALSE;
    39b6:	10 92 bd 02 	sts	0x02BD, r1
    39ba:	11 c0       	rjmp	.+34     	; 0x39de <Normal_State+0xa2>
		}
		break;
	case 'D':
		if (Current_Speed == 0 || Current_Speed > 0) {
    39bc:	80 91 ba 02 	lds	r24, 0x02BA
    39c0:	90 91 bb 02 	lds	r25, 0x02BB
    39c4:	99 23       	and	r25, r25
    39c6:	5c f0       	brlt	.+22     	; 0x39de <Normal_State+0xa2>
			Drive_Flag = TRUE;
    39c8:	81 e0       	ldi	r24, 0x01	; 1
    39ca:	80 93 be 02 	sts	0x02BE, r24
			Normal_Flag = FALSE;
    39ce:	10 92 bd 02 	sts	0x02BD, r1
    39d2:	05 c0       	rjmp	.+10     	; 0x39de <Normal_State+0xa2>
		}
		break;
	case 'O':
		TGL_Limit_Speed();
    39d4:	0e 94 47 1b 	call	0x368e	; 0x368e <TGL_Limit_Speed>
    39d8:	02 c0       	rjmp	.+4      	; 0x39de <Normal_State+0xa2>
		break;
	case 'S':
		SET_LIMIT_SPEED();
    39da:	0e 94 1f 1a 	call	0x343e	; 0x343e <SET_LIMIT_SPEED>
		break;
	default:
		/**/
		break;
	}
}
    39de:	df 91       	pop	r29
    39e0:	cf 91       	pop	r28
    39e2:	08 95       	ret

000039e4 <Reverse_State>:
		break;
	default:
		break;
	}
}
void Reverse_State() {
    39e4:	0f 93       	push	r16
    39e6:	1f 93       	push	r17
    39e8:	cf 93       	push	r28
    39ea:	df 93       	push	r29
	LCD_Clear();
    39ec:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <LCD_Clear>
	KEYPAD_Read(&Mode_Selected);
    39f0:	89 e6       	ldi	r24, 0x69	; 105
    39f2:	92 e0       	ldi	r25, 0x02	; 2
    39f4:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <KEYPAD_Read>
	while ((Mode_Selected == 'E' || Mode_Selected == 'R' || Mode_Selected == 'B')
			&& Current_Speed <= 0) {
		Main_LCD_Display(Reverse_Mode);
		KEYPAD_Read(&Mode_Selected);
    39f8:	09 e6       	ldi	r16, 0x69	; 105
    39fa:	12 e0       	ldi	r17, 0x02	; 2
		Current_Speed_value(&Current_Speed);
    39fc:	ca eb       	ldi	r28, 0xBA	; 186
    39fe:	d2 e0       	ldi	r29, 0x02	; 2
    3a00:	09 c0       	rjmp	.+18     	; 0x3a14 <Reverse_State+0x30>
void Reverse_State() {
	LCD_Clear();
	KEYPAD_Read(&Mode_Selected);
	while ((Mode_Selected == 'E' || Mode_Selected == 'R' || Mode_Selected == 'B')
			&& Current_Speed <= 0) {
		Main_LCD_Display(Reverse_Mode);
    3a02:	81 e0       	ldi	r24, 0x01	; 1
    3a04:	0e 94 75 1b 	call	0x36ea	; 0x36ea <Main_LCD_Display>
		KEYPAD_Read(&Mode_Selected);
    3a08:	c8 01       	movw	r24, r16
    3a0a:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <KEYPAD_Read>
		Current_Speed_value(&Current_Speed);
    3a0e:	ce 01       	movw	r24, r28
    3a10:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <Current_Speed_value>
	}
}
void Reverse_State() {
	LCD_Clear();
	KEYPAD_Read(&Mode_Selected);
	while ((Mode_Selected == 'E' || Mode_Selected == 'R' || Mode_Selected == 'B')
    3a14:	90 91 69 02 	lds	r25, 0x0269
    3a18:	95 34       	cpi	r25, 0x45	; 69
    3a1a:	21 f0       	breq	.+8      	; 0x3a24 <Reverse_State+0x40>
    3a1c:	92 35       	cpi	r25, 0x52	; 82
    3a1e:	11 f0       	breq	.+4      	; 0x3a24 <Reverse_State+0x40>
    3a20:	92 34       	cpi	r25, 0x42	; 66
    3a22:	41 f4       	brne	.+16     	; 0x3a34 <Reverse_State+0x50>
    3a24:	20 91 ba 02 	lds	r18, 0x02BA
    3a28:	30 91 bb 02 	lds	r19, 0x02BB
    3a2c:	12 16       	cp	r1, r18
    3a2e:	13 06       	cpc	r1, r19
    3a30:	44 f7       	brge	.-48     	; 0x3a02 <Reverse_State+0x1e>
    3a32:	07 c0       	rjmp	.+14     	; 0x3a42 <Reverse_State+0x5e>
			&& Current_Speed <= 0) {
		Main_LCD_Display(Reverse_Mode);
		KEYPAD_Read(&Mode_Selected);
		Current_Speed_value(&Current_Speed);
	}
	if (Current_Speed > 0) {
    3a34:	20 91 ba 02 	lds	r18, 0x02BA
    3a38:	30 91 bb 02 	lds	r19, 0x02BB
    3a3c:	12 16       	cp	r1, r18
    3a3e:	13 06       	cpc	r1, r19
    3a40:	2c f4       	brge	.+10     	; 0x3a4c <Reverse_State+0x68>
		Drive_Flag = TRUE;
    3a42:	81 e0       	ldi	r24, 0x01	; 1
    3a44:	80 93 be 02 	sts	0x02BE, r24
		Reverse_Flag = FALSE;
    3a48:	10 92 bc 02 	sts	0x02BC, r1
	}
	switch (Mode_Selected) {
    3a4c:	9f 34       	cpi	r25, 0x4F	; 79
    3a4e:	11 f1       	breq	.+68     	; 0x3a94 <Reverse_State+0xb0>
    3a50:	90 35       	cpi	r25, 0x50	; 80
    3a52:	28 f4       	brcc	.+10     	; 0x3a5e <Reverse_State+0x7a>
    3a54:	94 34       	cpi	r25, 0x44	; 68
    3a56:	b1 f0       	breq	.+44     	; 0x3a84 <Reverse_State+0xa0>
    3a58:	9e 34       	cpi	r25, 0x4E	; 78
    3a5a:	09 f5       	brne	.+66     	; 0x3a9e <Reverse_State+0xba>
    3a5c:	0d c0       	rjmp	.+26     	; 0x3a78 <Reverse_State+0x94>
    3a5e:	90 35       	cpi	r25, 0x50	; 80
    3a60:	19 f0       	breq	.+6      	; 0x3a68 <Reverse_State+0x84>
    3a62:	93 35       	cpi	r25, 0x53	; 83
    3a64:	e1 f4       	brne	.+56     	; 0x3a9e <Reverse_State+0xba>
    3a66:	19 c0       	rjmp	.+50     	; 0x3a9a <Reverse_State+0xb6>
	case 'P':
		if (Current_Speed == 0) {
    3a68:	23 2b       	or	r18, r19
    3a6a:	c9 f4       	brne	.+50     	; 0x3a9e <Reverse_State+0xba>
			Parking_Flag = TRUE;
    3a6c:	81 e0       	ldi	r24, 0x01	; 1
    3a6e:	80 93 6a 02 	sts	0x026A, r24
			Reverse_Flag = FALSE;
    3a72:	10 92 bc 02 	sts	0x02BC, r1
    3a76:	13 c0       	rjmp	.+38     	; 0x3a9e <Reverse_State+0xba>
		}
		break;
	case 'N':
		Normal_Flag = TRUE;
    3a78:	81 e0       	ldi	r24, 0x01	; 1
    3a7a:	80 93 bd 02 	sts	0x02BD, r24
		Reverse_Flag = FALSE;
    3a7e:	10 92 bc 02 	sts	0x02BC, r1
    3a82:	0d c0       	rjmp	.+26     	; 0x3a9e <Reverse_State+0xba>
		break;
	case 'D':
		if (Current_Speed == 0 || Current_Speed > 0) {
    3a84:	33 23       	and	r19, r19
    3a86:	5c f0       	brlt	.+22     	; 0x3a9e <Reverse_State+0xba>
			Drive_Flag = TRUE;
    3a88:	81 e0       	ldi	r24, 0x01	; 1
    3a8a:	80 93 be 02 	sts	0x02BE, r24
			Reverse_Flag = FALSE;
    3a8e:	10 92 bc 02 	sts	0x02BC, r1
    3a92:	05 c0       	rjmp	.+10     	; 0x3a9e <Reverse_State+0xba>
		}
		break;
	case 'O':
		TGL_Limit_Speed();
    3a94:	0e 94 47 1b 	call	0x368e	; 0x368e <TGL_Limit_Speed>
    3a98:	02 c0       	rjmp	.+4      	; 0x3a9e <Reverse_State+0xba>
		break;
	case 'S':
		SET_LIMIT_SPEED();
    3a9a:	0e 94 1f 1a 	call	0x343e	; 0x343e <SET_LIMIT_SPEED>
		break;
	default:

		break;
	}
}
    3a9e:	df 91       	pop	r29
    3aa0:	cf 91       	pop	r28
    3aa2:	1f 91       	pop	r17
    3aa4:	0f 91       	pop	r16
    3aa6:	08 95       	ret

00003aa8 <Parking_State>:

UINT8_t Mode_Selected = 'E';
bool Parking_Flag = TRUE, Reverse_Flag = FALSE, Normal_Flag = FALSE,
		Drive_Flag = FALSE, Limit_Flag = FALSE;

void Parking_State() {
    3aa8:	0f 93       	push	r16
    3aaa:	1f 93       	push	r17
    3aac:	cf 93       	push	r28
    3aae:	df 93       	push	r29
	LCD_Clear();
    3ab0:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <LCD_Clear>
	KEYPAD_Read(&Mode_Selected);
    3ab4:	89 e6       	ldi	r24, 0x69	; 105
    3ab6:	92 e0       	ldi	r25, 0x02	; 2
    3ab8:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <KEYPAD_Read>
	while ((Mode_Selected == 'E' || Mode_Selected == 'P' || Mode_Selected == 'B')) {
		Current_Speed=0;
		Main_LCD_Display(Parking_Mode);
		KEYPAD_Read(&Mode_Selected);
    3abc:	09 e6       	ldi	r16, 0x69	; 105
    3abe:	12 e0       	ldi	r17, 0x02	; 2
		Current_Speed_value(&Current_Speed);
    3ac0:	ca eb       	ldi	r28, 0xBA	; 186
    3ac2:	d2 e0       	ldi	r29, 0x02	; 2
    3ac4:	0d c0       	rjmp	.+26     	; 0x3ae0 <Parking_State+0x38>

void Parking_State() {
	LCD_Clear();
	KEYPAD_Read(&Mode_Selected);
	while ((Mode_Selected == 'E' || Mode_Selected == 'P' || Mode_Selected == 'B')) {
		Current_Speed=0;
    3ac6:	10 92 bb 02 	sts	0x02BB, r1
    3aca:	10 92 ba 02 	sts	0x02BA, r1
		Main_LCD_Display(Parking_Mode);
    3ace:	80 e0       	ldi	r24, 0x00	; 0
    3ad0:	0e 94 75 1b 	call	0x36ea	; 0x36ea <Main_LCD_Display>
		KEYPAD_Read(&Mode_Selected);
    3ad4:	c8 01       	movw	r24, r16
    3ad6:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <KEYPAD_Read>
		Current_Speed_value(&Current_Speed);
    3ada:	ce 01       	movw	r24, r28
    3adc:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <Current_Speed_value>
		Drive_Flag = FALSE, Limit_Flag = FALSE;

void Parking_State() {
	LCD_Clear();
	KEYPAD_Read(&Mode_Selected);
	while ((Mode_Selected == 'E' || Mode_Selected == 'P' || Mode_Selected == 'B')) {
    3ae0:	90 91 69 02 	lds	r25, 0x0269
    3ae4:	95 34       	cpi	r25, 0x45	; 69
    3ae6:	79 f3       	breq	.-34     	; 0x3ac6 <Parking_State+0x1e>
    3ae8:	90 35       	cpi	r25, 0x50	; 80
    3aea:	69 f3       	breq	.-38     	; 0x3ac6 <Parking_State+0x1e>
    3aec:	92 34       	cpi	r25, 0x42	; 66
    3aee:	59 f3       	breq	.-42     	; 0x3ac6 <Parking_State+0x1e>
		Current_Speed=0;
		Main_LCD_Display(Parking_Mode);
		KEYPAD_Read(&Mode_Selected);
		Current_Speed_value(&Current_Speed);
	}
	if (Current_Speed > 0) {
    3af0:	20 91 ba 02 	lds	r18, 0x02BA
    3af4:	30 91 bb 02 	lds	r19, 0x02BB
    3af8:	12 16       	cp	r1, r18
    3afa:	13 06       	cpc	r1, r19
    3afc:	2c f4       	brge	.+10     	; 0x3b08 <Parking_State+0x60>
		Drive_Flag = TRUE;
    3afe:	81 e0       	ldi	r24, 0x01	; 1
    3b00:	80 93 be 02 	sts	0x02BE, r24
		Parking_Flag = FALSE;
    3b04:	10 92 6a 02 	sts	0x026A, r1
	}
	if (Current_Speed < 0) {
    3b08:	33 23       	and	r19, r19
    3b0a:	2c f4       	brge	.+10     	; 0x3b16 <Parking_State+0x6e>
		Reverse_Flag = TRUE;
    3b0c:	81 e0       	ldi	r24, 0x01	; 1
    3b0e:	80 93 bc 02 	sts	0x02BC, r24
		Parking_Flag = FALSE;
    3b12:	10 92 6a 02 	sts	0x026A, r1
	}
	switch (Mode_Selected) {
    3b16:	9f 34       	cpi	r25, 0x4F	; 79
    3b18:	19 f1       	breq	.+70     	; 0x3b60 <Parking_State+0xb8>
    3b1a:	90 35       	cpi	r25, 0x50	; 80
    3b1c:	28 f4       	brcc	.+10     	; 0x3b28 <Parking_State+0x80>
    3b1e:	94 34       	cpi	r25, 0x44	; 68
    3b20:	b9 f0       	breq	.+46     	; 0x3b50 <Parking_State+0xa8>
    3b22:	9e 34       	cpi	r25, 0x4E	; 78
    3b24:	11 f5       	brne	.+68     	; 0x3b6a <Parking_State+0xc2>
    3b26:	0e c0       	rjmp	.+28     	; 0x3b44 <Parking_State+0x9c>
    3b28:	92 35       	cpi	r25, 0x52	; 82
    3b2a:	19 f0       	breq	.+6      	; 0x3b32 <Parking_State+0x8a>
    3b2c:	93 35       	cpi	r25, 0x53	; 83
    3b2e:	e9 f4       	brne	.+58     	; 0x3b6a <Parking_State+0xc2>
    3b30:	1a c0       	rjmp	.+52     	; 0x3b66 <Parking_State+0xbe>
	case 'R':
		if (Current_Speed == 0 || Current_Speed < 0) {
    3b32:	12 16       	cp	r1, r18
    3b34:	13 06       	cpc	r1, r19
    3b36:	cc f0       	brlt	.+50     	; 0x3b6a <Parking_State+0xc2>
			Reverse_Flag = TRUE;
    3b38:	81 e0       	ldi	r24, 0x01	; 1
    3b3a:	80 93 bc 02 	sts	0x02BC, r24
			Parking_Flag = FALSE;
    3b3e:	10 92 6a 02 	sts	0x026A, r1
    3b42:	13 c0       	rjmp	.+38     	; 0x3b6a <Parking_State+0xc2>
		}
		break;
	case 'N':
		Normal_Flag = TRUE;
    3b44:	81 e0       	ldi	r24, 0x01	; 1
    3b46:	80 93 bd 02 	sts	0x02BD, r24
		Parking_Flag = FALSE;
    3b4a:	10 92 6a 02 	sts	0x026A, r1
    3b4e:	0d c0       	rjmp	.+26     	; 0x3b6a <Parking_State+0xc2>
		break;
	case 'D':
		if (Current_Speed == 0 || Current_Speed > 0) {
    3b50:	33 23       	and	r19, r19
    3b52:	5c f0       	brlt	.+22     	; 0x3b6a <Parking_State+0xc2>
			Drive_Flag = TRUE;
    3b54:	81 e0       	ldi	r24, 0x01	; 1
    3b56:	80 93 be 02 	sts	0x02BE, r24
			Parking_Flag = FALSE;
    3b5a:	10 92 6a 02 	sts	0x026A, r1
    3b5e:	05 c0       	rjmp	.+10     	; 0x3b6a <Parking_State+0xc2>
		}
		break;
	case 'O':
		TGL_Limit_Speed();
    3b60:	0e 94 47 1b 	call	0x368e	; 0x368e <TGL_Limit_Speed>
    3b64:	02 c0       	rjmp	.+4      	; 0x3b6a <Parking_State+0xc2>
		break;
	case 'S':
		SET_LIMIT_SPEED();
    3b66:	0e 94 1f 1a 	call	0x343e	; 0x343e <SET_LIMIT_SPEED>
		break;
	default:
		break;
	}
}
    3b6a:	df 91       	pop	r29
    3b6c:	cf 91       	pop	r28
    3b6e:	1f 91       	pop	r17
    3b70:	0f 91       	pop	r16
    3b72:	08 95       	ret

00003b74 <main>:
 *
 */
#include "main.h"

int main() {
	Application_Initialize();
    3b74:	0e 94 8e 18 	call	0x311c	; 0x311c <Application_Initialize>
	while (1) {
		MAIN_Application();
    3b78:	0e 94 71 18 	call	0x30e2	; 0x30e2 <MAIN_Application>
    3b7c:	fd cf       	rjmp	.-6      	; 0x3b78 <main+0x4>

00003b7e <__udivmodhi4>:
    3b7e:	aa 1b       	sub	r26, r26
    3b80:	bb 1b       	sub	r27, r27
    3b82:	51 e1       	ldi	r21, 0x11	; 17
    3b84:	07 c0       	rjmp	.+14     	; 0x3b94 <__udivmodhi4_ep>

00003b86 <__udivmodhi4_loop>:
    3b86:	aa 1f       	adc	r26, r26
    3b88:	bb 1f       	adc	r27, r27
    3b8a:	a6 17       	cp	r26, r22
    3b8c:	b7 07       	cpc	r27, r23
    3b8e:	10 f0       	brcs	.+4      	; 0x3b94 <__udivmodhi4_ep>
    3b90:	a6 1b       	sub	r26, r22
    3b92:	b7 0b       	sbc	r27, r23

00003b94 <__udivmodhi4_ep>:
    3b94:	88 1f       	adc	r24, r24
    3b96:	99 1f       	adc	r25, r25
    3b98:	5a 95       	dec	r21
    3b9a:	a9 f7       	brne	.-22     	; 0x3b86 <__udivmodhi4_loop>
    3b9c:	80 95       	com	r24
    3b9e:	90 95       	com	r25
    3ba0:	bc 01       	movw	r22, r24
    3ba2:	cd 01       	movw	r24, r26
    3ba4:	08 95       	ret

00003ba6 <__divmodhi4>:
    3ba6:	97 fb       	bst	r25, 7
    3ba8:	09 2e       	mov	r0, r25
    3baa:	07 26       	eor	r0, r23
    3bac:	0a d0       	rcall	.+20     	; 0x3bc2 <__divmodhi4_neg1>
    3bae:	77 fd       	sbrc	r23, 7
    3bb0:	04 d0       	rcall	.+8      	; 0x3bba <__divmodhi4_neg2>
    3bb2:	e5 df       	rcall	.-54     	; 0x3b7e <__udivmodhi4>
    3bb4:	06 d0       	rcall	.+12     	; 0x3bc2 <__divmodhi4_neg1>
    3bb6:	00 20       	and	r0, r0
    3bb8:	1a f4       	brpl	.+6      	; 0x3bc0 <__divmodhi4_exit>

00003bba <__divmodhi4_neg2>:
    3bba:	70 95       	com	r23
    3bbc:	61 95       	neg	r22
    3bbe:	7f 4f       	sbci	r23, 0xFF	; 255

00003bc0 <__divmodhi4_exit>:
    3bc0:	08 95       	ret

00003bc2 <__divmodhi4_neg1>:
    3bc2:	f6 f7       	brtc	.-4      	; 0x3bc0 <__divmodhi4_exit>
    3bc4:	90 95       	com	r25
    3bc6:	81 95       	neg	r24
    3bc8:	9f 4f       	sbci	r25, 0xFF	; 255
    3bca:	08 95       	ret

00003bcc <__udivmodsi4>:
    3bcc:	a1 e2       	ldi	r26, 0x21	; 33
    3bce:	1a 2e       	mov	r1, r26
    3bd0:	aa 1b       	sub	r26, r26
    3bd2:	bb 1b       	sub	r27, r27
    3bd4:	fd 01       	movw	r30, r26
    3bd6:	0d c0       	rjmp	.+26     	; 0x3bf2 <__udivmodsi4_ep>

00003bd8 <__udivmodsi4_loop>:
    3bd8:	aa 1f       	adc	r26, r26
    3bda:	bb 1f       	adc	r27, r27
    3bdc:	ee 1f       	adc	r30, r30
    3bde:	ff 1f       	adc	r31, r31
    3be0:	a2 17       	cp	r26, r18
    3be2:	b3 07       	cpc	r27, r19
    3be4:	e4 07       	cpc	r30, r20
    3be6:	f5 07       	cpc	r31, r21
    3be8:	20 f0       	brcs	.+8      	; 0x3bf2 <__udivmodsi4_ep>
    3bea:	a2 1b       	sub	r26, r18
    3bec:	b3 0b       	sbc	r27, r19
    3bee:	e4 0b       	sbc	r30, r20
    3bf0:	f5 0b       	sbc	r31, r21

00003bf2 <__udivmodsi4_ep>:
    3bf2:	66 1f       	adc	r22, r22
    3bf4:	77 1f       	adc	r23, r23
    3bf6:	88 1f       	adc	r24, r24
    3bf8:	99 1f       	adc	r25, r25
    3bfa:	1a 94       	dec	r1
    3bfc:	69 f7       	brne	.-38     	; 0x3bd8 <__udivmodsi4_loop>
    3bfe:	60 95       	com	r22
    3c00:	70 95       	com	r23
    3c02:	80 95       	com	r24
    3c04:	90 95       	com	r25
    3c06:	9b 01       	movw	r18, r22
    3c08:	ac 01       	movw	r20, r24
    3c0a:	bd 01       	movw	r22, r26
    3c0c:	cf 01       	movw	r24, r30
    3c0e:	08 95       	ret

00003c10 <__mulsi3>:
    3c10:	62 9f       	mul	r22, r18
    3c12:	d0 01       	movw	r26, r0
    3c14:	73 9f       	mul	r23, r19
    3c16:	f0 01       	movw	r30, r0
    3c18:	82 9f       	mul	r24, r18
    3c1a:	e0 0d       	add	r30, r0
    3c1c:	f1 1d       	adc	r31, r1
    3c1e:	64 9f       	mul	r22, r20
    3c20:	e0 0d       	add	r30, r0
    3c22:	f1 1d       	adc	r31, r1
    3c24:	92 9f       	mul	r25, r18
    3c26:	f0 0d       	add	r31, r0
    3c28:	83 9f       	mul	r24, r19
    3c2a:	f0 0d       	add	r31, r0
    3c2c:	74 9f       	mul	r23, r20
    3c2e:	f0 0d       	add	r31, r0
    3c30:	65 9f       	mul	r22, r21
    3c32:	f0 0d       	add	r31, r0
    3c34:	99 27       	eor	r25, r25
    3c36:	72 9f       	mul	r23, r18
    3c38:	b0 0d       	add	r27, r0
    3c3a:	e1 1d       	adc	r30, r1
    3c3c:	f9 1f       	adc	r31, r25
    3c3e:	63 9f       	mul	r22, r19
    3c40:	b0 0d       	add	r27, r0
    3c42:	e1 1d       	adc	r30, r1
    3c44:	f9 1f       	adc	r31, r25
    3c46:	bd 01       	movw	r22, r26
    3c48:	cf 01       	movw	r24, r30
    3c4a:	11 24       	eor	r1, r1
    3c4c:	08 95       	ret

00003c4e <__prologue_saves__>:
    3c4e:	2f 92       	push	r2
    3c50:	3f 92       	push	r3
    3c52:	4f 92       	push	r4
    3c54:	5f 92       	push	r5
    3c56:	6f 92       	push	r6
    3c58:	7f 92       	push	r7
    3c5a:	8f 92       	push	r8
    3c5c:	9f 92       	push	r9
    3c5e:	af 92       	push	r10
    3c60:	bf 92       	push	r11
    3c62:	cf 92       	push	r12
    3c64:	df 92       	push	r13
    3c66:	ef 92       	push	r14
    3c68:	ff 92       	push	r15
    3c6a:	0f 93       	push	r16
    3c6c:	1f 93       	push	r17
    3c6e:	cf 93       	push	r28
    3c70:	df 93       	push	r29
    3c72:	cd b7       	in	r28, 0x3d	; 61
    3c74:	de b7       	in	r29, 0x3e	; 62
    3c76:	ca 1b       	sub	r28, r26
    3c78:	db 0b       	sbc	r29, r27
    3c7a:	0f b6       	in	r0, 0x3f	; 63
    3c7c:	f8 94       	cli
    3c7e:	de bf       	out	0x3e, r29	; 62
    3c80:	0f be       	out	0x3f, r0	; 63
    3c82:	cd bf       	out	0x3d, r28	; 61
    3c84:	09 94       	ijmp

00003c86 <__epilogue_restores__>:
    3c86:	2a 88       	ldd	r2, Y+18	; 0x12
    3c88:	39 88       	ldd	r3, Y+17	; 0x11
    3c8a:	48 88       	ldd	r4, Y+16	; 0x10
    3c8c:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c8e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c90:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c92:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c94:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c96:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c98:	b9 84       	ldd	r11, Y+9	; 0x09
    3c9a:	c8 84       	ldd	r12, Y+8	; 0x08
    3c9c:	df 80       	ldd	r13, Y+7	; 0x07
    3c9e:	ee 80       	ldd	r14, Y+6	; 0x06
    3ca0:	fd 80       	ldd	r15, Y+5	; 0x05
    3ca2:	0c 81       	ldd	r16, Y+4	; 0x04
    3ca4:	1b 81       	ldd	r17, Y+3	; 0x03
    3ca6:	aa 81       	ldd	r26, Y+2	; 0x02
    3ca8:	b9 81       	ldd	r27, Y+1	; 0x01
    3caa:	ce 0f       	add	r28, r30
    3cac:	d1 1d       	adc	r29, r1
    3cae:	0f b6       	in	r0, 0x3f	; 63
    3cb0:	f8 94       	cli
    3cb2:	de bf       	out	0x3e, r29	; 62
    3cb4:	0f be       	out	0x3f, r0	; 63
    3cb6:	cd bf       	out	0x3d, r28	; 61
    3cb8:	ed 01       	movw	r28, r26
    3cba:	08 95       	ret

00003cbc <_exit>:
    3cbc:	f8 94       	cli

00003cbe <__stop_program>:
    3cbe:	ff cf       	rjmp	.-2      	; 0x3cbe <__stop_program>
